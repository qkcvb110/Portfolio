
fdcan_ult_lux.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009174  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000011c  08009424  08009424  00019424  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08009540  08009540  00019540  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08009544  08009544  00019544  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000074  24000000  08009548  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000748  24000074  080095bc  00020074  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  240007bc  080095bc  000207bc  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
  9 .debug_info   00031c4f  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00004b38  00000000  00000000  00051cf1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001ac0  00000000  00000000  00056830  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00001918  00000000  00000000  000582f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  000358fe  00000000  00000000  00059c08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0001e4c7  00000000  00000000  0008f506  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0016041f  00000000  00000000  000ad9cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000053  00000000  00000000  0020ddec  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00007740  00000000  00000000  0020de40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000074 	.word	0x24000074
 80002cc:	00000000 	.word	0x00000000
 80002d0:	0800940c 	.word	0x0800940c

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000078 	.word	0x24000078
 80002ec:	0800940c 	.word	0x0800940c

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	b08a      	sub	sp, #40	; 0x28
 8000394:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000396:	f107 031c 	add.w	r3, r7, #28
 800039a:	2200      	movs	r2, #0
 800039c:	601a      	str	r2, [r3, #0]
 800039e:	605a      	str	r2, [r3, #4]
 80003a0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80003a2:	463b      	mov	r3, r7
 80003a4:	2200      	movs	r2, #0
 80003a6:	601a      	str	r2, [r3, #0]
 80003a8:	605a      	str	r2, [r3, #4]
 80003aa:	609a      	str	r2, [r3, #8]
 80003ac:	60da      	str	r2, [r3, #12]
 80003ae:	611a      	str	r2, [r3, #16]
 80003b0:	615a      	str	r2, [r3, #20]
 80003b2:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80003b4:	4b2f      	ldr	r3, [pc, #188]	; (8000474 <MX_ADC1_Init+0xe4>)
 80003b6:	4a30      	ldr	r2, [pc, #192]	; (8000478 <MX_ADC1_Init+0xe8>)
 80003b8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80003ba:	4b2e      	ldr	r3, [pc, #184]	; (8000474 <MX_ADC1_Init+0xe4>)
 80003bc:	2200      	movs	r2, #0
 80003be:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 80003c0:	4b2c      	ldr	r3, [pc, #176]	; (8000474 <MX_ADC1_Init+0xe4>)
 80003c2:	2200      	movs	r2, #0
 80003c4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80003c6:	4b2b      	ldr	r3, [pc, #172]	; (8000474 <MX_ADC1_Init+0xe4>)
 80003c8:	2200      	movs	r2, #0
 80003ca:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80003cc:	4b29      	ldr	r3, [pc, #164]	; (8000474 <MX_ADC1_Init+0xe4>)
 80003ce:	2204      	movs	r2, #4
 80003d0:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80003d2:	4b28      	ldr	r3, [pc, #160]	; (8000474 <MX_ADC1_Init+0xe4>)
 80003d4:	2200      	movs	r2, #0
 80003d6:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80003d8:	4b26      	ldr	r3, [pc, #152]	; (8000474 <MX_ADC1_Init+0xe4>)
 80003da:	2200      	movs	r2, #0
 80003dc:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 80003de:	4b25      	ldr	r3, [pc, #148]	; (8000474 <MX_ADC1_Init+0xe4>)
 80003e0:	2201      	movs	r2, #1
 80003e2:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80003e4:	4b23      	ldr	r3, [pc, #140]	; (8000474 <MX_ADC1_Init+0xe4>)
 80003e6:	2200      	movs	r2, #0
 80003e8:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80003ea:	4b22      	ldr	r3, [pc, #136]	; (8000474 <MX_ADC1_Init+0xe4>)
 80003ec:	2200      	movs	r2, #0
 80003ee:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80003f0:	4b20      	ldr	r3, [pc, #128]	; (8000474 <MX_ADC1_Init+0xe4>)
 80003f2:	2200      	movs	r2, #0
 80003f4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80003f6:	4b1f      	ldr	r3, [pc, #124]	; (8000474 <MX_ADC1_Init+0xe4>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80003fc:	4b1d      	ldr	r3, [pc, #116]	; (8000474 <MX_ADC1_Init+0xe4>)
 80003fe:	2200      	movs	r2, #0
 8000400:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000402:	4b1c      	ldr	r3, [pc, #112]	; (8000474 <MX_ADC1_Init+0xe4>)
 8000404:	2200      	movs	r2, #0
 8000406:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000408:	4b1a      	ldr	r3, [pc, #104]	; (8000474 <MX_ADC1_Init+0xe4>)
 800040a:	2200      	movs	r2, #0
 800040c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000410:	4818      	ldr	r0, [pc, #96]	; (8000474 <MX_ADC1_Init+0xe4>)
 8000412:	f001 fb7b 	bl	8001b0c <HAL_ADC_Init>
 8000416:	4603      	mov	r3, r0
 8000418:	2b00      	cmp	r3, #0
 800041a:	d001      	beq.n	8000420 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800041c:	f000 fe7e 	bl	800111c <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000420:	2300      	movs	r3, #0
 8000422:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000424:	f107 031c 	add.w	r3, r7, #28
 8000428:	4619      	mov	r1, r3
 800042a:	4812      	ldr	r0, [pc, #72]	; (8000474 <MX_ADC1_Init+0xe4>)
 800042c:	f002 fabc 	bl	80029a8 <HAL_ADCEx_MultiModeConfigChannel>
 8000430:	4603      	mov	r3, r0
 8000432:	2b00      	cmp	r3, #0
 8000434:	d001      	beq.n	800043a <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000436:	f000 fe71 	bl	800111c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800043a:	4b10      	ldr	r3, [pc, #64]	; (800047c <MX_ADC1_Init+0xec>)
 800043c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800043e:	2306      	movs	r3, #6
 8000440:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000442:	2300      	movs	r3, #0
 8000444:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000446:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800044a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800044c:	2304      	movs	r3, #4
 800044e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000450:	2300      	movs	r3, #0
 8000452:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000454:	2300      	movs	r3, #0
 8000456:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000458:	463b      	mov	r3, r7
 800045a:	4619      	mov	r1, r3
 800045c:	4805      	ldr	r0, [pc, #20]	; (8000474 <MX_ADC1_Init+0xe4>)
 800045e:	f001 fe4f 	bl	8002100 <HAL_ADC_ConfigChannel>
 8000462:	4603      	mov	r3, r0
 8000464:	2b00      	cmp	r3, #0
 8000466:	d001      	beq.n	800046c <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 8000468:	f000 fe58 	bl	800111c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800046c:	bf00      	nop
 800046e:	3728      	adds	r7, #40	; 0x28
 8000470:	46bd      	mov	sp, r7
 8000472:	bd80      	pop	{r7, pc}
 8000474:	24000558 	.word	0x24000558
 8000478:	40022000 	.word	0x40022000
 800047c:	08600004 	.word	0x08600004

08000480 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	b0b8      	sub	sp, #224	; 0xe0
 8000484:	af00      	add	r7, sp, #0
 8000486:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000488:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800048c:	2200      	movs	r2, #0
 800048e:	601a      	str	r2, [r3, #0]
 8000490:	605a      	str	r2, [r3, #4]
 8000492:	609a      	str	r2, [r3, #8]
 8000494:	60da      	str	r2, [r3, #12]
 8000496:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000498:	f107 0314 	add.w	r3, r7, #20
 800049c:	22b8      	movs	r2, #184	; 0xb8
 800049e:	2100      	movs	r1, #0
 80004a0:	4618      	mov	r0, r3
 80004a2:	f008 fb8d 	bl	8008bc0 <memset>
  if(adcHandle->Instance==ADC1)
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	681b      	ldr	r3, [r3, #0]
 80004aa:	4a2a      	ldr	r2, [pc, #168]	; (8000554 <HAL_ADC_MspInit+0xd4>)
 80004ac:	4293      	cmp	r3, r2
 80004ae:	d14d      	bne.n	800054c <HAL_ADC_MspInit+0xcc>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80004b0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80004b4:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLL2.PLL2M = 32;
 80004b6:	2320      	movs	r3, #32
 80004b8:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 129;
 80004ba:	2381      	movs	r3, #129	; 0x81
 80004bc:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 80004be:	2302      	movs	r3, #2
 80004c0:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80004c2:	2302      	movs	r3, #2
 80004c4:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 80004c6:	2302      	movs	r3, #2
 80004c8:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_1;
 80004ca:	2340      	movs	r3, #64	; 0x40
 80004cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80004ce:	2300      	movs	r3, #0
 80004d0:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80004d2:	2300      	movs	r3, #0
 80004d4:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80004d6:	2300      	movs	r3, #0
 80004d8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80004dc:	f107 0314 	add.w	r3, r7, #20
 80004e0:	4618      	mov	r0, r3
 80004e2:	f004 ff91 	bl	8005408 <HAL_RCCEx_PeriphCLKConfig>
 80004e6:	4603      	mov	r3, r0
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d001      	beq.n	80004f0 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 80004ec:	f000 fe16 	bl	800111c <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80004f0:	4b19      	ldr	r3, [pc, #100]	; (8000558 <HAL_ADC_MspInit+0xd8>)
 80004f2:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 80004f6:	4a18      	ldr	r2, [pc, #96]	; (8000558 <HAL_ADC_MspInit+0xd8>)
 80004f8:	f043 0320 	orr.w	r3, r3, #32
 80004fc:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 8000500:	4b15      	ldr	r3, [pc, #84]	; (8000558 <HAL_ADC_MspInit+0xd8>)
 8000502:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000506:	f003 0320 	and.w	r3, r3, #32
 800050a:	613b      	str	r3, [r7, #16]
 800050c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800050e:	4b12      	ldr	r3, [pc, #72]	; (8000558 <HAL_ADC_MspInit+0xd8>)
 8000510:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000514:	4a10      	ldr	r2, [pc, #64]	; (8000558 <HAL_ADC_MspInit+0xd8>)
 8000516:	f043 0320 	orr.w	r3, r3, #32
 800051a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800051e:	4b0e      	ldr	r3, [pc, #56]	; (8000558 <HAL_ADC_MspInit+0xd8>)
 8000520:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000524:	f003 0320 	and.w	r3, r3, #32
 8000528:	60fb      	str	r3, [r7, #12]
 800052a:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PF11     ------> ADC1_INP2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800052c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000530:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000534:	2303      	movs	r3, #3
 8000536:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800053a:	2300      	movs	r3, #0
 800053c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000540:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000544:	4619      	mov	r1, r3
 8000546:	4805      	ldr	r0, [pc, #20]	; (800055c <HAL_ADC_MspInit+0xdc>)
 8000548:	f003 fd7e 	bl	8004048 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800054c:	bf00      	nop
 800054e:	37e0      	adds	r7, #224	; 0xe0
 8000550:	46bd      	mov	sp, r7
 8000552:	bd80      	pop	{r7, pc}
 8000554:	40022000 	.word	0x40022000
 8000558:	58024400 	.word	0x58024400
 800055c:	58021400 	.word	0x58021400

08000560 <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000564:	4b56      	ldr	r3, [pc, #344]	; (80006c0 <MX_FDCAN1_Init+0x160>)
 8000566:	4a57      	ldr	r2, [pc, #348]	; (80006c4 <MX_FDCAN1_Init+0x164>)
 8000568:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_NO_BRS;
 800056a:	4b55      	ldr	r3, [pc, #340]	; (80006c0 <MX_FDCAN1_Init+0x160>)
 800056c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000570:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000572:	4b53      	ldr	r3, [pc, #332]	; (80006c0 <MX_FDCAN1_Init+0x160>)
 8000574:	2200      	movs	r2, #0
 8000576:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 8000578:	4b51      	ldr	r3, [pc, #324]	; (80006c0 <MX_FDCAN1_Init+0x160>)
 800057a:	2201      	movs	r2, #1
 800057c:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 800057e:	4b50      	ldr	r3, [pc, #320]	; (80006c0 <MX_FDCAN1_Init+0x160>)
 8000580:	2200      	movs	r2, #0
 8000582:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000584:	4b4e      	ldr	r3, [pc, #312]	; (80006c0 <MX_FDCAN1_Init+0x160>)
 8000586:	2200      	movs	r2, #0
 8000588:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 800058a:	4b4d      	ldr	r3, [pc, #308]	; (80006c0 <MX_FDCAN1_Init+0x160>)
 800058c:	2201      	movs	r2, #1
 800058e:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000590:	4b4b      	ldr	r3, [pc, #300]	; (80006c0 <MX_FDCAN1_Init+0x160>)
 8000592:	2201      	movs	r2, #1
 8000594:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 5;
 8000596:	4b4a      	ldr	r3, [pc, #296]	; (80006c0 <MX_FDCAN1_Init+0x160>)
 8000598:	2205      	movs	r2, #5
 800059a:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 800059c:	4b48      	ldr	r3, [pc, #288]	; (80006c0 <MX_FDCAN1_Init+0x160>)
 800059e:	2202      	movs	r2, #2
 80005a0:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 80005a2:	4b47      	ldr	r3, [pc, #284]	; (80006c0 <MX_FDCAN1_Init+0x160>)
 80005a4:	2201      	movs	r2, #1
 80005a6:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 4;
 80005a8:	4b45      	ldr	r3, [pc, #276]	; (80006c0 <MX_FDCAN1_Init+0x160>)
 80005aa:	2204      	movs	r2, #4
 80005ac:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 5;
 80005ae:	4b44      	ldr	r3, [pc, #272]	; (80006c0 <MX_FDCAN1_Init+0x160>)
 80005b0:	2205      	movs	r2, #5
 80005b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 4;
 80005b4:	4b42      	ldr	r3, [pc, #264]	; (80006c0 <MX_FDCAN1_Init+0x160>)
 80005b6:	2204      	movs	r2, #4
 80005b8:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 80005ba:	4b41      	ldr	r3, [pc, #260]	; (80006c0 <MX_FDCAN1_Init+0x160>)
 80005bc:	2200      	movs	r2, #0
 80005be:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 1;
 80005c0:	4b3f      	ldr	r3, [pc, #252]	; (80006c0 <MX_FDCAN1_Init+0x160>)
 80005c2:	2201      	movs	r2, #1
 80005c4:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 80005c6:	4b3e      	ldr	r3, [pc, #248]	; (80006c0 <MX_FDCAN1_Init+0x160>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 1;
 80005cc:	4b3c      	ldr	r3, [pc, #240]	; (80006c0 <MX_FDCAN1_Init+0x160>)
 80005ce:	2201      	movs	r2, #1
 80005d0:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_16;
 80005d2:	4b3b      	ldr	r3, [pc, #236]	; (80006c0 <MX_FDCAN1_Init+0x160>)
 80005d4:	2206      	movs	r2, #6
 80005d6:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 80005d8:	4b39      	ldr	r3, [pc, #228]	; (80006c0 <MX_FDCAN1_Init+0x160>)
 80005da:	2200      	movs	r2, #0
 80005dc:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_16;
 80005de:	4b38      	ldr	r3, [pc, #224]	; (80006c0 <MX_FDCAN1_Init+0x160>)
 80005e0:	2206      	movs	r2, #6
 80005e2:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 1;
 80005e4:	4b36      	ldr	r3, [pc, #216]	; (80006c0 <MX_FDCAN1_Init+0x160>)
 80005e6:	2201      	movs	r2, #1
 80005e8:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_16;
 80005ea:	4b35      	ldr	r3, [pc, #212]	; (80006c0 <MX_FDCAN1_Init+0x160>)
 80005ec:	2206      	movs	r2, #6
 80005ee:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 80005f0:	4b33      	ldr	r3, [pc, #204]	; (80006c0 <MX_FDCAN1_Init+0x160>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 80005f6:	4b32      	ldr	r3, [pc, #200]	; (80006c0 <MX_FDCAN1_Init+0x160>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 1;
 80005fc:	4b30      	ldr	r3, [pc, #192]	; (80006c0 <MX_FDCAN1_Init+0x160>)
 80005fe:	2201      	movs	r2, #1
 8000600:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000602:	4b2f      	ldr	r3, [pc, #188]	; (80006c0 <MX_FDCAN1_Init+0x160>)
 8000604:	2200      	movs	r2, #0
 8000606:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_16;
 8000608:	4b2d      	ldr	r3, [pc, #180]	; (80006c0 <MX_FDCAN1_Init+0x160>)
 800060a:	2206      	movs	r2, #6
 800060c:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 800060e:	482c      	ldr	r0, [pc, #176]	; (80006c0 <MX_FDCAN1_Init+0x160>)
 8000610:	f002 fb46 	bl	8002ca0 <HAL_FDCAN_Init>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	d001      	beq.n	800061e <MX_FDCAN1_Init+0xbe>
  {
    Error_Handler();
 800061a:	f000 fd7f 	bl	800111c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
  sFilterConfig.IdType = FDCAN_STANDARD_ID;
 800061e:	4b2a      	ldr	r3, [pc, #168]	; (80006c8 <MX_FDCAN1_Init+0x168>)
 8000620:	2200      	movs	r2, #0
 8000622:	601a      	str	r2, [r3, #0]
      sFilterConfig.FilterIndex = 0;
 8000624:	4b28      	ldr	r3, [pc, #160]	; (80006c8 <MX_FDCAN1_Init+0x168>)
 8000626:	2200      	movs	r2, #0
 8000628:	605a      	str	r2, [r3, #4]
      sFilterConfig.FilterType = FDCAN_FILTER_MASK; // Ignore because FDCAN_FILTER_TO_RXBUFFE
 800062a:	4b27      	ldr	r3, [pc, #156]	; (80006c8 <MX_FDCAN1_Init+0x168>)
 800062c:	2202      	movs	r2, #2
 800062e:	609a      	str	r2, [r3, #8]
      sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8000630:	4b25      	ldr	r3, [pc, #148]	; (80006c8 <MX_FDCAN1_Init+0x168>)
 8000632:	2201      	movs	r2, #1
 8000634:	60da      	str	r2, [r3, #12]
      sFilterConfig.FilterID1 = 0x11; // ID Node2
 8000636:	4b24      	ldr	r3, [pc, #144]	; (80006c8 <MX_FDCAN1_Init+0x168>)
 8000638:	2211      	movs	r2, #17
 800063a:	611a      	str	r2, [r3, #16]
      sFilterConfig.FilterID2 = 0x7ff; // Ignore because FDCAN_FILTER_TO_RXBUFFER
 800063c:	4b22      	ldr	r3, [pc, #136]	; (80006c8 <MX_FDCAN1_Init+0x168>)
 800063e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000642:	615a      	str	r2, [r3, #20]
      sFilterConfig.RxBufferIndex = 0;
 8000644:	4b20      	ldr	r3, [pc, #128]	; (80006c8 <MX_FDCAN1_Init+0x168>)
 8000646:	2200      	movs	r2, #0
 8000648:	619a      	str	r2, [r3, #24]
      //HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig);
      if(HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK)
 800064a:	491f      	ldr	r1, [pc, #124]	; (80006c8 <MX_FDCAN1_Init+0x168>)
 800064c:	481c      	ldr	r0, [pc, #112]	; (80006c0 <MX_FDCAN1_Init+0x160>)
 800064e:	f002 fd09 	bl	8003064 <HAL_FDCAN_ConfigFilter>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <MX_FDCAN1_Init+0xfc>
             {
                Error_Handler();
 8000658:	f000 fd60 	bl	800111c <Error_Handler>
             }
      if(HAL_FDCAN_Start(&hfdcan1) != HAL_OK)
 800065c:	4818      	ldr	r0, [pc, #96]	; (80006c0 <MX_FDCAN1_Init+0x160>)
 800065e:	f002 fd77 	bl	8003150 <HAL_FDCAN_Start>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <MX_FDCAN1_Init+0x10c>
            {
              Error_Handler();
 8000668:	f000 fd58 	bl	800111c <Error_Handler>
            }

          if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 800066c:	2200      	movs	r2, #0
 800066e:	2101      	movs	r1, #1
 8000670:	4813      	ldr	r0, [pc, #76]	; (80006c0 <MX_FDCAN1_Init+0x160>)
 8000672:	f002 ff61 	bl	8003538 <HAL_FDCAN_ActivateNotification>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <MX_FDCAN1_Init+0x120>
            {
              /* Notification Error */
              Error_Handler();
 800067c:	f000 fd4e 	bl	800111c <Error_Handler>
            }

          TxHeader.Identifier = 0x33;
 8000680:	4b12      	ldr	r3, [pc, #72]	; (80006cc <MX_FDCAN1_Init+0x16c>)
 8000682:	2233      	movs	r2, #51	; 0x33
 8000684:	601a      	str	r2, [r3, #0]
          TxHeader.IdType = FDCAN_STANDARD_ID;
 8000686:	4b11      	ldr	r3, [pc, #68]	; (80006cc <MX_FDCAN1_Init+0x16c>)
 8000688:	2200      	movs	r2, #0
 800068a:	605a      	str	r2, [r3, #4]
          TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 800068c:	4b0f      	ldr	r3, [pc, #60]	; (80006cc <MX_FDCAN1_Init+0x16c>)
 800068e:	2200      	movs	r2, #0
 8000690:	609a      	str	r2, [r3, #8]
          TxHeader.DataLength = FDCAN_DLC_BYTES_16;
 8000692:	4b0e      	ldr	r3, [pc, #56]	; (80006cc <MX_FDCAN1_Init+0x16c>)
 8000694:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
 8000698:	60da      	str	r2, [r3, #12]
          TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 800069a:	4b0c      	ldr	r3, [pc, #48]	; (80006cc <MX_FDCAN1_Init+0x16c>)
 800069c:	2200      	movs	r2, #0
 800069e:	611a      	str	r2, [r3, #16]
          TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 80006a0:	4b0a      	ldr	r3, [pc, #40]	; (80006cc <MX_FDCAN1_Init+0x16c>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	615a      	str	r2, [r3, #20]
          TxHeader.FDFormat = FDCAN_FD_CAN;
 80006a6:	4b09      	ldr	r3, [pc, #36]	; (80006cc <MX_FDCAN1_Init+0x16c>)
 80006a8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80006ac:	619a      	str	r2, [r3, #24]
          TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 80006ae:	4b07      	ldr	r3, [pc, #28]	; (80006cc <MX_FDCAN1_Init+0x16c>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	61da      	str	r2, [r3, #28]
          TxHeader.MessageMarker = 0x0;
 80006b4:	4b05      	ldr	r3, [pc, #20]	; (80006cc <MX_FDCAN1_Init+0x16c>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	621a      	str	r2, [r3, #32]

  /* USER CODE END FDCAN1_Init 2 */

}
 80006ba:	bf00      	nop
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	240005dc 	.word	0x240005dc
 80006c4:	4000a000 	.word	0x4000a000
 80006c8:	240005bc 	.word	0x240005bc
 80006cc:	2400067c 	.word	0x2400067c

080006d0 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b0b8      	sub	sp, #224	; 0xe0
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80006dc:	2200      	movs	r2, #0
 80006de:	601a      	str	r2, [r3, #0]
 80006e0:	605a      	str	r2, [r3, #4]
 80006e2:	609a      	str	r2, [r3, #8]
 80006e4:	60da      	str	r2, [r3, #12]
 80006e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80006e8:	f107 0314 	add.w	r3, r7, #20
 80006ec:	22b8      	movs	r2, #184	; 0xb8
 80006ee:	2100      	movs	r1, #0
 80006f0:	4618      	mov	r0, r3
 80006f2:	f008 fa65 	bl	8008bc0 <memset>
  if(fdcanHandle->Instance==FDCAN1)
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	4a29      	ldr	r2, [pc, #164]	; (80007a0 <HAL_FDCAN_MspInit+0xd0>)
 80006fc:	4293      	cmp	r3, r2
 80006fe:	d14b      	bne.n	8000798 <HAL_FDCAN_MspInit+0xc8>
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000700:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000704:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8000706:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800070a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800070e:	f107 0314 	add.w	r3, r7, #20
 8000712:	4618      	mov	r0, r3
 8000714:	f004 fe78 	bl	8005408 <HAL_RCCEx_PeriphCLKConfig>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <HAL_FDCAN_MspInit+0x52>
    {
      Error_Handler();
 800071e:	f000 fcfd 	bl	800111c <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000722:	4b20      	ldr	r3, [pc, #128]	; (80007a4 <HAL_FDCAN_MspInit+0xd4>)
 8000724:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8000728:	4a1e      	ldr	r2, [pc, #120]	; (80007a4 <HAL_FDCAN_MspInit+0xd4>)
 800072a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800072e:	f8c2 314c 	str.w	r3, [r2, #332]	; 0x14c
 8000732:	4b1c      	ldr	r3, [pc, #112]	; (80007a4 <HAL_FDCAN_MspInit+0xd4>)
 8000734:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8000738:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800073c:	613b      	str	r3, [r7, #16]
 800073e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000740:	4b18      	ldr	r3, [pc, #96]	; (80007a4 <HAL_FDCAN_MspInit+0xd4>)
 8000742:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000746:	4a17      	ldr	r2, [pc, #92]	; (80007a4 <HAL_FDCAN_MspInit+0xd4>)
 8000748:	f043 0308 	orr.w	r3, r3, #8
 800074c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000750:	4b14      	ldr	r3, [pc, #80]	; (80007a4 <HAL_FDCAN_MspInit+0xd4>)
 8000752:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000756:	f003 0308 	and.w	r3, r3, #8
 800075a:	60fb      	str	r3, [r7, #12]
 800075c:	68fb      	ldr	r3, [r7, #12]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800075e:	2303      	movs	r3, #3
 8000760:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000764:	2302      	movs	r3, #2
 8000766:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076a:	2300      	movs	r3, #0
 800076c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000770:	2300      	movs	r3, #0
 8000772:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000776:	2309      	movs	r3, #9
 8000778:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800077c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000780:	4619      	mov	r1, r3
 8000782:	4809      	ldr	r0, [pc, #36]	; (80007a8 <HAL_FDCAN_MspInit+0xd8>)
 8000784:	f003 fc60 	bl	8004048 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 5, 0);
 8000788:	2200      	movs	r2, #0
 800078a:	2105      	movs	r1, #5
 800078c:	2013      	movs	r0, #19
 800078e:	f002 fa5f 	bl	8002c50 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8000792:	2013      	movs	r0, #19
 8000794:	f002 fa76 	bl	8002c84 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 8000798:	bf00      	nop
 800079a:	37e0      	adds	r7, #224	; 0xe0
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	4000a000 	.word	0x4000a000
 80007a4:	58024400 	.word	0x58024400
 80007a8:	58020c00 	.word	0x58020c00

080007ac <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b08c      	sub	sp, #48	; 0x30
 80007b0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b2:	f107 031c 	add.w	r3, r7, #28
 80007b6:	2200      	movs	r2, #0
 80007b8:	601a      	str	r2, [r3, #0]
 80007ba:	605a      	str	r2, [r3, #4]
 80007bc:	609a      	str	r2, [r3, #8]
 80007be:	60da      	str	r2, [r3, #12]
 80007c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007c2:	4b57      	ldr	r3, [pc, #348]	; (8000920 <MX_GPIO_Init+0x174>)
 80007c4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80007c8:	4a55      	ldr	r2, [pc, #340]	; (8000920 <MX_GPIO_Init+0x174>)
 80007ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007ce:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80007d2:	4b53      	ldr	r3, [pc, #332]	; (8000920 <MX_GPIO_Init+0x174>)
 80007d4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80007d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007dc:	61bb      	str	r3, [r7, #24]
 80007de:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007e0:	4b4f      	ldr	r3, [pc, #316]	; (8000920 <MX_GPIO_Init+0x174>)
 80007e2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80007e6:	4a4e      	ldr	r2, [pc, #312]	; (8000920 <MX_GPIO_Init+0x174>)
 80007e8:	f043 0301 	orr.w	r3, r3, #1
 80007ec:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80007f0:	4b4b      	ldr	r3, [pc, #300]	; (8000920 <MX_GPIO_Init+0x174>)
 80007f2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80007f6:	f003 0301 	and.w	r3, r3, #1
 80007fa:	617b      	str	r3, [r7, #20]
 80007fc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007fe:	4b48      	ldr	r3, [pc, #288]	; (8000920 <MX_GPIO_Init+0x174>)
 8000800:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000804:	4a46      	ldr	r2, [pc, #280]	; (8000920 <MX_GPIO_Init+0x174>)
 8000806:	f043 0302 	orr.w	r3, r3, #2
 800080a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800080e:	4b44      	ldr	r3, [pc, #272]	; (8000920 <MX_GPIO_Init+0x174>)
 8000810:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000814:	f003 0302 	and.w	r3, r3, #2
 8000818:	613b      	str	r3, [r7, #16]
 800081a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800081c:	4b40      	ldr	r3, [pc, #256]	; (8000920 <MX_GPIO_Init+0x174>)
 800081e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000822:	4a3f      	ldr	r2, [pc, #252]	; (8000920 <MX_GPIO_Init+0x174>)
 8000824:	f043 0320 	orr.w	r3, r3, #32
 8000828:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800082c:	4b3c      	ldr	r3, [pc, #240]	; (8000920 <MX_GPIO_Init+0x174>)
 800082e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000832:	f003 0320 	and.w	r3, r3, #32
 8000836:	60fb      	str	r3, [r7, #12]
 8000838:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800083a:	4b39      	ldr	r3, [pc, #228]	; (8000920 <MX_GPIO_Init+0x174>)
 800083c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000840:	4a37      	ldr	r2, [pc, #220]	; (8000920 <MX_GPIO_Init+0x174>)
 8000842:	f043 0308 	orr.w	r3, r3, #8
 8000846:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800084a:	4b35      	ldr	r3, [pc, #212]	; (8000920 <MX_GPIO_Init+0x174>)
 800084c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000850:	f003 0308 	and.w	r3, r3, #8
 8000854:	60bb      	str	r3, [r7, #8]
 8000856:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000858:	4b31      	ldr	r3, [pc, #196]	; (8000920 <MX_GPIO_Init+0x174>)
 800085a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800085e:	4a30      	ldr	r2, [pc, #192]	; (8000920 <MX_GPIO_Init+0x174>)
 8000860:	f043 0310 	orr.w	r3, r3, #16
 8000864:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000868:	4b2d      	ldr	r3, [pc, #180]	; (8000920 <MX_GPIO_Init+0x174>)
 800086a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800086e:	f003 0310 	and.w	r3, r3, #16
 8000872:	607b      	str	r3, [r7, #4]
 8000874:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3|GPIO_PIN_5, GPIO_PIN_RESET);
 8000876:	2200      	movs	r2, #0
 8000878:	2128      	movs	r1, #40	; 0x28
 800087a:	482a      	ldr	r0, [pc, #168]	; (8000924 <MX_GPIO_Init+0x178>)
 800087c:	f003 fd94 	bl	80043a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_14, GPIO_PIN_RESET);
 8000880:	2200      	movs	r2, #0
 8000882:	f244 0101 	movw	r1, #16385	; 0x4001
 8000886:	4828      	ldr	r0, [pc, #160]	; (8000928 <MX_GPIO_Init+0x17c>)
 8000888:	f003 fd8e 	bl	80043a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 800088c:	2200      	movs	r2, #0
 800088e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000892:	4826      	ldr	r0, [pc, #152]	; (800092c <MX_GPIO_Init+0x180>)
 8000894:	f003 fd88 	bl	80043a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8000898:	2200      	movs	r2, #0
 800089a:	2103      	movs	r1, #3
 800089c:	4824      	ldr	r0, [pc, #144]	; (8000930 <MX_GPIO_Init+0x184>)
 800089e:	f003 fd83 	bl	80043a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA3 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 80008a2:	2328      	movs	r3, #40	; 0x28
 80008a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a6:	2301      	movs	r3, #1
 80008a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008aa:	2300      	movs	r3, #0
 80008ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ae:	2300      	movs	r3, #0
 80008b0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008b2:	f107 031c 	add.w	r3, r7, #28
 80008b6:	4619      	mov	r1, r3
 80008b8:	481a      	ldr	r0, [pc, #104]	; (8000924 <MX_GPIO_Init+0x178>)
 80008ba:	f003 fbc5 	bl	8004048 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_14;
 80008be:	f244 0301 	movw	r3, #16385	; 0x4001
 80008c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c4:	2301      	movs	r3, #1
 80008c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c8:	2300      	movs	r3, #0
 80008ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008cc:	2300      	movs	r3, #0
 80008ce:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008d0:	f107 031c 	add.w	r3, r7, #28
 80008d4:	4619      	mov	r1, r3
 80008d6:	4814      	ldr	r0, [pc, #80]	; (8000928 <MX_GPIO_Init+0x17c>)
 80008d8:	f003 fbb6 	bl	8004048 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80008dc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80008e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e2:	2301      	movs	r3, #1
 80008e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e6:	2300      	movs	r3, #0
 80008e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ea:	2300      	movs	r3, #0
 80008ec:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008ee:	f107 031c 	add.w	r3, r7, #28
 80008f2:	4619      	mov	r1, r3
 80008f4:	480d      	ldr	r0, [pc, #52]	; (800092c <MX_GPIO_Init+0x180>)
 80008f6:	f003 fba7 	bl	8004048 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80008fa:	2303      	movs	r3, #3
 80008fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008fe:	2301      	movs	r3, #1
 8000900:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000902:	2300      	movs	r3, #0
 8000904:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000906:	2300      	movs	r3, #0
 8000908:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800090a:	f107 031c 	add.w	r3, r7, #28
 800090e:	4619      	mov	r1, r3
 8000910:	4807      	ldr	r0, [pc, #28]	; (8000930 <MX_GPIO_Init+0x184>)
 8000912:	f003 fb99 	bl	8004048 <HAL_GPIO_Init>

}
 8000916:	bf00      	nop
 8000918:	3730      	adds	r7, #48	; 0x30
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	58024400 	.word	0x58024400
 8000924:	58020000 	.word	0x58020000
 8000928:	58020400 	.word	0x58020400
 800092c:	58020c00 	.word	0x58020c00
 8000930:	58021000 	.word	0x58021000

08000934 <delay>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
void MX_FREERTOS_Init(void);
/* USER CODE BEGIN PFP */
void delay (uint16_t time)
{
 8000934:	b480      	push	{r7}
 8000936:	b083      	sub	sp, #12
 8000938:	af00      	add	r7, sp, #0
 800093a:	4603      	mov	r3, r0
 800093c:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim3, 0);
 800093e:	4b09      	ldr	r3, [pc, #36]	; (8000964 <delay+0x30>)
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	2200      	movs	r2, #0
 8000944:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER (&htim3) < time);
 8000946:	bf00      	nop
 8000948:	4b06      	ldr	r3, [pc, #24]	; (8000964 <delay+0x30>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800094e:	88fb      	ldrh	r3, [r7, #6]
 8000950:	429a      	cmp	r2, r3
 8000952:	d3f9      	bcc.n	8000948 <delay+0x14>
}
 8000954:	bf00      	nop
 8000956:	bf00      	nop
 8000958:	370c      	adds	r7, #12
 800095a:	46bd      	mov	sp, r7
 800095c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000960:	4770      	bx	lr
 8000962:	bf00      	nop
 8000964:	2400075c 	.word	0x2400075c

08000968 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b082      	sub	sp, #8
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)  // if the interrupt source is channel1
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	7f1b      	ldrb	r3, [r3, #28]
 8000974:	2b01      	cmp	r3, #1
 8000976:	d17a      	bne.n	8000a6e <HAL_TIM_IC_CaptureCallback+0x106>
	{
		if (Is_First_Captured_1==0) // if the first value is not captured
 8000978:	4b95      	ldr	r3, [pc, #596]	; (8000bd0 <HAL_TIM_IC_CaptureCallback+0x268>)
 800097a:	781b      	ldrb	r3, [r3, #0]
 800097c:	2b00      	cmp	r3, #0
 800097e:	d11a      	bne.n	80009b6 <HAL_TIM_IC_CaptureCallback+0x4e>
		{
			IC_Val1_1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 8000980:	2100      	movs	r1, #0
 8000982:	6878      	ldr	r0, [r7, #4]
 8000984:	f007 fb20 	bl	8007fc8 <HAL_TIM_ReadCapturedValue>
 8000988:	4603      	mov	r3, r0
 800098a:	4a92      	ldr	r2, [pc, #584]	; (8000bd4 <HAL_TIM_IC_CaptureCallback+0x26c>)
 800098c:	6013      	str	r3, [r2, #0]
			Is_First_Captured_1 = 1;  // set the first captured as true
 800098e:	4b90      	ldr	r3, [pc, #576]	; (8000bd0 <HAL_TIM_IC_CaptureCallback+0x268>)
 8000990:	2201      	movs	r2, #1
 8000992:	701a      	strb	r2, [r3, #0]
			// Now change the polarity to falling edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	6a1a      	ldr	r2, [r3, #32]
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	f022 020a 	bic.w	r2, r2, #10
 80009a2:	621a      	str	r2, [r3, #32]
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	6a1a      	ldr	r2, [r3, #32]
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	f042 0202 	orr.w	r2, r2, #2
 80009b2:	621a      	str	r2, [r3, #32]
 80009b4:	e05b      	b.n	8000a6e <HAL_TIM_IC_CaptureCallback+0x106>
		}

		else if (Is_First_Captured_1==1)   // if the first is already captured
 80009b6:	4b86      	ldr	r3, [pc, #536]	; (8000bd0 <HAL_TIM_IC_CaptureCallback+0x268>)
 80009b8:	781b      	ldrb	r3, [r3, #0]
 80009ba:	2b01      	cmp	r3, #1
 80009bc:	d157      	bne.n	8000a6e <HAL_TIM_IC_CaptureCallback+0x106>
		{
			IC_Val2_1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // read second value
 80009be:	2100      	movs	r1, #0
 80009c0:	6878      	ldr	r0, [r7, #4]
 80009c2:	f007 fb01 	bl	8007fc8 <HAL_TIM_ReadCapturedValue>
 80009c6:	4603      	mov	r3, r0
 80009c8:	4a83      	ldr	r2, [pc, #524]	; (8000bd8 <HAL_TIM_IC_CaptureCallback+0x270>)
 80009ca:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	2200      	movs	r2, #0
 80009d2:	625a      	str	r2, [r3, #36]	; 0x24

			if (IC_Val2_1 > IC_Val1_1)
 80009d4:	4b80      	ldr	r3, [pc, #512]	; (8000bd8 <HAL_TIM_IC_CaptureCallback+0x270>)
 80009d6:	681a      	ldr	r2, [r3, #0]
 80009d8:	4b7e      	ldr	r3, [pc, #504]	; (8000bd4 <HAL_TIM_IC_CaptureCallback+0x26c>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	429a      	cmp	r2, r3
 80009de:	d907      	bls.n	80009f0 <HAL_TIM_IC_CaptureCallback+0x88>
			{
				Difference_1 = IC_Val2_1-IC_Val1_1;
 80009e0:	4b7d      	ldr	r3, [pc, #500]	; (8000bd8 <HAL_TIM_IC_CaptureCallback+0x270>)
 80009e2:	681a      	ldr	r2, [r3, #0]
 80009e4:	4b7b      	ldr	r3, [pc, #492]	; (8000bd4 <HAL_TIM_IC_CaptureCallback+0x26c>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	1ad3      	subs	r3, r2, r3
 80009ea:	4a7c      	ldr	r2, [pc, #496]	; (8000bdc <HAL_TIM_IC_CaptureCallback+0x274>)
 80009ec:	6013      	str	r3, [r2, #0]
 80009ee:	e00f      	b.n	8000a10 <HAL_TIM_IC_CaptureCallback+0xa8>
			}

			else if (IC_Val1_1 > IC_Val2_1)
 80009f0:	4b78      	ldr	r3, [pc, #480]	; (8000bd4 <HAL_TIM_IC_CaptureCallback+0x26c>)
 80009f2:	681a      	ldr	r2, [r3, #0]
 80009f4:	4b78      	ldr	r3, [pc, #480]	; (8000bd8 <HAL_TIM_IC_CaptureCallback+0x270>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	429a      	cmp	r2, r3
 80009fa:	d909      	bls.n	8000a10 <HAL_TIM_IC_CaptureCallback+0xa8>
			{
				Difference_1 = (0xffff - IC_Val1_1) + IC_Val2_1;
 80009fc:	4b76      	ldr	r3, [pc, #472]	; (8000bd8 <HAL_TIM_IC_CaptureCallback+0x270>)
 80009fe:	681a      	ldr	r2, [r3, #0]
 8000a00:	4b74      	ldr	r3, [pc, #464]	; (8000bd4 <HAL_TIM_IC_CaptureCallback+0x26c>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	1ad2      	subs	r2, r2, r3
 8000a06:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000a0a:	4413      	add	r3, r2
 8000a0c:	4a73      	ldr	r2, [pc, #460]	; (8000bdc <HAL_TIM_IC_CaptureCallback+0x274>)
 8000a0e:	6013      	str	r3, [r2, #0]
			}

			Distance_1 = Difference_1 * .034/2;
 8000a10:	4b72      	ldr	r3, [pc, #456]	; (8000bdc <HAL_TIM_IC_CaptureCallback+0x274>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	ee07 3a90 	vmov	s15, r3
 8000a18:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000a1c:	ed9f 6b68 	vldr	d6, [pc, #416]	; 8000bc0 <HAL_TIM_IC_CaptureCallback+0x258>
 8000a20:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000a24:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8000a28:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000a2c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000a30:	edc7 7a00 	vstr	s15, [r7]
 8000a34:	683b      	ldr	r3, [r7, #0]
 8000a36:	b2da      	uxtb	r2, r3
 8000a38:	4b69      	ldr	r3, [pc, #420]	; (8000be0 <HAL_TIM_IC_CaptureCallback+0x278>)
 8000a3a:	701a      	strb	r2, [r3, #0]
			Is_First_Captured_1 = 0; // set it back to false
 8000a3c:	4b64      	ldr	r3, [pc, #400]	; (8000bd0 <HAL_TIM_IC_CaptureCallback+0x268>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	701a      	strb	r2, [r3, #0]

			// set polarity to rising edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	6a1a      	ldr	r2, [r3, #32]
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	f022 020a 	bic.w	r2, r2, #10
 8000a50:	621a      	str	r2, [r3, #32]
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	681a      	ldr	r2, [r3, #0]
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	6a12      	ldr	r2, [r2, #32]
 8000a5c:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim3, TIM_IT_CC1);
 8000a5e:	4b61      	ldr	r3, [pc, #388]	; (8000be4 <HAL_TIM_IC_CaptureCallback+0x27c>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	68da      	ldr	r2, [r3, #12]
 8000a64:	4b5f      	ldr	r3, [pc, #380]	; (8000be4 <HAL_TIM_IC_CaptureCallback+0x27c>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	f022 0202 	bic.w	r2, r2, #2
 8000a6c:	60da      	str	r2, [r3, #12]
		}
	}
//}

	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)  // if the interrupt source is channel1
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	7f1b      	ldrb	r3, [r3, #28]
 8000a72:	2b02      	cmp	r3, #2
 8000a74:	d17e      	bne.n	8000b74 <HAL_TIM_IC_CaptureCallback+0x20c>
	{
		if (Is_First_Captured_2==0) // if the first value is not captured
 8000a76:	4b5c      	ldr	r3, [pc, #368]	; (8000be8 <HAL_TIM_IC_CaptureCallback+0x280>)
 8000a78:	781b      	ldrb	r3, [r3, #0]
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d11a      	bne.n	8000ab4 <HAL_TIM_IC_CaptureCallback+0x14c>
		{
			IC_Val1_1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2); // read the first value
 8000a7e:	2104      	movs	r1, #4
 8000a80:	6878      	ldr	r0, [r7, #4]
 8000a82:	f007 faa1 	bl	8007fc8 <HAL_TIM_ReadCapturedValue>
 8000a86:	4603      	mov	r3, r0
 8000a88:	4a52      	ldr	r2, [pc, #328]	; (8000bd4 <HAL_TIM_IC_CaptureCallback+0x26c>)
 8000a8a:	6013      	str	r3, [r2, #0]
			Is_First_Captured_2 = 1;  // set the first captured as true
 8000a8c:	4b56      	ldr	r3, [pc, #344]	; (8000be8 <HAL_TIM_IC_CaptureCallback+0x280>)
 8000a8e:	2201      	movs	r2, #1
 8000a90:	701a      	strb	r2, [r3, #0]
			// Now change the polarity to falling edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_FALLING);
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	6a1a      	ldr	r2, [r3, #32]
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8000aa0:	621a      	str	r2, [r3, #32]
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	6a1a      	ldr	r2, [r3, #32]
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	f042 0220 	orr.w	r2, r2, #32
 8000ab0:	621a      	str	r2, [r3, #32]
 8000ab2:	e05f      	b.n	8000b74 <HAL_TIM_IC_CaptureCallback+0x20c>
		}

		else if (Is_First_Captured_2==1)   // if the first is already captured
 8000ab4:	4b4c      	ldr	r3, [pc, #304]	; (8000be8 <HAL_TIM_IC_CaptureCallback+0x280>)
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	2b01      	cmp	r3, #1
 8000aba:	d15b      	bne.n	8000b74 <HAL_TIM_IC_CaptureCallback+0x20c>
		{
			IC_Val2_2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);  // read second value
 8000abc:	2104      	movs	r1, #4
 8000abe:	6878      	ldr	r0, [r7, #4]
 8000ac0:	f007 fa82 	bl	8007fc8 <HAL_TIM_ReadCapturedValue>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	4a49      	ldr	r2, [pc, #292]	; (8000bec <HAL_TIM_IC_CaptureCallback+0x284>)
 8000ac8:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	2200      	movs	r2, #0
 8000ad0:	625a      	str	r2, [r3, #36]	; 0x24

			if (IC_Val2_2 > IC_Val1_2)
 8000ad2:	4b46      	ldr	r3, [pc, #280]	; (8000bec <HAL_TIM_IC_CaptureCallback+0x284>)
 8000ad4:	681a      	ldr	r2, [r3, #0]
 8000ad6:	4b46      	ldr	r3, [pc, #280]	; (8000bf0 <HAL_TIM_IC_CaptureCallback+0x288>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	429a      	cmp	r2, r3
 8000adc:	d907      	bls.n	8000aee <HAL_TIM_IC_CaptureCallback+0x186>
			{
				Difference_2 = IC_Val2_2-IC_Val1_2;
 8000ade:	4b43      	ldr	r3, [pc, #268]	; (8000bec <HAL_TIM_IC_CaptureCallback+0x284>)
 8000ae0:	681a      	ldr	r2, [r3, #0]
 8000ae2:	4b43      	ldr	r3, [pc, #268]	; (8000bf0 <HAL_TIM_IC_CaptureCallback+0x288>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	1ad3      	subs	r3, r2, r3
 8000ae8:	4a42      	ldr	r2, [pc, #264]	; (8000bf4 <HAL_TIM_IC_CaptureCallback+0x28c>)
 8000aea:	6013      	str	r3, [r2, #0]
 8000aec:	e00f      	b.n	8000b0e <HAL_TIM_IC_CaptureCallback+0x1a6>
			}

			else if (IC_Val1_2 > IC_Val2_2)
 8000aee:	4b40      	ldr	r3, [pc, #256]	; (8000bf0 <HAL_TIM_IC_CaptureCallback+0x288>)
 8000af0:	681a      	ldr	r2, [r3, #0]
 8000af2:	4b3e      	ldr	r3, [pc, #248]	; (8000bec <HAL_TIM_IC_CaptureCallback+0x284>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	429a      	cmp	r2, r3
 8000af8:	d909      	bls.n	8000b0e <HAL_TIM_IC_CaptureCallback+0x1a6>
			{
				Difference_2 = (0xffff - IC_Val1_2) + IC_Val2_2;
 8000afa:	4b3c      	ldr	r3, [pc, #240]	; (8000bec <HAL_TIM_IC_CaptureCallback+0x284>)
 8000afc:	681a      	ldr	r2, [r3, #0]
 8000afe:	4b3c      	ldr	r3, [pc, #240]	; (8000bf0 <HAL_TIM_IC_CaptureCallback+0x288>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	1ad2      	subs	r2, r2, r3
 8000b04:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000b08:	4413      	add	r3, r2
 8000b0a:	4a3a      	ldr	r2, [pc, #232]	; (8000bf4 <HAL_TIM_IC_CaptureCallback+0x28c>)
 8000b0c:	6013      	str	r3, [r2, #0]
			}

			Distance_2 = Difference_2 * .034/2 - 40;
 8000b0e:	4b39      	ldr	r3, [pc, #228]	; (8000bf4 <HAL_TIM_IC_CaptureCallback+0x28c>)
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	ee07 3a90 	vmov	s15, r3
 8000b16:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000b1a:	ed9f 6b29 	vldr	d6, [pc, #164]	; 8000bc0 <HAL_TIM_IC_CaptureCallback+0x258>
 8000b1e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000b22:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8000b26:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000b2a:	ed9f 6b27 	vldr	d6, [pc, #156]	; 8000bc8 <HAL_TIM_IC_CaptureCallback+0x260>
 8000b2e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000b32:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000b36:	edc7 7a00 	vstr	s15, [r7]
 8000b3a:	683b      	ldr	r3, [r7, #0]
 8000b3c:	b2da      	uxtb	r2, r3
 8000b3e:	4b2e      	ldr	r3, [pc, #184]	; (8000bf8 <HAL_TIM_IC_CaptureCallback+0x290>)
 8000b40:	701a      	strb	r2, [r3, #0]
			Is_First_Captured_2 = 0; // set it back to false
 8000b42:	4b29      	ldr	r3, [pc, #164]	; (8000be8 <HAL_TIM_IC_CaptureCallback+0x280>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	701a      	strb	r2, [r3, #0]

			// set polarity to rising edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_RISING);
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	6a1a      	ldr	r2, [r3, #32]
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8000b56:	621a      	str	r2, [r3, #32]
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681a      	ldr	r2, [r3, #0]
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	6a12      	ldr	r2, [r2, #32]
 8000b62:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim3, TIM_IT_CC2);
 8000b64:	4b1f      	ldr	r3, [pc, #124]	; (8000be4 <HAL_TIM_IC_CaptureCallback+0x27c>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	68da      	ldr	r2, [r3, #12]
 8000b6a:	4b1e      	ldr	r3, [pc, #120]	; (8000be4 <HAL_TIM_IC_CaptureCallback+0x27c>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	f022 0204 	bic.w	r2, r2, #4
 8000b72:	60da      	str	r2, [r3, #12]
	}




	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4)  // if the interrupt source is channel1
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	7f1b      	ldrb	r3, [r3, #28]
 8000b78:	2b08      	cmp	r3, #8
 8000b7a:	f040 809f 	bne.w	8000cbc <HAL_TIM_IC_CaptureCallback+0x354>
			{
				if (Is_First_Captured_4==0) // if the first value is not captured
 8000b7e:	4b1f      	ldr	r3, [pc, #124]	; (8000bfc <HAL_TIM_IC_CaptureCallback+0x294>)
 8000b80:	781b      	ldrb	r3, [r3, #0]
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d13e      	bne.n	8000c04 <HAL_TIM_IC_CaptureCallback+0x29c>
				{
					IC_Val1_4 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_4); // read the first value
 8000b86:	210c      	movs	r1, #12
 8000b88:	6878      	ldr	r0, [r7, #4]
 8000b8a:	f007 fa1d 	bl	8007fc8 <HAL_TIM_ReadCapturedValue>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	4a1b      	ldr	r2, [pc, #108]	; (8000c00 <HAL_TIM_IC_CaptureCallback+0x298>)
 8000b92:	6013      	str	r3, [r2, #0]
					Is_First_Captured_4 = 1;  // set the first captured as true
 8000b94:	4b19      	ldr	r3, [pc, #100]	; (8000bfc <HAL_TIM_IC_CaptureCallback+0x294>)
 8000b96:	2201      	movs	r2, #1
 8000b98:	701a      	strb	r2, [r3, #0]
					// Now change the polarity to falling edge
					__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_4, TIM_INPUTCHANNELPOLARITY_FALLING);
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	6a1a      	ldr	r2, [r3, #32]
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	f422 4220 	bic.w	r2, r2, #40960	; 0xa000
 8000ba8:	621a      	str	r2, [r3, #32]
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	6a1a      	ldr	r2, [r3, #32]
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000bb8:	621a      	str	r2, [r3, #32]
					__HAL_TIM_DISABLE_IT(&htim3, TIM_IT_CC4);
				}
			}


}
 8000bba:	e07f      	b.n	8000cbc <HAL_TIM_IC_CaptureCallback+0x354>
 8000bbc:	f3af 8000 	nop.w
 8000bc0:	b020c49c 	.word	0xb020c49c
 8000bc4:	3fa16872 	.word	0x3fa16872
 8000bc8:	00000000 	.word	0x00000000
 8000bcc:	40440000 	.word	0x40440000
 8000bd0:	2400009c 	.word	0x2400009c
 8000bd4:	24000090 	.word	0x24000090
 8000bd8:	24000094 	.word	0x24000094
 8000bdc:	24000098 	.word	0x24000098
 8000be0:	2400009d 	.word	0x2400009d
 8000be4:	2400075c 	.word	0x2400075c
 8000be8:	240000ac 	.word	0x240000ac
 8000bec:	240000a4 	.word	0x240000a4
 8000bf0:	240000a0 	.word	0x240000a0
 8000bf4:	240000a8 	.word	0x240000a8
 8000bf8:	240000ad 	.word	0x240000ad
 8000bfc:	240000bc 	.word	0x240000bc
 8000c00:	240000b0 	.word	0x240000b0
				else if (Is_First_Captured_4==1)   // if the first is already captured
 8000c04:	4b32      	ldr	r3, [pc, #200]	; (8000cd0 <HAL_TIM_IC_CaptureCallback+0x368>)
 8000c06:	781b      	ldrb	r3, [r3, #0]
 8000c08:	2b01      	cmp	r3, #1
 8000c0a:	d157      	bne.n	8000cbc <HAL_TIM_IC_CaptureCallback+0x354>
					IC_Val2_4 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_4);  // read second value
 8000c0c:	210c      	movs	r1, #12
 8000c0e:	6878      	ldr	r0, [r7, #4]
 8000c10:	f007 f9da 	bl	8007fc8 <HAL_TIM_ReadCapturedValue>
 8000c14:	4603      	mov	r3, r0
 8000c16:	4a2f      	ldr	r2, [pc, #188]	; (8000cd4 <HAL_TIM_IC_CaptureCallback+0x36c>)
 8000c18:	6013      	str	r3, [r2, #0]
					__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	2200      	movs	r2, #0
 8000c20:	625a      	str	r2, [r3, #36]	; 0x24
					if (IC_Val2_4 > IC_Val1_4)
 8000c22:	4b2c      	ldr	r3, [pc, #176]	; (8000cd4 <HAL_TIM_IC_CaptureCallback+0x36c>)
 8000c24:	681a      	ldr	r2, [r3, #0]
 8000c26:	4b2c      	ldr	r3, [pc, #176]	; (8000cd8 <HAL_TIM_IC_CaptureCallback+0x370>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	429a      	cmp	r2, r3
 8000c2c:	d907      	bls.n	8000c3e <HAL_TIM_IC_CaptureCallback+0x2d6>
						Difference_4 = IC_Val2_4-IC_Val1_4;
 8000c2e:	4b29      	ldr	r3, [pc, #164]	; (8000cd4 <HAL_TIM_IC_CaptureCallback+0x36c>)
 8000c30:	681a      	ldr	r2, [r3, #0]
 8000c32:	4b29      	ldr	r3, [pc, #164]	; (8000cd8 <HAL_TIM_IC_CaptureCallback+0x370>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	1ad3      	subs	r3, r2, r3
 8000c38:	4a28      	ldr	r2, [pc, #160]	; (8000cdc <HAL_TIM_IC_CaptureCallback+0x374>)
 8000c3a:	6013      	str	r3, [r2, #0]
 8000c3c:	e00f      	b.n	8000c5e <HAL_TIM_IC_CaptureCallback+0x2f6>
					else if (IC_Val1_4 > IC_Val2_4)
 8000c3e:	4b26      	ldr	r3, [pc, #152]	; (8000cd8 <HAL_TIM_IC_CaptureCallback+0x370>)
 8000c40:	681a      	ldr	r2, [r3, #0]
 8000c42:	4b24      	ldr	r3, [pc, #144]	; (8000cd4 <HAL_TIM_IC_CaptureCallback+0x36c>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	429a      	cmp	r2, r3
 8000c48:	d909      	bls.n	8000c5e <HAL_TIM_IC_CaptureCallback+0x2f6>
						Difference_4 = (0xffff - IC_Val1_4) + IC_Val2_4;
 8000c4a:	4b22      	ldr	r3, [pc, #136]	; (8000cd4 <HAL_TIM_IC_CaptureCallback+0x36c>)
 8000c4c:	681a      	ldr	r2, [r3, #0]
 8000c4e:	4b22      	ldr	r3, [pc, #136]	; (8000cd8 <HAL_TIM_IC_CaptureCallback+0x370>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	1ad2      	subs	r2, r2, r3
 8000c54:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c58:	4413      	add	r3, r2
 8000c5a:	4a20      	ldr	r2, [pc, #128]	; (8000cdc <HAL_TIM_IC_CaptureCallback+0x374>)
 8000c5c:	6013      	str	r3, [r2, #0]
					Distance_4 = Difference_4 * .034/2;
 8000c5e:	4b1f      	ldr	r3, [pc, #124]	; (8000cdc <HAL_TIM_IC_CaptureCallback+0x374>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	ee07 3a90 	vmov	s15, r3
 8000c66:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000c6a:	ed9f 6b17 	vldr	d6, [pc, #92]	; 8000cc8 <HAL_TIM_IC_CaptureCallback+0x360>
 8000c6e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000c72:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8000c76:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000c7a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000c7e:	edc7 7a00 	vstr	s15, [r7]
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	b2da      	uxtb	r2, r3
 8000c86:	4b16      	ldr	r3, [pc, #88]	; (8000ce0 <HAL_TIM_IC_CaptureCallback+0x378>)
 8000c88:	701a      	strb	r2, [r3, #0]
					Is_First_Captured_4 = 0; // set it back to false
 8000c8a:	4b11      	ldr	r3, [pc, #68]	; (8000cd0 <HAL_TIM_IC_CaptureCallback+0x368>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	701a      	strb	r2, [r3, #0]
					__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_4, TIM_INPUTCHANNELPOLARITY_RISING);
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	6a1a      	ldr	r2, [r3, #32]
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	f422 4220 	bic.w	r2, r2, #40960	; 0xa000
 8000c9e:	621a      	str	r2, [r3, #32]
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681a      	ldr	r2, [r3, #0]
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	6a12      	ldr	r2, [r2, #32]
 8000caa:	621a      	str	r2, [r3, #32]
					__HAL_TIM_DISABLE_IT(&htim3, TIM_IT_CC4);
 8000cac:	4b0d      	ldr	r3, [pc, #52]	; (8000ce4 <HAL_TIM_IC_CaptureCallback+0x37c>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	68da      	ldr	r2, [r3, #12]
 8000cb2:	4b0c      	ldr	r3, [pc, #48]	; (8000ce4 <HAL_TIM_IC_CaptureCallback+0x37c>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	f022 0210 	bic.w	r2, r2, #16
 8000cba:	60da      	str	r2, [r3, #12]
}
 8000cbc:	bf00      	nop
 8000cbe:	3708      	adds	r7, #8
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	f3af 8000 	nop.w
 8000cc8:	b020c49c 	.word	0xb020c49c
 8000ccc:	3fa16872 	.word	0x3fa16872
 8000cd0:	240000bc 	.word	0x240000bc
 8000cd4:	240000b4 	.word	0x240000b4
 8000cd8:	240000b0 	.word	0x240000b0
 8000cdc:	240000b8 	.word	0x240000b8
 8000ce0:	240000bd 	.word	0x240000bd
 8000ce4:	2400075c 	.word	0x2400075c

08000ce8 <HCSR04_Read1>:


void HCSR04_Read1 (void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
   HAL_GPIO_WritePin(TRIG_PORT1, TRIG_PIN1, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8000cec:	2201      	movs	r2, #1
 8000cee:	2120      	movs	r1, #32
 8000cf0:	480a      	ldr	r0, [pc, #40]	; (8000d1c <HCSR04_Read1+0x34>)
 8000cf2:	f003 fb59 	bl	80043a8 <HAL_GPIO_WritePin>
   delay(10);  // wait for 10 us
 8000cf6:	200a      	movs	r0, #10
 8000cf8:	f7ff fe1c 	bl	8000934 <delay>
   HAL_GPIO_WritePin(TRIG_PORT1, TRIG_PIN1, GPIO_PIN_RESET);  // pull the TRIG pin low
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	2120      	movs	r1, #32
 8000d00:	4806      	ldr	r0, [pc, #24]	; (8000d1c <HCSR04_Read1+0x34>)
 8000d02:	f003 fb51 	bl	80043a8 <HAL_GPIO_WritePin>

   __HAL_TIM_ENABLE_IT(&htim3, TIM_IT_CC1);
 8000d06:	4b06      	ldr	r3, [pc, #24]	; (8000d20 <HCSR04_Read1+0x38>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	68da      	ldr	r2, [r3, #12]
 8000d0c:	4b04      	ldr	r3, [pc, #16]	; (8000d20 <HCSR04_Read1+0x38>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	f042 0202 	orr.w	r2, r2, #2
 8000d14:	60da      	str	r2, [r3, #12]

}
 8000d16:	bf00      	nop
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	58020000 	.word	0x58020000
 8000d20:	2400075c 	.word	0x2400075c

08000d24 <HCSR04_Read2>:

void HCSR04_Read2 (void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
   HAL_GPIO_WritePin(TRIG_PORT2, TRIG_PIN2, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8000d28:	2201      	movs	r2, #1
 8000d2a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d2e:	480b      	ldr	r0, [pc, #44]	; (8000d5c <HCSR04_Read2+0x38>)
 8000d30:	f003 fb3a 	bl	80043a8 <HAL_GPIO_WritePin>
     delay(10);  // wait for 10 us
 8000d34:	200a      	movs	r0, #10
 8000d36:	f7ff fdfd 	bl	8000934 <delay>
     HAL_GPIO_WritePin(TRIG_PORT2, TRIG_PIN2, GPIO_PIN_RESET);  // pull the TRIG pin low
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d40:	4806      	ldr	r0, [pc, #24]	; (8000d5c <HCSR04_Read2+0x38>)
 8000d42:	f003 fb31 	bl	80043a8 <HAL_GPIO_WritePin>

     __HAL_TIM_ENABLE_IT(&htim3, TIM_IT_CC2);
 8000d46:	4b06      	ldr	r3, [pc, #24]	; (8000d60 <HCSR04_Read2+0x3c>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	68da      	ldr	r2, [r3, #12]
 8000d4c:	4b04      	ldr	r3, [pc, #16]	; (8000d60 <HCSR04_Read2+0x3c>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	f042 0204 	orr.w	r2, r2, #4
 8000d54:	60da      	str	r2, [r3, #12]
}
 8000d56:	bf00      	nop
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	58020c00 	.word	0x58020c00
 8000d60:	2400075c 	.word	0x2400075c

08000d64 <HCSR04_Read4>:



void HCSR04_Read4 (void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0
   HAL_GPIO_WritePin(TRIG_PORT4, TRIG_PIN4, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8000d68:	2201      	movs	r2, #1
 8000d6a:	2108      	movs	r1, #8
 8000d6c:	480a      	ldr	r0, [pc, #40]	; (8000d98 <HCSR04_Read4+0x34>)
 8000d6e:	f003 fb1b 	bl	80043a8 <HAL_GPIO_WritePin>
     delay(10);  // wait for 10 us
 8000d72:	200a      	movs	r0, #10
 8000d74:	f7ff fdde 	bl	8000934 <delay>
     HAL_GPIO_WritePin(TRIG_PORT4, TRIG_PIN4, GPIO_PIN_RESET);  // pull the TRIG pin low
 8000d78:	2200      	movs	r2, #0
 8000d7a:	2108      	movs	r1, #8
 8000d7c:	4806      	ldr	r0, [pc, #24]	; (8000d98 <HCSR04_Read4+0x34>)
 8000d7e:	f003 fb13 	bl	80043a8 <HAL_GPIO_WritePin>

     __HAL_TIM_ENABLE_IT(&htim3, TIM_IT_CC4);
 8000d82:	4b06      	ldr	r3, [pc, #24]	; (8000d9c <HCSR04_Read4+0x38>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	68da      	ldr	r2, [r3, #12]
 8000d88:	4b04      	ldr	r3, [pc, #16]	; (8000d9c <HCSR04_Read4+0x38>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	f042 0210 	orr.w	r2, r2, #16
 8000d90:	60da      	str	r2, [r3, #12]
}
 8000d92:	bf00      	nop
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	58020000 	.word	0x58020000
 8000d9c:	2400075c 	.word	0x2400075c

08000da0 <HAL_FDCAN_RxFifo0Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
 8000da8:	6039      	str	r1, [r7, #0]
   if(FDCAN1 == hfdcan->Instance){
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	4a0b      	ldr	r2, [pc, #44]	; (8000ddc <HAL_FDCAN_RxFifo0Callback+0x3c>)
 8000db0:	4293      	cmp	r3, r2
 8000db2:	d10f      	bne.n	8000dd4 <HAL_FDCAN_RxFifo0Callback+0x34>
  if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET)
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	f003 0301 	and.w	r3, r3, #1
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d00a      	beq.n	8000dd4 <HAL_FDCAN_RxFifo0Callback+0x34>
  {


    /* Retreive Rx messages from RX FIFO0 */
    if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, RxData_From_Node2) != HAL_OK)
 8000dbe:	4b08      	ldr	r3, [pc, #32]	; (8000de0 <HAL_FDCAN_RxFifo0Callback+0x40>)
 8000dc0:	4a08      	ldr	r2, [pc, #32]	; (8000de4 <HAL_FDCAN_RxFifo0Callback+0x44>)
 8000dc2:	2140      	movs	r1, #64	; 0x40
 8000dc4:	6878      	ldr	r0, [r7, #4]
 8000dc6:	f002 fa49 	bl	800325c <HAL_FDCAN_GetRxMessage>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d001      	beq.n	8000dd4 <HAL_FDCAN_RxFifo0Callback+0x34>
    {
    /* Reception Error */
    Error_Handler();
 8000dd0:	f000 f9a4 	bl	800111c <Error_Handler>
    }
   }
   }
}
 8000dd4:	bf00      	nop
 8000dd6:	3708      	adds	r7, #8
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	4000a000 	.word	0x4000a000
 8000de0:	240006e0 	.word	0x240006e0
 8000de4:	240006a0 	.word	0x240006a0

08000de8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b096      	sub	sp, #88	; 0x58
 8000dec:	af0a      	add	r7, sp, #40	; 0x28

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

		HAL_Init();
 8000dee:	f000 fc2b 	bl	8001648 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000df2:	f000 f90b 	bl	800100c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000df6:	f7ff fcd9 	bl	80007ac <MX_GPIO_Init>
  MX_FDCAN1_Init();
 8000dfa:	f7ff fbb1 	bl	8000560 <MX_FDCAN1_Init>
  MX_TIM3_Init();
 8000dfe:	f000 faff 	bl	8001400 <MX_TIM3_Init>
  MX_ADC1_Init();
 8000e02:	f7ff fac5 	bl	8000390 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
//  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 8000e06:	2100      	movs	r1, #0
 8000e08:	4873      	ldr	r0, [pc, #460]	; (8000fd8 <main+0x1f0>)
 8000e0a:	f006 fcd9 	bl	80077c0 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
 8000e0e:	2104      	movs	r1, #4
 8000e10:	4871      	ldr	r0, [pc, #452]	; (8000fd8 <main+0x1f0>)
 8000e12:	f006 fcd5 	bl	80077c0 <HAL_TIM_IC_Start_IT>

  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_4);
 8000e16:	210c      	movs	r1, #12
 8000e18:	486f      	ldr	r0, [pc, #444]	; (8000fd8 <main+0x1f0>)
 8000e1a:	f006 fcd1 	bl	80077c0 <HAL_TIM_IC_Start_IT>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_ADC_Start(&hadc1);
 8000e1e:	486f      	ldr	r0, [pc, #444]	; (8000fdc <main+0x1f4>)
 8000e20:	f000 ffce 	bl	8001dc0 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 10);
 8000e24:	210a      	movs	r1, #10
 8000e26:	486d      	ldr	r0, [pc, #436]	; (8000fdc <main+0x1f4>)
 8000e28:	f001 f884 	bl	8001f34 <HAL_ADC_PollForConversion>
	  adc1 = HAL_ADC_GetValue(&hadc1)/650;
 8000e2c:	486b      	ldr	r0, [pc, #428]	; (8000fdc <main+0x1f4>)
 8000e2e:	f001 f959 	bl	80020e4 <HAL_ADC_GetValue>
 8000e32:	4603      	mov	r3, r0
 8000e34:	4a6a      	ldr	r2, [pc, #424]	; (8000fe0 <main+0x1f8>)
 8000e36:	fba2 2303 	umull	r2, r3, r2, r3
 8000e3a:	0a5b      	lsrs	r3, r3, #9
 8000e3c:	b29a      	uxth	r2, r3
 8000e3e:	4b69      	ldr	r3, [pc, #420]	; (8000fe4 <main+0x1fc>)
 8000e40:	801a      	strh	r2, [r3, #0]

	   HCSR04_Read1();
 8000e42:	f7ff ff51 	bl	8000ce8 <HCSR04_Read1>
	   HAL_Delay(100);
 8000e46:	2064      	movs	r0, #100	; 0x64
 8000e48:	f000 fc5a 	bl	8001700 <HAL_Delay>
	   HCSR04_Read2();
 8000e4c:	f7ff ff6a 	bl	8000d24 <HCSR04_Read2>
	   HAL_Delay(100);
 8000e50:	2064      	movs	r0, #100	; 0x64
 8000e52:	f000 fc55 	bl	8001700 <HAL_Delay>

	   HCSR04_Read4();
 8000e56:	f7ff ff85 	bl	8000d64 <HCSR04_Read4>
	   HAL_Delay(100);
 8000e5a:	2064      	movs	r0, #100	; 0x64
 8000e5c:	f000 fc50 	bl	8001700 <HAL_Delay>

	   D1_1= Distance_1 / 100;
 8000e60:	4b61      	ldr	r3, [pc, #388]	; (8000fe8 <main+0x200>)
 8000e62:	781b      	ldrb	r3, [r3, #0]
 8000e64:	4a61      	ldr	r2, [pc, #388]	; (8000fec <main+0x204>)
 8000e66:	fba2 2303 	umull	r2, r3, r2, r3
 8000e6a:	095b      	lsrs	r3, r3, #5
 8000e6c:	b2db      	uxtb	r3, r3
 8000e6e:	62fb      	str	r3, [r7, #44]	; 0x2c
	   D1_2= (Distance_1 %100) /10;
 8000e70:	4b5d      	ldr	r3, [pc, #372]	; (8000fe8 <main+0x200>)
 8000e72:	781b      	ldrb	r3, [r3, #0]
 8000e74:	4a5d      	ldr	r2, [pc, #372]	; (8000fec <main+0x204>)
 8000e76:	fba2 1203 	umull	r1, r2, r2, r3
 8000e7a:	0952      	lsrs	r2, r2, #5
 8000e7c:	2164      	movs	r1, #100	; 0x64
 8000e7e:	fb01 f202 	mul.w	r2, r1, r2
 8000e82:	1a9b      	subs	r3, r3, r2
 8000e84:	b2db      	uxtb	r3, r3
 8000e86:	4a5a      	ldr	r2, [pc, #360]	; (8000ff0 <main+0x208>)
 8000e88:	fba2 2303 	umull	r2, r3, r2, r3
 8000e8c:	08db      	lsrs	r3, r3, #3
 8000e8e:	b2db      	uxtb	r3, r3
 8000e90:	62bb      	str	r3, [r7, #40]	; 0x28
	   D1_3= Distance_1 % 10;
 8000e92:	4b55      	ldr	r3, [pc, #340]	; (8000fe8 <main+0x200>)
 8000e94:	781a      	ldrb	r2, [r3, #0]
 8000e96:	4b56      	ldr	r3, [pc, #344]	; (8000ff0 <main+0x208>)
 8000e98:	fba3 1302 	umull	r1, r3, r3, r2
 8000e9c:	08d9      	lsrs	r1, r3, #3
 8000e9e:	460b      	mov	r3, r1
 8000ea0:	009b      	lsls	r3, r3, #2
 8000ea2:	440b      	add	r3, r1
 8000ea4:	005b      	lsls	r3, r3, #1
 8000ea6:	1ad3      	subs	r3, r2, r3
 8000ea8:	b2db      	uxtb	r3, r3
 8000eaa:	627b      	str	r3, [r7, #36]	; 0x24
	   D2_1= Distance_2 / 100;
 8000eac:	4b51      	ldr	r3, [pc, #324]	; (8000ff4 <main+0x20c>)
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	4a4e      	ldr	r2, [pc, #312]	; (8000fec <main+0x204>)
 8000eb2:	fba2 2303 	umull	r2, r3, r2, r3
 8000eb6:	095b      	lsrs	r3, r3, #5
 8000eb8:	b2db      	uxtb	r3, r3
 8000eba:	623b      	str	r3, [r7, #32]
	   D2_2= (Distance_2 %100) /10;
 8000ebc:	4b4d      	ldr	r3, [pc, #308]	; (8000ff4 <main+0x20c>)
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	4a4a      	ldr	r2, [pc, #296]	; (8000fec <main+0x204>)
 8000ec2:	fba2 1203 	umull	r1, r2, r2, r3
 8000ec6:	0952      	lsrs	r2, r2, #5
 8000ec8:	2164      	movs	r1, #100	; 0x64
 8000eca:	fb01 f202 	mul.w	r2, r1, r2
 8000ece:	1a9b      	subs	r3, r3, r2
 8000ed0:	b2db      	uxtb	r3, r3
 8000ed2:	4a47      	ldr	r2, [pc, #284]	; (8000ff0 <main+0x208>)
 8000ed4:	fba2 2303 	umull	r2, r3, r2, r3
 8000ed8:	08db      	lsrs	r3, r3, #3
 8000eda:	b2db      	uxtb	r3, r3
 8000edc:	61fb      	str	r3, [r7, #28]
	   D2_3= Distance_2 % 10;
 8000ede:	4b45      	ldr	r3, [pc, #276]	; (8000ff4 <main+0x20c>)
 8000ee0:	781a      	ldrb	r2, [r3, #0]
 8000ee2:	4b43      	ldr	r3, [pc, #268]	; (8000ff0 <main+0x208>)
 8000ee4:	fba3 1302 	umull	r1, r3, r3, r2
 8000ee8:	08d9      	lsrs	r1, r3, #3
 8000eea:	460b      	mov	r3, r1
 8000eec:	009b      	lsls	r3, r3, #2
 8000eee:	440b      	add	r3, r1
 8000ef0:	005b      	lsls	r3, r3, #1
 8000ef2:	1ad3      	subs	r3, r2, r3
 8000ef4:	b2db      	uxtb	r3, r3
 8000ef6:	61bb      	str	r3, [r7, #24]
	   D3_1= Distance_4 / 100;
 8000ef8:	4b3f      	ldr	r3, [pc, #252]	; (8000ff8 <main+0x210>)
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	4a3b      	ldr	r2, [pc, #236]	; (8000fec <main+0x204>)
 8000efe:	fba2 2303 	umull	r2, r3, r2, r3
 8000f02:	095b      	lsrs	r3, r3, #5
 8000f04:	b2db      	uxtb	r3, r3
 8000f06:	617b      	str	r3, [r7, #20]
	   D3_2= (Distance_4 %100) /10;
 8000f08:	4b3b      	ldr	r3, [pc, #236]	; (8000ff8 <main+0x210>)
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	4a37      	ldr	r2, [pc, #220]	; (8000fec <main+0x204>)
 8000f0e:	fba2 1203 	umull	r1, r2, r2, r3
 8000f12:	0952      	lsrs	r2, r2, #5
 8000f14:	2164      	movs	r1, #100	; 0x64
 8000f16:	fb01 f202 	mul.w	r2, r1, r2
 8000f1a:	1a9b      	subs	r3, r3, r2
 8000f1c:	b2db      	uxtb	r3, r3
 8000f1e:	4a34      	ldr	r2, [pc, #208]	; (8000ff0 <main+0x208>)
 8000f20:	fba2 2303 	umull	r2, r3, r2, r3
 8000f24:	08db      	lsrs	r3, r3, #3
 8000f26:	b2db      	uxtb	r3, r3
 8000f28:	613b      	str	r3, [r7, #16]
	   D3_3= Distance_4 % 10;
 8000f2a:	4b33      	ldr	r3, [pc, #204]	; (8000ff8 <main+0x210>)
 8000f2c:	781a      	ldrb	r2, [r3, #0]
 8000f2e:	4b30      	ldr	r3, [pc, #192]	; (8000ff0 <main+0x208>)
 8000f30:	fba3 1302 	umull	r1, r3, r3, r2
 8000f34:	08d9      	lsrs	r1, r3, #3
 8000f36:	460b      	mov	r3, r1
 8000f38:	009b      	lsls	r3, r3, #2
 8000f3a:	440b      	add	r3, r1
 8000f3c:	005b      	lsls	r3, r3, #1
 8000f3e:	1ad3      	subs	r3, r2, r3
 8000f40:	b2db      	uxtb	r3, r3
 8000f42:	60fb      	str	r3, [r7, #12]
	   adc1_1= adc1 / 100;
 8000f44:	4b27      	ldr	r3, [pc, #156]	; (8000fe4 <main+0x1fc>)
 8000f46:	881b      	ldrh	r3, [r3, #0]
 8000f48:	4a28      	ldr	r2, [pc, #160]	; (8000fec <main+0x204>)
 8000f4a:	fba2 2303 	umull	r2, r3, r2, r3
 8000f4e:	095b      	lsrs	r3, r3, #5
 8000f50:	b29b      	uxth	r3, r3
 8000f52:	60bb      	str	r3, [r7, #8]
	   adc1_2= (adc1 %100) /10;
 8000f54:	4b23      	ldr	r3, [pc, #140]	; (8000fe4 <main+0x1fc>)
 8000f56:	881b      	ldrh	r3, [r3, #0]
 8000f58:	4a24      	ldr	r2, [pc, #144]	; (8000fec <main+0x204>)
 8000f5a:	fba2 1203 	umull	r1, r2, r2, r3
 8000f5e:	0952      	lsrs	r2, r2, #5
 8000f60:	2164      	movs	r1, #100	; 0x64
 8000f62:	fb01 f202 	mul.w	r2, r1, r2
 8000f66:	1a9b      	subs	r3, r3, r2
 8000f68:	b29b      	uxth	r3, r3
 8000f6a:	4a21      	ldr	r2, [pc, #132]	; (8000ff0 <main+0x208>)
 8000f6c:	fba2 2303 	umull	r2, r3, r2, r3
 8000f70:	08db      	lsrs	r3, r3, #3
 8000f72:	b29b      	uxth	r3, r3
 8000f74:	607b      	str	r3, [r7, #4]
	   adc1_3= adc1 % 10;
 8000f76:	4b1b      	ldr	r3, [pc, #108]	; (8000fe4 <main+0x1fc>)
 8000f78:	881a      	ldrh	r2, [r3, #0]
 8000f7a:	4b1d      	ldr	r3, [pc, #116]	; (8000ff0 <main+0x208>)
 8000f7c:	fba3 1302 	umull	r1, r3, r3, r2
 8000f80:	08d9      	lsrs	r1, r3, #3
 8000f82:	460b      	mov	r3, r1
 8000f84:	009b      	lsls	r3, r3, #2
 8000f86:	440b      	add	r3, r1
 8000f88:	005b      	lsls	r3, r3, #1
 8000f8a:	1ad3      	subs	r3, r2, r3
 8000f8c:	b29b      	uxth	r3, r3
 8000f8e:	603b      	str	r3, [r7, #0]
	  sprintf ((char *)TxData_Node3_To_Node2," %d%d%d%d%d%d %d%d%d %d%d%d",D1_1,D1_2,D1_3,D2_1,D2_2,D2_3,D3_1,D3_2,D3_3,adc1_1,adc1_2,adc1_3);
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	9309      	str	r3, [sp, #36]	; 0x24
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	9308      	str	r3, [sp, #32]
 8000f98:	68bb      	ldr	r3, [r7, #8]
 8000f9a:	9307      	str	r3, [sp, #28]
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	9306      	str	r3, [sp, #24]
 8000fa0:	693b      	ldr	r3, [r7, #16]
 8000fa2:	9305      	str	r3, [sp, #20]
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	9304      	str	r3, [sp, #16]
 8000fa8:	69bb      	ldr	r3, [r7, #24]
 8000faa:	9303      	str	r3, [sp, #12]
 8000fac:	69fb      	ldr	r3, [r7, #28]
 8000fae:	9302      	str	r3, [sp, #8]
 8000fb0:	6a3b      	ldr	r3, [r7, #32]
 8000fb2:	9301      	str	r3, [sp, #4]
 8000fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fb6:	9300      	str	r3, [sp, #0]
 8000fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000fbc:	490f      	ldr	r1, [pc, #60]	; (8000ffc <main+0x214>)
 8000fbe:	4810      	ldr	r0, [pc, #64]	; (8001000 <main+0x218>)
 8000fc0:	f007 fe70 	bl	8008ca4 <siprintf>
	  	if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData_Node3_To_Node2)!= HAL_OK)
 8000fc4:	4a0e      	ldr	r2, [pc, #56]	; (8001000 <main+0x218>)
 8000fc6:	490f      	ldr	r1, [pc, #60]	; (8001004 <main+0x21c>)
 8000fc8:	480f      	ldr	r0, [pc, #60]	; (8001008 <main+0x220>)
 8000fca:	f002 f8ec 	bl	80031a6 <HAL_FDCAN_AddMessageToTxFifoQ>
	  	{
//	  		  		 Error_Handler();
	  	}
	  	HAL_Delay(100);
 8000fce:	2064      	movs	r0, #100	; 0x64
 8000fd0:	f000 fb96 	bl	8001700 <HAL_Delay>
	  HAL_ADC_Start(&hadc1);
 8000fd4:	e723      	b.n	8000e1e <main+0x36>
 8000fd6:	bf00      	nop
 8000fd8:	2400075c 	.word	0x2400075c
 8000fdc:	24000558 	.word	0x24000558
 8000fe0:	c9a633fd 	.word	0xc9a633fd
 8000fe4:	240006fc 	.word	0x240006fc
 8000fe8:	2400009d 	.word	0x2400009d
 8000fec:	51eb851f 	.word	0x51eb851f
 8000ff0:	cccccccd 	.word	0xcccccccd
 8000ff4:	240000ad 	.word	0x240000ad
 8000ff8:	240000bd 	.word	0x240000bd
 8000ffc:	08009424 	.word	0x08009424
 8001000:	24000700 	.word	0x24000700
 8001004:	2400067c 	.word	0x2400067c
 8001008:	240005dc 	.word	0x240005dc

0800100c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b09c      	sub	sp, #112	; 0x70
 8001010:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001012:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001016:	224c      	movs	r2, #76	; 0x4c
 8001018:	2100      	movs	r1, #0
 800101a:	4618      	mov	r0, r3
 800101c:	f007 fdd0 	bl	8008bc0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001020:	1d3b      	adds	r3, r7, #4
 8001022:	2220      	movs	r2, #32
 8001024:	2100      	movs	r1, #0
 8001026:	4618      	mov	r0, r3
 8001028:	f007 fdca 	bl	8008bc0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800102c:	2004      	movs	r0, #4
 800102e:	f003 f9d5 	bl	80043dc <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001032:	2300      	movs	r3, #0
 8001034:	603b      	str	r3, [r7, #0]
 8001036:	4b2e      	ldr	r3, [pc, #184]	; (80010f0 <SystemClock_Config+0xe4>)
 8001038:	699b      	ldr	r3, [r3, #24]
 800103a:	4a2d      	ldr	r2, [pc, #180]	; (80010f0 <SystemClock_Config+0xe4>)
 800103c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001040:	6193      	str	r3, [r2, #24]
 8001042:	4b2b      	ldr	r3, [pc, #172]	; (80010f0 <SystemClock_Config+0xe4>)
 8001044:	699b      	ldr	r3, [r3, #24]
 8001046:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800104a:	603b      	str	r3, [r7, #0]
 800104c:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800104e:	bf00      	nop
 8001050:	4b27      	ldr	r3, [pc, #156]	; (80010f0 <SystemClock_Config+0xe4>)
 8001052:	699b      	ldr	r3, [r3, #24]
 8001054:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001058:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800105c:	d1f8      	bne.n	8001050 <SystemClock_Config+0x44>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 800105e:	4b25      	ldr	r3, [pc, #148]	; (80010f4 <SystemClock_Config+0xe8>)
 8001060:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001062:	4a24      	ldr	r2, [pc, #144]	; (80010f4 <SystemClock_Config+0xe8>)
 8001064:	f023 0303 	bic.w	r3, r3, #3
 8001068:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800106a:	2302      	movs	r3, #2
 800106c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800106e:	2301      	movs	r3, #1
 8001070:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001072:	2340      	movs	r3, #64	; 0x40
 8001074:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001076:	2302      	movs	r3, #2
 8001078:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800107a:	2300      	movs	r3, #0
 800107c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800107e:	2304      	movs	r3, #4
 8001080:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 8;
 8001082:	2308      	movs	r3, #8
 8001084:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001086:	2302      	movs	r3, #2
 8001088:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 32;
 800108a:	2320      	movs	r3, #32
 800108c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800108e:	2302      	movs	r3, #2
 8001090:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001092:	230c      	movs	r3, #12
 8001094:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001096:	2300      	movs	r3, #0
 8001098:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800109a:	2300      	movs	r3, #0
 800109c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800109e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010a2:	4618      	mov	r0, r3
 80010a4:	f003 f9f4 	bl	8004490 <HAL_RCC_OscConfig>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d001      	beq.n	80010b2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80010ae:	f000 f835 	bl	800111c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010b2:	233f      	movs	r3, #63	; 0x3f
 80010b4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80010b6:	2300      	movs	r3, #0
 80010b8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80010ba:	2300      	movs	r3, #0
 80010bc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80010be:	2300      	movs	r3, #0
 80010c0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80010c2:	2340      	movs	r3, #64	; 0x40
 80010c4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80010c6:	2340      	movs	r3, #64	; 0x40
 80010c8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80010ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010ce:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80010d0:	2340      	movs	r3, #64	; 0x40
 80010d2:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80010d4:	1d3b      	adds	r3, r7, #4
 80010d6:	2102      	movs	r1, #2
 80010d8:	4618      	mov	r0, r3
 80010da:	f003 fddd 	bl	8004c98 <HAL_RCC_ClockConfig>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d001      	beq.n	80010e8 <SystemClock_Config+0xdc>
  {
    Error_Handler();
 80010e4:	f000 f81a 	bl	800111c <Error_Handler>
  }
}
 80010e8:	bf00      	nop
 80010ea:	3770      	adds	r7, #112	; 0x70
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	58024800 	.word	0x58024800
 80010f4:	58024400 	.word	0x58024400

080010f8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4a04      	ldr	r2, [pc, #16]	; (8001118 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001106:	4293      	cmp	r3, r2
 8001108:	d101      	bne.n	800110e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800110a:	f000 fad9 	bl	80016c0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800110e:	bf00      	nop
 8001110:	3708      	adds	r7, #8
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	40000800 	.word	0x40000800

0800111c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001120:	b672      	cpsid	i
}
 8001122:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001124:	e7fe      	b.n	8001124 <Error_Handler+0x8>
	...

08001128 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800112e:	4b0c      	ldr	r3, [pc, #48]	; (8001160 <HAL_MspInit+0x38>)
 8001130:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001134:	4a0a      	ldr	r2, [pc, #40]	; (8001160 <HAL_MspInit+0x38>)
 8001136:	f043 0302 	orr.w	r3, r3, #2
 800113a:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 800113e:	4b08      	ldr	r3, [pc, #32]	; (8001160 <HAL_MspInit+0x38>)
 8001140:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001144:	f003 0302 	and.w	r3, r3, #2
 8001148:	607b      	str	r3, [r7, #4]
 800114a:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800114c:	2200      	movs	r2, #0
 800114e:	210f      	movs	r1, #15
 8001150:	f06f 0001 	mvn.w	r0, #1
 8001154:	f001 fd7c 	bl	8002c50 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001158:	bf00      	nop
 800115a:	3708      	adds	r7, #8
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	58024400 	.word	0x58024400

08001164 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b090      	sub	sp, #64	; 0x40
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM4 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	2b0f      	cmp	r3, #15
 8001170:	d827      	bhi.n	80011c2 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0U);
 8001172:	2200      	movs	r2, #0
 8001174:	6879      	ldr	r1, [r7, #4]
 8001176:	201e      	movs	r0, #30
 8001178:	f001 fd6a 	bl	8002c50 <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800117c:	201e      	movs	r0, #30
 800117e:	f001 fd81 	bl	8002c84 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8001182:	4a29      	ldr	r2, [pc, #164]	; (8001228 <HAL_InitTick+0xc4>)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8001188:	4b28      	ldr	r3, [pc, #160]	; (800122c <HAL_InitTick+0xc8>)
 800118a:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800118e:	4a27      	ldr	r2, [pc, #156]	; (800122c <HAL_InitTick+0xc8>)
 8001190:	f043 0304 	orr.w	r3, r3, #4
 8001194:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8001198:	4b24      	ldr	r3, [pc, #144]	; (800122c <HAL_InitTick+0xc8>)
 800119a:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800119e:	f003 0304 	and.w	r3, r3, #4
 80011a2:	60fb      	str	r3, [r7, #12]
 80011a4:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80011a6:	f107 0210 	add.w	r2, r7, #16
 80011aa:	f107 0314 	add.w	r3, r7, #20
 80011ae:	4611      	mov	r1, r2
 80011b0:	4618      	mov	r0, r3
 80011b2:	f004 f8e7 	bl	8005384 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80011b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011b8:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80011ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d106      	bne.n	80011ce <HAL_InitTick+0x6a>
 80011c0:	e001      	b.n	80011c6 <HAL_InitTick+0x62>
    return HAL_ERROR;
 80011c2:	2301      	movs	r3, #1
 80011c4:	e02b      	b.n	800121e <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80011c6:	f004 f8c7 	bl	8005358 <HAL_RCC_GetPCLK1Freq>
 80011ca:	63f8      	str	r0, [r7, #60]	; 0x3c
 80011cc:	e004      	b.n	80011d8 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80011ce:	f004 f8c3 	bl	8005358 <HAL_RCC_GetPCLK1Freq>
 80011d2:	4603      	mov	r3, r0
 80011d4:	005b      	lsls	r3, r3, #1
 80011d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80011d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80011da:	4a15      	ldr	r2, [pc, #84]	; (8001230 <HAL_InitTick+0xcc>)
 80011dc:	fba2 2303 	umull	r2, r3, r2, r3
 80011e0:	0c9b      	lsrs	r3, r3, #18
 80011e2:	3b01      	subs	r3, #1
 80011e4:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 80011e6:	4b13      	ldr	r3, [pc, #76]	; (8001234 <HAL_InitTick+0xd0>)
 80011e8:	4a13      	ldr	r2, [pc, #76]	; (8001238 <HAL_InitTick+0xd4>)
 80011ea:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 80011ec:	4b11      	ldr	r3, [pc, #68]	; (8001234 <HAL_InitTick+0xd0>)
 80011ee:	f240 32e7 	movw	r2, #999	; 0x3e7
 80011f2:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 80011f4:	4a0f      	ldr	r2, [pc, #60]	; (8001234 <HAL_InitTick+0xd0>)
 80011f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011f8:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 80011fa:	4b0e      	ldr	r3, [pc, #56]	; (8001234 <HAL_InitTick+0xd0>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001200:	4b0c      	ldr	r3, [pc, #48]	; (8001234 <HAL_InitTick+0xd0>)
 8001202:	2200      	movs	r2, #0
 8001204:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8001206:	480b      	ldr	r0, [pc, #44]	; (8001234 <HAL_InitTick+0xd0>)
 8001208:	f006 f9a8 	bl	800755c <HAL_TIM_Base_Init>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d104      	bne.n	800121c <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 8001212:	4808      	ldr	r0, [pc, #32]	; (8001234 <HAL_InitTick+0xd0>)
 8001214:	f006 f9fa 	bl	800760c <HAL_TIM_Base_Start_IT>
 8001218:	4603      	mov	r3, r0
 800121a:	e000      	b.n	800121e <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 800121c:	2301      	movs	r3, #1
}
 800121e:	4618      	mov	r0, r3
 8001220:	3740      	adds	r7, #64	; 0x40
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	24000008 	.word	0x24000008
 800122c:	58024400 	.word	0x58024400
 8001230:	431bde83 	.word	0x431bde83
 8001234:	24000710 	.word	0x24000710
 8001238:	40000800 	.word	0x40000800

0800123c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001240:	e7fe      	b.n	8001240 <NMI_Handler+0x4>

08001242 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001242:	b480      	push	{r7}
 8001244:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001246:	e7fe      	b.n	8001246 <HardFault_Handler+0x4>

08001248 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800124c:	e7fe      	b.n	800124c <MemManage_Handler+0x4>

0800124e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800124e:	b480      	push	{r7}
 8001250:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001252:	e7fe      	b.n	8001252 <BusFault_Handler+0x4>

08001254 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001258:	e7fe      	b.n	8001258 <UsageFault_Handler+0x4>

0800125a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800125a:	b480      	push	{r7}
 800125c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800125e:	bf00      	nop
 8001260:	46bd      	mov	sp, r7
 8001262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001266:	4770      	bx	lr

08001268 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 800126c:	4802      	ldr	r0, [pc, #8]	; (8001278 <FDCAN1_IT0_IRQHandler+0x10>)
 800126e:	f002 f9dd 	bl	800362c <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8001272:	bf00      	nop
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	240005dc 	.word	0x240005dc

0800127c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001280:	4802      	ldr	r0, [pc, #8]	; (800128c <TIM3_IRQHandler+0x10>)
 8001282:	f006 fbed 	bl	8007a60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001286:	bf00      	nop
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	2400075c 	.word	0x2400075c

08001290 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001294:	4802      	ldr	r0, [pc, #8]	; (80012a0 <TIM4_IRQHandler+0x10>)
 8001296:	f006 fbe3 	bl	8007a60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800129a:	bf00      	nop
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	24000710 	.word	0x24000710

080012a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b086      	sub	sp, #24
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012ac:	4a14      	ldr	r2, [pc, #80]	; (8001300 <_sbrk+0x5c>)
 80012ae:	4b15      	ldr	r3, [pc, #84]	; (8001304 <_sbrk+0x60>)
 80012b0:	1ad3      	subs	r3, r2, r3
 80012b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012b8:	4b13      	ldr	r3, [pc, #76]	; (8001308 <_sbrk+0x64>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d102      	bne.n	80012c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012c0:	4b11      	ldr	r3, [pc, #68]	; (8001308 <_sbrk+0x64>)
 80012c2:	4a12      	ldr	r2, [pc, #72]	; (800130c <_sbrk+0x68>)
 80012c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012c6:	4b10      	ldr	r3, [pc, #64]	; (8001308 <_sbrk+0x64>)
 80012c8:	681a      	ldr	r2, [r3, #0]
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	4413      	add	r3, r2
 80012ce:	693a      	ldr	r2, [r7, #16]
 80012d0:	429a      	cmp	r2, r3
 80012d2:	d207      	bcs.n	80012e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012d4:	f007 fc3a 	bl	8008b4c <__errno>
 80012d8:	4603      	mov	r3, r0
 80012da:	220c      	movs	r2, #12
 80012dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012de:	f04f 33ff 	mov.w	r3, #4294967295
 80012e2:	e009      	b.n	80012f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012e4:	4b08      	ldr	r3, [pc, #32]	; (8001308 <_sbrk+0x64>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012ea:	4b07      	ldr	r3, [pc, #28]	; (8001308 <_sbrk+0x64>)
 80012ec:	681a      	ldr	r2, [r3, #0]
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	4413      	add	r3, r2
 80012f2:	4a05      	ldr	r2, [pc, #20]	; (8001308 <_sbrk+0x64>)
 80012f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012f6:	68fb      	ldr	r3, [r7, #12]
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	3718      	adds	r7, #24
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	24100000 	.word	0x24100000
 8001304:	00000400 	.word	0x00000400
 8001308:	240000c0 	.word	0x240000c0
 800130c:	240007c0 	.word	0x240007c0

08001310 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001314:	4b32      	ldr	r3, [pc, #200]	; (80013e0 <SystemInit+0xd0>)
 8001316:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800131a:	4a31      	ldr	r2, [pc, #196]	; (80013e0 <SystemInit+0xd0>)
 800131c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001320:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001324:	4b2f      	ldr	r3, [pc, #188]	; (80013e4 <SystemInit+0xd4>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f003 030f 	and.w	r3, r3, #15
 800132c:	2b02      	cmp	r3, #2
 800132e:	d807      	bhi.n	8001340 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001330:	4b2c      	ldr	r3, [pc, #176]	; (80013e4 <SystemInit+0xd4>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f023 030f 	bic.w	r3, r3, #15
 8001338:	4a2a      	ldr	r2, [pc, #168]	; (80013e4 <SystemInit+0xd4>)
 800133a:	f043 0303 	orr.w	r3, r3, #3
 800133e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001340:	4b29      	ldr	r3, [pc, #164]	; (80013e8 <SystemInit+0xd8>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4a28      	ldr	r2, [pc, #160]	; (80013e8 <SystemInit+0xd8>)
 8001346:	f043 0301 	orr.w	r3, r3, #1
 800134a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800134c:	4b26      	ldr	r3, [pc, #152]	; (80013e8 <SystemInit+0xd8>)
 800134e:	2200      	movs	r2, #0
 8001350:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001352:	4b25      	ldr	r3, [pc, #148]	; (80013e8 <SystemInit+0xd8>)
 8001354:	681a      	ldr	r2, [r3, #0]
 8001356:	4924      	ldr	r1, [pc, #144]	; (80013e8 <SystemInit+0xd8>)
 8001358:	4b24      	ldr	r3, [pc, #144]	; (80013ec <SystemInit+0xdc>)
 800135a:	4013      	ands	r3, r2
 800135c:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800135e:	4b21      	ldr	r3, [pc, #132]	; (80013e4 <SystemInit+0xd4>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f003 030c 	and.w	r3, r3, #12
 8001366:	2b00      	cmp	r3, #0
 8001368:	d007      	beq.n	800137a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800136a:	4b1e      	ldr	r3, [pc, #120]	; (80013e4 <SystemInit+0xd4>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f023 030f 	bic.w	r3, r3, #15
 8001372:	4a1c      	ldr	r2, [pc, #112]	; (80013e4 <SystemInit+0xd4>)
 8001374:	f043 0303 	orr.w	r3, r3, #3
 8001378:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 800137a:	4b1b      	ldr	r3, [pc, #108]	; (80013e8 <SystemInit+0xd8>)
 800137c:	2200      	movs	r2, #0
 800137e:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8001380:	4b19      	ldr	r3, [pc, #100]	; (80013e8 <SystemInit+0xd8>)
 8001382:	2200      	movs	r2, #0
 8001384:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8001386:	4b18      	ldr	r3, [pc, #96]	; (80013e8 <SystemInit+0xd8>)
 8001388:	2200      	movs	r2, #0
 800138a:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800138c:	4b16      	ldr	r3, [pc, #88]	; (80013e8 <SystemInit+0xd8>)
 800138e:	4a18      	ldr	r2, [pc, #96]	; (80013f0 <SystemInit+0xe0>)
 8001390:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001392:	4b15      	ldr	r3, [pc, #84]	; (80013e8 <SystemInit+0xd8>)
 8001394:	4a17      	ldr	r2, [pc, #92]	; (80013f4 <SystemInit+0xe4>)
 8001396:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001398:	4b13      	ldr	r3, [pc, #76]	; (80013e8 <SystemInit+0xd8>)
 800139a:	4a17      	ldr	r2, [pc, #92]	; (80013f8 <SystemInit+0xe8>)
 800139c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800139e:	4b12      	ldr	r3, [pc, #72]	; (80013e8 <SystemInit+0xd8>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80013a4:	4b10      	ldr	r3, [pc, #64]	; (80013e8 <SystemInit+0xd8>)
 80013a6:	4a14      	ldr	r2, [pc, #80]	; (80013f8 <SystemInit+0xe8>)
 80013a8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80013aa:	4b0f      	ldr	r3, [pc, #60]	; (80013e8 <SystemInit+0xd8>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80013b0:	4b0d      	ldr	r3, [pc, #52]	; (80013e8 <SystemInit+0xd8>)
 80013b2:	4a11      	ldr	r2, [pc, #68]	; (80013f8 <SystemInit+0xe8>)
 80013b4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80013b6:	4b0c      	ldr	r3, [pc, #48]	; (80013e8 <SystemInit+0xd8>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80013bc:	4b0a      	ldr	r3, [pc, #40]	; (80013e8 <SystemInit+0xd8>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a09      	ldr	r2, [pc, #36]	; (80013e8 <SystemInit+0xd8>)
 80013c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013c6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80013c8:	4b07      	ldr	r3, [pc, #28]	; (80013e8 <SystemInit+0xd8>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80013ce:	4b0b      	ldr	r3, [pc, #44]	; (80013fc <SystemInit+0xec>)
 80013d0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80013d4:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 80013d6:	bf00      	nop
 80013d8:	46bd      	mov	sp, r7
 80013da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013de:	4770      	bx	lr
 80013e0:	e000ed00 	.word	0xe000ed00
 80013e4:	52002000 	.word	0x52002000
 80013e8:	58024400 	.word	0x58024400
 80013ec:	eaf6ed7f 	.word	0xeaf6ed7f
 80013f0:	02020200 	.word	0x02020200
 80013f4:	01ff0000 	.word	0x01ff0000
 80013f8:	01010280 	.word	0x01010280
 80013fc:	52004000 	.word	0x52004000

08001400 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b08c      	sub	sp, #48	; 0x30
 8001404:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001406:	f107 0320 	add.w	r3, r7, #32
 800140a:	2200      	movs	r2, #0
 800140c:	601a      	str	r2, [r3, #0]
 800140e:	605a      	str	r2, [r3, #4]
 8001410:	609a      	str	r2, [r3, #8]
 8001412:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001414:	f107 0314 	add.w	r3, r7, #20
 8001418:	2200      	movs	r2, #0
 800141a:	601a      	str	r2, [r3, #0]
 800141c:	605a      	str	r2, [r3, #4]
 800141e:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001420:	1d3b      	adds	r3, r7, #4
 8001422:	2200      	movs	r2, #0
 8001424:	601a      	str	r2, [r3, #0]
 8001426:	605a      	str	r2, [r3, #4]
 8001428:	609a      	str	r2, [r3, #8]
 800142a:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800142c:	4b36      	ldr	r3, [pc, #216]	; (8001508 <MX_TIM3_Init+0x108>)
 800142e:	4a37      	ldr	r2, [pc, #220]	; (800150c <MX_TIM3_Init+0x10c>)
 8001430:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 64-1;
 8001432:	4b35      	ldr	r3, [pc, #212]	; (8001508 <MX_TIM3_Init+0x108>)
 8001434:	223f      	movs	r2, #63	; 0x3f
 8001436:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001438:	4b33      	ldr	r3, [pc, #204]	; (8001508 <MX_TIM3_Init+0x108>)
 800143a:	2200      	movs	r2, #0
 800143c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0xffff-1;
 800143e:	4b32      	ldr	r3, [pc, #200]	; (8001508 <MX_TIM3_Init+0x108>)
 8001440:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001444:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001446:	4b30      	ldr	r3, [pc, #192]	; (8001508 <MX_TIM3_Init+0x108>)
 8001448:	2200      	movs	r2, #0
 800144a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800144c:	4b2e      	ldr	r3, [pc, #184]	; (8001508 <MX_TIM3_Init+0x108>)
 800144e:	2200      	movs	r2, #0
 8001450:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001452:	482d      	ldr	r0, [pc, #180]	; (8001508 <MX_TIM3_Init+0x108>)
 8001454:	f006 f882 	bl	800755c <HAL_TIM_Base_Init>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d001      	beq.n	8001462 <MX_TIM3_Init+0x62>
  {
    Error_Handler();
 800145e:	f7ff fe5d 	bl	800111c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001462:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001466:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001468:	f107 0320 	add.w	r3, r7, #32
 800146c:	4619      	mov	r1, r3
 800146e:	4826      	ldr	r0, [pc, #152]	; (8001508 <MX_TIM3_Init+0x108>)
 8001470:	f006 fcb2 	bl	8007dd8 <HAL_TIM_ConfigClockSource>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d001      	beq.n	800147e <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 800147a:	f7ff fe4f 	bl	800111c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 800147e:	4822      	ldr	r0, [pc, #136]	; (8001508 <MX_TIM3_Init+0x108>)
 8001480:	f006 f93c 	bl	80076fc <HAL_TIM_IC_Init>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 800148a:	f7ff fe47 	bl	800111c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800148e:	2300      	movs	r3, #0
 8001490:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001492:	2300      	movs	r3, #0
 8001494:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001496:	f107 0314 	add.w	r3, r7, #20
 800149a:	4619      	mov	r1, r3
 800149c:	481a      	ldr	r0, [pc, #104]	; (8001508 <MX_TIM3_Init+0x108>)
 800149e:	f007 f87d 	bl	800859c <HAL_TIMEx_MasterConfigSynchronization>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d001      	beq.n	80014ac <MX_TIM3_Init+0xac>
  {
    Error_Handler();
 80014a8:	f7ff fe38 	bl	800111c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80014ac:	2300      	movs	r3, #0
 80014ae:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80014b0:	2301      	movs	r3, #1
 80014b2:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80014b4:	2300      	movs	r3, #0
 80014b6:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80014b8:	2300      	movs	r3, #0
 80014ba:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80014bc:	1d3b      	adds	r3, r7, #4
 80014be:	2200      	movs	r2, #0
 80014c0:	4619      	mov	r1, r3
 80014c2:	4811      	ldr	r0, [pc, #68]	; (8001508 <MX_TIM3_Init+0x108>)
 80014c4:	f006 fbeb 	bl	8007c9e <HAL_TIM_IC_ConfigChannel>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <MX_TIM3_Init+0xd2>
  {
    Error_Handler();
 80014ce:	f7ff fe25 	bl	800111c <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80014d2:	1d3b      	adds	r3, r7, #4
 80014d4:	2204      	movs	r2, #4
 80014d6:	4619      	mov	r1, r3
 80014d8:	480b      	ldr	r0, [pc, #44]	; (8001508 <MX_TIM3_Init+0x108>)
 80014da:	f006 fbe0 	bl	8007c9e <HAL_TIM_IC_ConfigChannel>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d001      	beq.n	80014e8 <MX_TIM3_Init+0xe8>
  {
    Error_Handler();
 80014e4:	f7ff fe1a 	bl	800111c <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 80014e8:	1d3b      	adds	r3, r7, #4
 80014ea:	220c      	movs	r2, #12
 80014ec:	4619      	mov	r1, r3
 80014ee:	4806      	ldr	r0, [pc, #24]	; (8001508 <MX_TIM3_Init+0x108>)
 80014f0:	f006 fbd5 	bl	8007c9e <HAL_TIM_IC_ConfigChannel>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d001      	beq.n	80014fe <MX_TIM3_Init+0xfe>
  {
    Error_Handler();
 80014fa:	f7ff fe0f 	bl	800111c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80014fe:	bf00      	nop
 8001500:	3730      	adds	r7, #48	; 0x30
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	2400075c 	.word	0x2400075c
 800150c:	40000400 	.word	0x40000400

08001510 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b08a      	sub	sp, #40	; 0x28
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001518:	f107 0314 	add.w	r3, r7, #20
 800151c:	2200      	movs	r2, #0
 800151e:	601a      	str	r2, [r3, #0]
 8001520:	605a      	str	r2, [r3, #4]
 8001522:	609a      	str	r2, [r3, #8]
 8001524:	60da      	str	r2, [r3, #12]
 8001526:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM3)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a2d      	ldr	r2, [pc, #180]	; (80015e4 <HAL_TIM_Base_MspInit+0xd4>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d154      	bne.n	80015dc <HAL_TIM_Base_MspInit+0xcc>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001532:	4b2d      	ldr	r3, [pc, #180]	; (80015e8 <HAL_TIM_Base_MspInit+0xd8>)
 8001534:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001538:	4a2b      	ldr	r2, [pc, #172]	; (80015e8 <HAL_TIM_Base_MspInit+0xd8>)
 800153a:	f043 0302 	orr.w	r3, r3, #2
 800153e:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8001542:	4b29      	ldr	r3, [pc, #164]	; (80015e8 <HAL_TIM_Base_MspInit+0xd8>)
 8001544:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001548:	f003 0302 	and.w	r3, r3, #2
 800154c:	613b      	str	r3, [r7, #16]
 800154e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001550:	4b25      	ldr	r3, [pc, #148]	; (80015e8 <HAL_TIM_Base_MspInit+0xd8>)
 8001552:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001556:	4a24      	ldr	r2, [pc, #144]	; (80015e8 <HAL_TIM_Base_MspInit+0xd8>)
 8001558:	f043 0301 	orr.w	r3, r3, #1
 800155c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001560:	4b21      	ldr	r3, [pc, #132]	; (80015e8 <HAL_TIM_Base_MspInit+0xd8>)
 8001562:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001566:	f003 0301 	and.w	r3, r3, #1
 800156a:	60fb      	str	r3, [r7, #12]
 800156c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800156e:	4b1e      	ldr	r3, [pc, #120]	; (80015e8 <HAL_TIM_Base_MspInit+0xd8>)
 8001570:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001574:	4a1c      	ldr	r2, [pc, #112]	; (80015e8 <HAL_TIM_Base_MspInit+0xd8>)
 8001576:	f043 0302 	orr.w	r3, r3, #2
 800157a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800157e:	4b1a      	ldr	r3, [pc, #104]	; (80015e8 <HAL_TIM_Base_MspInit+0xd8>)
 8001580:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001584:	f003 0302 	and.w	r3, r3, #2
 8001588:	60bb      	str	r3, [r7, #8]
 800158a:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800158c:	23c0      	movs	r3, #192	; 0xc0
 800158e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001590:	2302      	movs	r3, #2
 8001592:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001594:	2300      	movs	r3, #0
 8001596:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001598:	2300      	movs	r3, #0
 800159a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800159c:	2302      	movs	r3, #2
 800159e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015a0:	f107 0314 	add.w	r3, r7, #20
 80015a4:	4619      	mov	r1, r3
 80015a6:	4811      	ldr	r0, [pc, #68]	; (80015ec <HAL_TIM_Base_MspInit+0xdc>)
 80015a8:	f002 fd4e 	bl	8004048 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80015ac:	2302      	movs	r3, #2
 80015ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b0:	2302      	movs	r3, #2
 80015b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b4:	2300      	movs	r3, #0
 80015b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b8:	2300      	movs	r3, #0
 80015ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80015bc:	2302      	movs	r3, #2
 80015be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015c0:	f107 0314 	add.w	r3, r7, #20
 80015c4:	4619      	mov	r1, r3
 80015c6:	480a      	ldr	r0, [pc, #40]	; (80015f0 <HAL_TIM_Base_MspInit+0xe0>)
 80015c8:	f002 fd3e 	bl	8004048 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 80015cc:	2200      	movs	r2, #0
 80015ce:	2105      	movs	r1, #5
 80015d0:	201d      	movs	r0, #29
 80015d2:	f001 fb3d 	bl	8002c50 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80015d6:	201d      	movs	r0, #29
 80015d8:	f001 fb54 	bl	8002c84 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80015dc:	bf00      	nop
 80015de:	3728      	adds	r7, #40	; 0x28
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	40000400 	.word	0x40000400
 80015e8:	58024400 	.word	0x58024400
 80015ec:	58020000 	.word	0x58020000
 80015f0:	58020400 	.word	0x58020400

080015f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80015f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800162c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80015f8:	f7ff fe8a 	bl	8001310 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80015fc:	480c      	ldr	r0, [pc, #48]	; (8001630 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80015fe:	490d      	ldr	r1, [pc, #52]	; (8001634 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001600:	4a0d      	ldr	r2, [pc, #52]	; (8001638 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001602:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001604:	e002      	b.n	800160c <LoopCopyDataInit>

08001606 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001606:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001608:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800160a:	3304      	adds	r3, #4

0800160c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 800160c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800160e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001610:	d3f9      	bcc.n	8001606 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001612:	4a0a      	ldr	r2, [pc, #40]	; (800163c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001614:	4c0a      	ldr	r4, [pc, #40]	; (8001640 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001616:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001618:	e001      	b.n	800161e <LoopFillZerobss>

0800161a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800161a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800161c:	3204      	adds	r2, #4

0800161e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800161e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001620:	d3fb      	bcc.n	800161a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001622:	f007 fa99 	bl	8008b58 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001626:	f7ff fbdf 	bl	8000de8 <main>
  bx  lr
 800162a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800162c:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8001630:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001634:	24000074 	.word	0x24000074
  ldr r2, =_sidata
 8001638:	08009548 	.word	0x08009548
  ldr r2, =_sbss
 800163c:	24000074 	.word	0x24000074
  ldr r4, =_ebss
 8001640:	240007bc 	.word	0x240007bc

08001644 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001644:	e7fe      	b.n	8001644 <ADC_IRQHandler>
	...

08001648 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b082      	sub	sp, #8
 800164c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800164e:	2003      	movs	r0, #3
 8001650:	f001 faf3 	bl	8002c3a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8001654:	f003 fcd6 	bl	8005004 <HAL_RCC_GetSysClockFreq>
 8001658:	4602      	mov	r2, r0
 800165a:	4b15      	ldr	r3, [pc, #84]	; (80016b0 <HAL_Init+0x68>)
 800165c:	699b      	ldr	r3, [r3, #24]
 800165e:	0a1b      	lsrs	r3, r3, #8
 8001660:	f003 030f 	and.w	r3, r3, #15
 8001664:	4913      	ldr	r1, [pc, #76]	; (80016b4 <HAL_Init+0x6c>)
 8001666:	5ccb      	ldrb	r3, [r1, r3]
 8001668:	f003 031f 	and.w	r3, r3, #31
 800166c:	fa22 f303 	lsr.w	r3, r2, r3
 8001670:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8001672:	4b0f      	ldr	r3, [pc, #60]	; (80016b0 <HAL_Init+0x68>)
 8001674:	699b      	ldr	r3, [r3, #24]
 8001676:	f003 030f 	and.w	r3, r3, #15
 800167a:	4a0e      	ldr	r2, [pc, #56]	; (80016b4 <HAL_Init+0x6c>)
 800167c:	5cd3      	ldrb	r3, [r2, r3]
 800167e:	f003 031f 	and.w	r3, r3, #31
 8001682:	687a      	ldr	r2, [r7, #4]
 8001684:	fa22 f303 	lsr.w	r3, r2, r3
 8001688:	4a0b      	ldr	r2, [pc, #44]	; (80016b8 <HAL_Init+0x70>)
 800168a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800168c:	4a0b      	ldr	r2, [pc, #44]	; (80016bc <HAL_Init+0x74>)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001692:	200f      	movs	r0, #15
 8001694:	f7ff fd66 	bl	8001164 <HAL_InitTick>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d001      	beq.n	80016a2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800169e:	2301      	movs	r3, #1
 80016a0:	e002      	b.n	80016a8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80016a2:	f7ff fd41 	bl	8001128 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016a6:	2300      	movs	r3, #0
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	3708      	adds	r7, #8
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	58024400 	.word	0x58024400
 80016b4:	0800948c 	.word	0x0800948c
 80016b8:	24000004 	.word	0x24000004
 80016bc:	24000000 	.word	0x24000000

080016c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80016c4:	4b06      	ldr	r3, [pc, #24]	; (80016e0 <HAL_IncTick+0x20>)
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	461a      	mov	r2, r3
 80016ca:	4b06      	ldr	r3, [pc, #24]	; (80016e4 <HAL_IncTick+0x24>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4413      	add	r3, r2
 80016d0:	4a04      	ldr	r2, [pc, #16]	; (80016e4 <HAL_IncTick+0x24>)
 80016d2:	6013      	str	r3, [r2, #0]
}
 80016d4:	bf00      	nop
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr
 80016de:	bf00      	nop
 80016e0:	2400000c 	.word	0x2400000c
 80016e4:	240007a8 	.word	0x240007a8

080016e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
  return uwTick;
 80016ec:	4b03      	ldr	r3, [pc, #12]	; (80016fc <HAL_GetTick+0x14>)
 80016ee:	681b      	ldr	r3, [r3, #0]
}
 80016f0:	4618      	mov	r0, r3
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr
 80016fa:	bf00      	nop
 80016fc:	240007a8 	.word	0x240007a8

08001700 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b084      	sub	sp, #16
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001708:	f7ff ffee 	bl	80016e8 <HAL_GetTick>
 800170c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001718:	d005      	beq.n	8001726 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800171a:	4b0a      	ldr	r3, [pc, #40]	; (8001744 <HAL_Delay+0x44>)
 800171c:	781b      	ldrb	r3, [r3, #0]
 800171e:	461a      	mov	r2, r3
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	4413      	add	r3, r2
 8001724:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001726:	bf00      	nop
 8001728:	f7ff ffde 	bl	80016e8 <HAL_GetTick>
 800172c:	4602      	mov	r2, r0
 800172e:	68bb      	ldr	r3, [r7, #8]
 8001730:	1ad3      	subs	r3, r2, r3
 8001732:	68fa      	ldr	r2, [r7, #12]
 8001734:	429a      	cmp	r2, r3
 8001736:	d8f7      	bhi.n	8001728 <HAL_Delay+0x28>
  {
  }
}
 8001738:	bf00      	nop
 800173a:	bf00      	nop
 800173c:	3710      	adds	r7, #16
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	2400000c 	.word	0x2400000c

08001748 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001748:	b480      	push	{r7}
 800174a:	b083      	sub	sp, #12
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
 8001750:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	689b      	ldr	r3, [r3, #8]
 8001756:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	431a      	orrs	r2, r3
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	609a      	str	r2, [r3, #8]
}
 8001762:	bf00      	nop
 8001764:	370c      	adds	r7, #12
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr

0800176e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800176e:	b480      	push	{r7}
 8001770:	b083      	sub	sp, #12
 8001772:	af00      	add	r7, sp, #0
 8001774:	6078      	str	r0, [r7, #4]
 8001776:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	689b      	ldr	r3, [r3, #8]
 800177c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	431a      	orrs	r2, r3
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	609a      	str	r2, [r3, #8]
}
 8001788:	bf00      	nop
 800178a:	370c      	adds	r7, #12
 800178c:	46bd      	mov	sp, r7
 800178e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001792:	4770      	bx	lr

08001794 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001794:	b480      	push	{r7}
 8001796:	b083      	sub	sp, #12
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	689b      	ldr	r3, [r3, #8]
 80017a0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80017a4:	4618      	mov	r0, r3
 80017a6:	370c      	adds	r7, #12
 80017a8:	46bd      	mov	sp, r7
 80017aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ae:	4770      	bx	lr

080017b0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b087      	sub	sp, #28
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	60f8      	str	r0, [r7, #12]
 80017b8:	60b9      	str	r1, [r7, #8]
 80017ba:	607a      	str	r2, [r7, #4]
 80017bc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	3360      	adds	r3, #96	; 0x60
 80017c2:	461a      	mov	r2, r3
 80017c4:	68bb      	ldr	r3, [r7, #8]
 80017c6:	009b      	lsls	r3, r3, #2
 80017c8:	4413      	add	r3, r2
 80017ca:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	430b      	orrs	r3, r1
 80017de:	431a      	orrs	r2, r3
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80017e4:	bf00      	nop
 80017e6:	371c      	adds	r7, #28
 80017e8:	46bd      	mov	sp, r7
 80017ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ee:	4770      	bx	lr

080017f0 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b085      	sub	sp, #20
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	60f8      	str	r0, [r7, #12]
 80017f8:	60b9      	str	r1, [r7, #8]
 80017fa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	691b      	ldr	r3, [r3, #16]
 8001800:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8001804:	68bb      	ldr	r3, [r7, #8]
 8001806:	f003 031f 	and.w	r3, r3, #31
 800180a:	6879      	ldr	r1, [r7, #4]
 800180c:	fa01 f303 	lsl.w	r3, r1, r3
 8001810:	431a      	orrs	r2, r3
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	611a      	str	r2, [r3, #16]
}
 8001816:	bf00      	nop
 8001818:	3714      	adds	r7, #20
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr

08001822 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001822:	b480      	push	{r7}
 8001824:	b087      	sub	sp, #28
 8001826:	af00      	add	r7, sp, #0
 8001828:	60f8      	str	r0, [r7, #12]
 800182a:	60b9      	str	r1, [r7, #8]
 800182c:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	3360      	adds	r3, #96	; 0x60
 8001832:	461a      	mov	r2, r3
 8001834:	68bb      	ldr	r3, [r7, #8]
 8001836:	009b      	lsls	r3, r3, #2
 8001838:	4413      	add	r3, r2
 800183a:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	431a      	orrs	r2, r3
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	601a      	str	r2, [r3, #0]
  }
}
 800184c:	bf00      	nop
 800184e:	371c      	adds	r7, #28
 8001850:	46bd      	mov	sp, r7
 8001852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001856:	4770      	bx	lr

08001858 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001858:	b480      	push	{r7}
 800185a:	b083      	sub	sp, #12
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	68db      	ldr	r3, [r3, #12]
 8001864:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001868:	2b00      	cmp	r3, #0
 800186a:	d101      	bne.n	8001870 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800186c:	2301      	movs	r3, #1
 800186e:	e000      	b.n	8001872 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001870:	2300      	movs	r3, #0
}
 8001872:	4618      	mov	r0, r3
 8001874:	370c      	adds	r7, #12
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr

0800187e <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800187e:	b480      	push	{r7}
 8001880:	b087      	sub	sp, #28
 8001882:	af00      	add	r7, sp, #0
 8001884:	60f8      	str	r0, [r7, #12]
 8001886:	60b9      	str	r1, [r7, #8]
 8001888:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	3330      	adds	r3, #48	; 0x30
 800188e:	461a      	mov	r2, r3
 8001890:	68bb      	ldr	r3, [r7, #8]
 8001892:	0a1b      	lsrs	r3, r3, #8
 8001894:	009b      	lsls	r3, r3, #2
 8001896:	f003 030c 	and.w	r3, r3, #12
 800189a:	4413      	add	r3, r2
 800189c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800189e:	697b      	ldr	r3, [r7, #20]
 80018a0:	681a      	ldr	r2, [r3, #0]
 80018a2:	68bb      	ldr	r3, [r7, #8]
 80018a4:	f003 031f 	and.w	r3, r3, #31
 80018a8:	211f      	movs	r1, #31
 80018aa:	fa01 f303 	lsl.w	r3, r1, r3
 80018ae:	43db      	mvns	r3, r3
 80018b0:	401a      	ands	r2, r3
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	0e9b      	lsrs	r3, r3, #26
 80018b6:	f003 011f 	and.w	r1, r3, #31
 80018ba:	68bb      	ldr	r3, [r7, #8]
 80018bc:	f003 031f 	and.w	r3, r3, #31
 80018c0:	fa01 f303 	lsl.w	r3, r1, r3
 80018c4:	431a      	orrs	r2, r3
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80018ca:	bf00      	nop
 80018cc:	371c      	adds	r7, #28
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr

080018d6 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80018d6:	b480      	push	{r7}
 80018d8:	b087      	sub	sp, #28
 80018da:	af00      	add	r7, sp, #0
 80018dc:	60f8      	str	r0, [r7, #12]
 80018de:	60b9      	str	r1, [r7, #8]
 80018e0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	3314      	adds	r3, #20
 80018e6:	461a      	mov	r2, r3
 80018e8:	68bb      	ldr	r3, [r7, #8]
 80018ea:	0e5b      	lsrs	r3, r3, #25
 80018ec:	009b      	lsls	r3, r3, #2
 80018ee:	f003 0304 	and.w	r3, r3, #4
 80018f2:	4413      	add	r3, r2
 80018f4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	681a      	ldr	r2, [r3, #0]
 80018fa:	68bb      	ldr	r3, [r7, #8]
 80018fc:	0d1b      	lsrs	r3, r3, #20
 80018fe:	f003 031f 	and.w	r3, r3, #31
 8001902:	2107      	movs	r1, #7
 8001904:	fa01 f303 	lsl.w	r3, r1, r3
 8001908:	43db      	mvns	r3, r3
 800190a:	401a      	ands	r2, r3
 800190c:	68bb      	ldr	r3, [r7, #8]
 800190e:	0d1b      	lsrs	r3, r3, #20
 8001910:	f003 031f 	and.w	r3, r3, #31
 8001914:	6879      	ldr	r1, [r7, #4]
 8001916:	fa01 f303 	lsl.w	r3, r1, r3
 800191a:	431a      	orrs	r2, r3
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001920:	bf00      	nop
 8001922:	371c      	adds	r7, #28
 8001924:	46bd      	mov	sp, r7
 8001926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192a:	4770      	bx	lr

0800192c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800192c:	b480      	push	{r7}
 800192e:	b085      	sub	sp, #20
 8001930:	af00      	add	r7, sp, #0
 8001932:	60f8      	str	r0, [r7, #12]
 8001934:	60b9      	str	r1, [r7, #8]
 8001936:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800193e:	68bb      	ldr	r3, [r7, #8]
 8001940:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001944:	43db      	mvns	r3, r3
 8001946:	401a      	ands	r2, r3
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	f003 0318 	and.w	r3, r3, #24
 800194e:	4908      	ldr	r1, [pc, #32]	; (8001970 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001950:	40d9      	lsrs	r1, r3
 8001952:	68bb      	ldr	r3, [r7, #8]
 8001954:	400b      	ands	r3, r1
 8001956:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800195a:	431a      	orrs	r2, r3
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 8001962:	bf00      	nop
 8001964:	3714      	adds	r7, #20
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr
 800196e:	bf00      	nop
 8001970:	000fffff 	.word	0x000fffff

08001974 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001974:	b480      	push	{r7}
 8001976:	b083      	sub	sp, #12
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	689b      	ldr	r3, [r3, #8]
 8001980:	f003 031f 	and.w	r3, r3, #31
}
 8001984:	4618      	mov	r0, r3
 8001986:	370c      	adds	r7, #12
 8001988:	46bd      	mov	sp, r7
 800198a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198e:	4770      	bx	lr

08001990 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001990:	b480      	push	{r7}
 8001992:	b083      	sub	sp, #12
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	689b      	ldr	r3, [r3, #8]
 800199c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	370c      	adds	r7, #12
 80019a4:	46bd      	mov	sp, r7
 80019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019aa:	4770      	bx	lr

080019ac <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b083      	sub	sp, #12
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	689a      	ldr	r2, [r3, #8]
 80019b8:	4b04      	ldr	r3, [pc, #16]	; (80019cc <LL_ADC_DisableDeepPowerDown+0x20>)
 80019ba:	4013      	ands	r3, r2
 80019bc:	687a      	ldr	r2, [r7, #4]
 80019be:	6093      	str	r3, [r2, #8]
}
 80019c0:	bf00      	nop
 80019c2:	370c      	adds	r7, #12
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr
 80019cc:	5fffffc0 	.word	0x5fffffc0

080019d0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b083      	sub	sp, #12
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	689b      	ldr	r3, [r3, #8]
 80019dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80019e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80019e4:	d101      	bne.n	80019ea <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80019e6:	2301      	movs	r3, #1
 80019e8:	e000      	b.n	80019ec <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80019ea:	2300      	movs	r3, #0
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	370c      	adds	r7, #12
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr

080019f8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b083      	sub	sp, #12
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	689a      	ldr	r2, [r3, #8]
 8001a04:	4b05      	ldr	r3, [pc, #20]	; (8001a1c <LL_ADC_EnableInternalRegulator+0x24>)
 8001a06:	4013      	ands	r3, r2
 8001a08:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001a10:	bf00      	nop
 8001a12:	370c      	adds	r7, #12
 8001a14:	46bd      	mov	sp, r7
 8001a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1a:	4770      	bx	lr
 8001a1c:	6fffffc0 	.word	0x6fffffc0

08001a20 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b083      	sub	sp, #12
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	689b      	ldr	r3, [r3, #8]
 8001a2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a30:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001a34:	d101      	bne.n	8001a3a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001a36:	2301      	movs	r3, #1
 8001a38:	e000      	b.n	8001a3c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001a3a:	2300      	movs	r3, #0
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	370c      	adds	r7, #12
 8001a40:	46bd      	mov	sp, r7
 8001a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a46:	4770      	bx	lr

08001a48 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b083      	sub	sp, #12
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	689a      	ldr	r2, [r3, #8]
 8001a54:	4b05      	ldr	r3, [pc, #20]	; (8001a6c <LL_ADC_Enable+0x24>)
 8001a56:	4013      	ands	r3, r2
 8001a58:	f043 0201 	orr.w	r2, r3, #1
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001a60:	bf00      	nop
 8001a62:	370c      	adds	r7, #12
 8001a64:	46bd      	mov	sp, r7
 8001a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6a:	4770      	bx	lr
 8001a6c:	7fffffc0 	.word	0x7fffffc0

08001a70 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b083      	sub	sp, #12
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	689b      	ldr	r3, [r3, #8]
 8001a7c:	f003 0301 	and.w	r3, r3, #1
 8001a80:	2b01      	cmp	r3, #1
 8001a82:	d101      	bne.n	8001a88 <LL_ADC_IsEnabled+0x18>
 8001a84:	2301      	movs	r3, #1
 8001a86:	e000      	b.n	8001a8a <LL_ADC_IsEnabled+0x1a>
 8001a88:	2300      	movs	r3, #0
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	370c      	adds	r7, #12
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr
	...

08001a98 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b083      	sub	sp, #12
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	689a      	ldr	r2, [r3, #8]
 8001aa4:	4b05      	ldr	r3, [pc, #20]	; (8001abc <LL_ADC_REG_StartConversion+0x24>)
 8001aa6:	4013      	ands	r3, r2
 8001aa8:	f043 0204 	orr.w	r2, r3, #4
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001ab0:	bf00      	nop
 8001ab2:	370c      	adds	r7, #12
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aba:	4770      	bx	lr
 8001abc:	7fffffc0 	.word	0x7fffffc0

08001ac0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b083      	sub	sp, #12
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	689b      	ldr	r3, [r3, #8]
 8001acc:	f003 0304 	and.w	r3, r3, #4
 8001ad0:	2b04      	cmp	r3, #4
 8001ad2:	d101      	bne.n	8001ad8 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	e000      	b.n	8001ada <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001ad8:	2300      	movs	r3, #0
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	370c      	adds	r7, #12
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr

08001ae6 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001ae6:	b480      	push	{r7}
 8001ae8:	b083      	sub	sp, #12
 8001aea:	af00      	add	r7, sp, #0
 8001aec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	689b      	ldr	r3, [r3, #8]
 8001af2:	f003 0308 	and.w	r3, r3, #8
 8001af6:	2b08      	cmp	r3, #8
 8001af8:	d101      	bne.n	8001afe <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001afa:	2301      	movs	r3, #1
 8001afc:	e000      	b.n	8001b00 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001afe:	2300      	movs	r3, #0
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	370c      	adds	r7, #12
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr

08001b0c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001b0c:	b590      	push	{r4, r7, lr}
 8001b0e:	b089      	sub	sp, #36	; 0x24
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b14:	2300      	movs	r3, #0
 8001b16:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d101      	bne.n	8001b26 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001b22:	2301      	movs	r3, #1
 8001b24:	e138      	b.n	8001d98 <HAL_ADC_Init+0x28c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	68db      	ldr	r3, [r3, #12]
 8001b2a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d109      	bne.n	8001b48 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b34:	6878      	ldr	r0, [r7, #4]
 8001b36:	f7fe fca3 	bl	8000480 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2200      	movs	r2, #0
 8001b44:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f7ff ff3f 	bl	80019d0 <LL_ADC_IsDeepPowerDownEnabled>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d004      	beq.n	8001b62 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f7ff ff25 	bl	80019ac <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4618      	mov	r0, r3
 8001b68:	f7ff ff5a 	bl	8001a20 <LL_ADC_IsInternalRegulatorEnabled>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d114      	bne.n	8001b9c <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4618      	mov	r0, r3
 8001b78:	f7ff ff3e 	bl	80019f8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001b7c:	4b88      	ldr	r3, [pc, #544]	; (8001da0 <HAL_ADC_Init+0x294>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	099b      	lsrs	r3, r3, #6
 8001b82:	4a88      	ldr	r2, [pc, #544]	; (8001da4 <HAL_ADC_Init+0x298>)
 8001b84:	fba2 2303 	umull	r2, r3, r2, r3
 8001b88:	099b      	lsrs	r3, r3, #6
 8001b8a:	3301      	adds	r3, #1
 8001b8c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001b8e:	e002      	b.n	8001b96 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8001b90:	68bb      	ldr	r3, [r7, #8]
 8001b92:	3b01      	subs	r3, #1
 8001b94:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001b96:	68bb      	ldr	r3, [r7, #8]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d1f9      	bne.n	8001b90 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f7ff ff3d 	bl	8001a20 <LL_ADC_IsInternalRegulatorEnabled>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d10d      	bne.n	8001bc8 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bb0:	f043 0210 	orr.w	r2, r3, #16
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bbc:	f043 0201 	orr.w	r2, r3, #1
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f7ff ff77 	bl	8001ac0 <LL_ADC_REG_IsConversionOngoing>
 8001bd2:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bd8:	f003 0310 	and.w	r3, r3, #16
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	f040 80d2 	bne.w	8001d86 <HAL_ADC_Init+0x27a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001be2:	697b      	ldr	r3, [r7, #20]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	f040 80ce 	bne.w	8001d86 <HAL_ADC_Init+0x27a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bee:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001bf2:	f043 0202 	orr.w	r2, r3, #2
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f7ff ff36 	bl	8001a70 <LL_ADC_IsEnabled>
 8001c04:	4603      	mov	r3, r0
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d110      	bne.n	8001c2c <HAL_ADC_Init+0x120>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001c0a:	4867      	ldr	r0, [pc, #412]	; (8001da8 <HAL_ADC_Init+0x29c>)
 8001c0c:	f7ff ff30 	bl	8001a70 <LL_ADC_IsEnabled>
 8001c10:	4604      	mov	r4, r0
 8001c12:	4866      	ldr	r0, [pc, #408]	; (8001dac <HAL_ADC_Init+0x2a0>)
 8001c14:	f7ff ff2c 	bl	8001a70 <LL_ADC_IsEnabled>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	4323      	orrs	r3, r4
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d105      	bne.n	8001c2c <HAL_ADC_Init+0x120>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	4619      	mov	r1, r3
 8001c26:	4862      	ldr	r0, [pc, #392]	; (8001db0 <HAL_ADC_Init+0x2a4>)
 8001c28:	f7ff fd8e 	bl	8001748 <LL_ADC_SetCommonClock>
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
#if defined(ADC_VER_V5_3)

    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	7d5b      	ldrb	r3, [r3, #21]
 8001c30:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                    |
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001c36:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                 |
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	689b      	ldr	r3, [r3, #8]
                hadc->Init.Overrun                                                    |
 8001c3c:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	7f1b      	ldrb	r3, [r3, #28]
 8001c42:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001c44:	4313      	orrs	r3, r2
 8001c46:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	7f1b      	ldrb	r3, [r3, #28]
 8001c4c:	2b01      	cmp	r3, #1
 8001c4e:	d106      	bne.n	8001c5e <HAL_ADC_Init+0x152>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6a1b      	ldr	r3, [r3, #32]
 8001c54:	3b01      	subs	r3, #1
 8001c56:	045b      	lsls	r3, r3, #17
 8001c58:	69ba      	ldr	r2, [r7, #24]
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d009      	beq.n	8001c7a <HAL_ADC_Init+0x16e>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c6a:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c72:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001c74:	69ba      	ldr	r2, [r7, #24]
 8001c76:	4313      	orrs	r3, r2
 8001c78:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	68da      	ldr	r2, [r3, #12]
 8001c80:	4b4c      	ldr	r3, [pc, #304]	; (8001db4 <HAL_ADC_Init+0x2a8>)
 8001c82:	4013      	ands	r3, r2
 8001c84:	687a      	ldr	r2, [r7, #4]
 8001c86:	6812      	ldr	r2, [r2, #0]
 8001c88:	69b9      	ldr	r1, [r7, #24]
 8001c8a:	430b      	orrs	r3, r1
 8001c8c:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4618      	mov	r0, r3
 8001c94:	f7ff ff14 	bl	8001ac0 <LL_ADC_REG_IsConversionOngoing>
 8001c98:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f7ff ff21 	bl	8001ae6 <LL_ADC_INJ_IsConversionOngoing>
 8001ca4:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d14a      	bne.n	8001d42 <HAL_ADC_Init+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d147      	bne.n	8001d42 <HAL_ADC_Init+0x236>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	7d1b      	ldrb	r3, [r3, #20]
 8001cb6:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	68da      	ldr	r2, [r3, #12]
 8001cc6:	4b3c      	ldr	r3, [pc, #240]	; (8001db8 <HAL_ADC_Init+0x2ac>)
 8001cc8:	4013      	ands	r3, r2
 8001cca:	687a      	ldr	r2, [r7, #4]
 8001ccc:	6812      	ldr	r2, [r2, #0]
 8001cce:	69b9      	ldr	r1, [r7, #24]
 8001cd0:	430b      	orrs	r3, r1
 8001cd2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001cda:	2b01      	cmp	r3, #1
 8001cdc:	d11b      	bne.n	8001d16 <HAL_ADC_Init+0x20a>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce2:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	691a      	ldr	r2, [r3, #16]
 8001cea:	4b34      	ldr	r3, [pc, #208]	; (8001dbc <HAL_ADC_Init+0x2b0>)
 8001cec:	4013      	ands	r3, r2
 8001cee:	687a      	ldr	r2, [r7, #4]
 8001cf0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001cf2:	3a01      	subs	r2, #1
 8001cf4:	0411      	lsls	r1, r2, #16
 8001cf6:	687a      	ldr	r2, [r7, #4]
 8001cf8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001cfa:	4311      	orrs	r1, r2
 8001cfc:	687a      	ldr	r2, [r7, #4]
 8001cfe:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001d00:	4311      	orrs	r1, r2
 8001d02:	687a      	ldr	r2, [r7, #4]
 8001d04:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001d06:	430a      	orrs	r2, r1
 8001d08:	431a      	orrs	r2, r3
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f042 0201 	orr.w	r2, r2, #1
 8001d12:	611a      	str	r2, [r3, #16]
 8001d14:	e007      	b.n	8001d26 <HAL_ADC_Init+0x21a>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	691a      	ldr	r2, [r3, #16]
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f022 0201 	bic.w	r2, r2, #1
 8001d24:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	691b      	ldr	r3, [r3, #16]
 8001d2c:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	430a      	orrs	r2, r1
 8001d3a:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8001d3c:	6878      	ldr	r0, [r7, #4]
 8001d3e:	f000 fd41 	bl	80027c4 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	68db      	ldr	r3, [r3, #12]
 8001d46:	2b01      	cmp	r3, #1
 8001d48:	d10c      	bne.n	8001d64 <HAL_ADC_Init+0x258>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d50:	f023 010f 	bic.w	r1, r3, #15
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	699b      	ldr	r3, [r3, #24]
 8001d58:	1e5a      	subs	r2, r3, #1
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	430a      	orrs	r2, r1
 8001d60:	631a      	str	r2, [r3, #48]	; 0x30
 8001d62:	e007      	b.n	8001d74 <HAL_ADC_Init+0x268>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f022 020f 	bic.w	r2, r2, #15
 8001d72:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d78:	f023 0303 	bic.w	r3, r3, #3
 8001d7c:	f043 0201 	orr.w	r2, r3, #1
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	655a      	str	r2, [r3, #84]	; 0x54
 8001d84:	e007      	b.n	8001d96 <HAL_ADC_Init+0x28a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d8a:	f043 0210 	orr.w	r2, r3, #16
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001d92:	2301      	movs	r3, #1
 8001d94:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001d96:	7ffb      	ldrb	r3, [r7, #31]
}
 8001d98:	4618      	mov	r0, r3
 8001d9a:	3724      	adds	r7, #36	; 0x24
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd90      	pop	{r4, r7, pc}
 8001da0:	24000000 	.word	0x24000000
 8001da4:	053e2d63 	.word	0x053e2d63
 8001da8:	40022000 	.word	0x40022000
 8001dac:	40022100 	.word	0x40022100
 8001db0:	40022300 	.word	0x40022300
 8001db4:	fff0c003 	.word	0xfff0c003
 8001db8:	ffffbffc 	.word	0xffffbffc
 8001dbc:	fc00f81e 	.word	0xfc00f81e

08001dc0 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b086      	sub	sp, #24
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001dc8:	4856      	ldr	r0, [pc, #344]	; (8001f24 <HAL_ADC_Start+0x164>)
 8001dca:	f7ff fdd3 	bl	8001974 <LL_ADC_GetMultimode>
 8001dce:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f7ff fe73 	bl	8001ac0 <LL_ADC_REG_IsConversionOngoing>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	f040 809a 	bne.w	8001f16 <HAL_ADC_Start+0x156>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001de8:	2b01      	cmp	r3, #1
 8001dea:	d101      	bne.n	8001df0 <HAL_ADC_Start+0x30>
 8001dec:	2302      	movs	r3, #2
 8001dee:	e095      	b.n	8001f1c <HAL_ADC_Start+0x15c>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2201      	movs	r2, #1
 8001df4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001df8:	6878      	ldr	r0, [r7, #4]
 8001dfa:	f000 fc67 	bl	80026cc <ADC_Enable>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001e02:	7dfb      	ldrb	r3, [r7, #23]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	f040 8081 	bne.w	8001f0c <HAL_ADC_Start+0x14c>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001e0e:	4b46      	ldr	r3, [pc, #280]	; (8001f28 <HAL_ADC_Start+0x168>)
 8001e10:	4013      	ands	r3, r2
 8001e12:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a43      	ldr	r2, [pc, #268]	; (8001f2c <HAL_ADC_Start+0x16c>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d002      	beq.n	8001e2a <HAL_ADC_Start+0x6a>
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	e000      	b.n	8001e2c <HAL_ADC_Start+0x6c>
 8001e2a:	4b41      	ldr	r3, [pc, #260]	; (8001f30 <HAL_ADC_Start+0x170>)
 8001e2c:	687a      	ldr	r2, [r7, #4]
 8001e2e:	6812      	ldr	r2, [r2, #0]
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d002      	beq.n	8001e3a <HAL_ADC_Start+0x7a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001e34:	693b      	ldr	r3, [r7, #16]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d105      	bne.n	8001e46 <HAL_ADC_Start+0x86>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e3e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e4a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e52:	d106      	bne.n	8001e62 <HAL_ADC_Start+0xa2>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e58:	f023 0206 	bic.w	r2, r3, #6
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	659a      	str	r2, [r3, #88]	; 0x58
 8001e60:	e002      	b.n	8001e68 <HAL_ADC_Start+0xa8>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2200      	movs	r2, #0
 8001e66:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	221c      	movs	r2, #28
 8001e6e:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2200      	movs	r2, #0
 8001e74:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a2b      	ldr	r2, [pc, #172]	; (8001f2c <HAL_ADC_Start+0x16c>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d002      	beq.n	8001e88 <HAL_ADC_Start+0xc8>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	e000      	b.n	8001e8a <HAL_ADC_Start+0xca>
 8001e88:	4b29      	ldr	r3, [pc, #164]	; (8001f30 <HAL_ADC_Start+0x170>)
 8001e8a:	687a      	ldr	r2, [r7, #4]
 8001e8c:	6812      	ldr	r2, [r2, #0]
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d008      	beq.n	8001ea4 <HAL_ADC_Start+0xe4>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d005      	beq.n	8001ea4 <HAL_ADC_Start+0xe4>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001e98:	693b      	ldr	r3, [r7, #16]
 8001e9a:	2b05      	cmp	r3, #5
 8001e9c:	d002      	beq.n	8001ea4 <HAL_ADC_Start+0xe4>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	2b09      	cmp	r3, #9
 8001ea2:	d114      	bne.n	8001ece <HAL_ADC_Start+0x10e>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	68db      	ldr	r3, [r3, #12]
 8001eaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d007      	beq.n	8001ec2 <HAL_ADC_Start+0x102>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eb6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001eba:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f7ff fde6 	bl	8001a98 <LL_ADC_REG_StartConversion>
 8001ecc:	e025      	b.n	8001f1a <HAL_ADC_Start+0x15a>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ed2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a13      	ldr	r2, [pc, #76]	; (8001f2c <HAL_ADC_Start+0x16c>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d002      	beq.n	8001eea <HAL_ADC_Start+0x12a>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	e000      	b.n	8001eec <HAL_ADC_Start+0x12c>
 8001eea:	4b11      	ldr	r3, [pc, #68]	; (8001f30 <HAL_ADC_Start+0x170>)
 8001eec:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	68db      	ldr	r3, [r3, #12]
 8001ef2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d00f      	beq.n	8001f1a <HAL_ADC_Start+0x15a>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001efe:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001f02:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	655a      	str	r2, [r3, #84]	; 0x54
 8001f0a:	e006      	b.n	8001f1a <HAL_ADC_Start+0x15a>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2200      	movs	r2, #0
 8001f10:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001f14:	e001      	b.n	8001f1a <HAL_ADC_Start+0x15a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001f16:	2302      	movs	r3, #2
 8001f18:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001f1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	3718      	adds	r7, #24
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	40022300 	.word	0x40022300
 8001f28:	fffff0fe 	.word	0xfffff0fe
 8001f2c:	40022100 	.word	0x40022100
 8001f30:	40022000 	.word	0x40022000

08001f34 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b088      	sub	sp, #32
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
 8001f3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001f3e:	4866      	ldr	r0, [pc, #408]	; (80020d8 <HAL_ADC_PollForConversion+0x1a4>)
 8001f40:	f7ff fd18 	bl	8001974 <LL_ADC_GetMultimode>
 8001f44:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	691b      	ldr	r3, [r3, #16]
 8001f4a:	2b08      	cmp	r3, #8
 8001f4c:	d102      	bne.n	8001f54 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001f4e:	2308      	movs	r3, #8
 8001f50:	61fb      	str	r3, [r7, #28]
 8001f52:	e02a      	b.n	8001faa <HAL_ADC_PollForConversion+0x76>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d005      	beq.n	8001f66 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001f5a:	697b      	ldr	r3, [r7, #20]
 8001f5c:	2b05      	cmp	r3, #5
 8001f5e:	d002      	beq.n	8001f66 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	2b09      	cmp	r3, #9
 8001f64:	d111      	bne.n	8001f8a <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	68db      	ldr	r3, [r3, #12]
 8001f6c:	f003 0301 	and.w	r3, r3, #1
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d007      	beq.n	8001f84 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f78:	f043 0220 	orr.w	r2, r3, #32
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8001f80:	2301      	movs	r3, #1
 8001f82:	e0a4      	b.n	80020ce <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001f84:	2304      	movs	r3, #4
 8001f86:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8001f88:	e00f      	b.n	8001faa <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001f8a:	4853      	ldr	r0, [pc, #332]	; (80020d8 <HAL_ADC_PollForConversion+0x1a4>)
 8001f8c:	f7ff fd00 	bl	8001990 <LL_ADC_GetMultiDMATransfer>
 8001f90:	4603      	mov	r3, r0
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d007      	beq.n	8001fa6 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f9a:	f043 0220 	orr.w	r2, r3, #32
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e093      	b.n	80020ce <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001fa6:	2304      	movs	r3, #4
 8001fa8:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001faa:	f7ff fb9d 	bl	80016e8 <HAL_GetTick>
 8001fae:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001fb0:	e021      	b.n	8001ff6 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fb8:	d01d      	beq.n	8001ff6 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001fba:	f7ff fb95 	bl	80016e8 <HAL_GetTick>
 8001fbe:	4602      	mov	r2, r0
 8001fc0:	693b      	ldr	r3, [r7, #16]
 8001fc2:	1ad3      	subs	r3, r2, r3
 8001fc4:	683a      	ldr	r2, [r7, #0]
 8001fc6:	429a      	cmp	r2, r3
 8001fc8:	d302      	bcc.n	8001fd0 <HAL_ADC_PollForConversion+0x9c>
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d112      	bne.n	8001ff6 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	681a      	ldr	r2, [r3, #0]
 8001fd6:	69fb      	ldr	r3, [r7, #28]
 8001fd8:	4013      	ands	r3, r2
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d10b      	bne.n	8001ff6 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fe2:	f043 0204 	orr.w	r2, r3, #4
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2200      	movs	r2, #0
 8001fee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8001ff2:	2303      	movs	r3, #3
 8001ff4:	e06b      	b.n	80020ce <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	681a      	ldr	r2, [r3, #0]
 8001ffc:	69fb      	ldr	r3, [r7, #28]
 8001ffe:	4013      	ands	r3, r2
 8002000:	2b00      	cmp	r3, #0
 8002002:	d0d6      	beq.n	8001fb2 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002008:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4618      	mov	r0, r3
 8002016:	f7ff fc1f 	bl	8001858 <LL_ADC_REG_IsTriggerSourceSWStart>
 800201a:	4603      	mov	r3, r0
 800201c:	2b00      	cmp	r3, #0
 800201e:	d01c      	beq.n	800205a <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	7d5b      	ldrb	r3, [r3, #21]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d118      	bne.n	800205a <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f003 0308 	and.w	r3, r3, #8
 8002032:	2b08      	cmp	r3, #8
 8002034:	d111      	bne.n	800205a <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800203a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002046:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800204a:	2b00      	cmp	r3, #0
 800204c:	d105      	bne.n	800205a <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002052:	f043 0201 	orr.w	r2, r3, #1
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4a1f      	ldr	r2, [pc, #124]	; (80020dc <HAL_ADC_PollForConversion+0x1a8>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d002      	beq.n	800206a <HAL_ADC_PollForConversion+0x136>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	e000      	b.n	800206c <HAL_ADC_PollForConversion+0x138>
 800206a:	4b1d      	ldr	r3, [pc, #116]	; (80020e0 <HAL_ADC_PollForConversion+0x1ac>)
 800206c:	687a      	ldr	r2, [r7, #4]
 800206e:	6812      	ldr	r2, [r2, #0]
 8002070:	4293      	cmp	r3, r2
 8002072:	d008      	beq.n	8002086 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d005      	beq.n	8002086 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800207a:	697b      	ldr	r3, [r7, #20]
 800207c:	2b05      	cmp	r3, #5
 800207e:	d002      	beq.n	8002086 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	2b09      	cmp	r3, #9
 8002084:	d104      	bne.n	8002090 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	68db      	ldr	r3, [r3, #12]
 800208c:	61bb      	str	r3, [r7, #24]
 800208e:	e00c      	b.n	80020aa <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a11      	ldr	r2, [pc, #68]	; (80020dc <HAL_ADC_PollForConversion+0x1a8>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d002      	beq.n	80020a0 <HAL_ADC_PollForConversion+0x16c>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	e000      	b.n	80020a2 <HAL_ADC_PollForConversion+0x16e>
 80020a0:	4b0f      	ldr	r3, [pc, #60]	; (80020e0 <HAL_ADC_PollForConversion+0x1ac>)
 80020a2:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	68db      	ldr	r3, [r3, #12]
 80020a8:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80020aa:	69fb      	ldr	r3, [r7, #28]
 80020ac:	2b08      	cmp	r3, #8
 80020ae:	d104      	bne.n	80020ba <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	2208      	movs	r2, #8
 80020b6:	601a      	str	r2, [r3, #0]
 80020b8:	e008      	b.n	80020cc <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80020ba:	69bb      	ldr	r3, [r7, #24]
 80020bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d103      	bne.n	80020cc <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	220c      	movs	r2, #12
 80020ca:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80020cc:	2300      	movs	r3, #0
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	3720      	adds	r7, #32
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	40022300 	.word	0x40022300
 80020dc:	40022100 	.word	0x40022100
 80020e0:	40022000 	.word	0x40022000

080020e4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b083      	sub	sp, #12
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	370c      	adds	r7, #12
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr
	...

08002100 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002100:	b590      	push	{r4, r7, lr}
 8002102:	b0a1      	sub	sp, #132	; 0x84
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
 8002108:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800210a:	2300      	movs	r3, #0
 800210c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002110:	2300      	movs	r3, #0
 8002112:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	68db      	ldr	r3, [r3, #12]
 8002118:	4a9a      	ldr	r2, [pc, #616]	; (8002384 <HAL_ADC_ConfigChannel+0x284>)
 800211a:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002122:	2b01      	cmp	r3, #1
 8002124:	d101      	bne.n	800212a <HAL_ADC_ConfigChannel+0x2a>
 8002126:	2302      	movs	r3, #2
 8002128:	e2bc      	b.n	80026a4 <HAL_ADC_ConfigChannel+0x5a4>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2201      	movs	r2, #1
 800212e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4618      	mov	r0, r3
 8002138:	f7ff fcc2 	bl	8001ac0 <LL_ADC_REG_IsConversionOngoing>
 800213c:	4603      	mov	r3, r0
 800213e:	2b00      	cmp	r3, #0
 8002140:	f040 82a1 	bne.w	8002686 <HAL_ADC_ConfigChannel+0x586>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800214c:	2b00      	cmp	r3, #0
 800214e:	d108      	bne.n	8002162 <HAL_ADC_ConfigChannel+0x62>
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	0e9b      	lsrs	r3, r3, #26
 8002156:	f003 031f 	and.w	r3, r3, #31
 800215a:	2201      	movs	r2, #1
 800215c:	fa02 f303 	lsl.w	r3, r2, r3
 8002160:	e016      	b.n	8002190 <HAL_ADC_ConfigChannel+0x90>
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002168:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800216a:	fa93 f3a3 	rbit	r3, r3
 800216e:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002170:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002172:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002174:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002176:	2b00      	cmp	r3, #0
 8002178:	d101      	bne.n	800217e <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 800217a:	2320      	movs	r3, #32
 800217c:	e003      	b.n	8002186 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 800217e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002180:	fab3 f383 	clz	r3, r3
 8002184:	b2db      	uxtb	r3, r3
 8002186:	f003 031f 	and.w	r3, r3, #31
 800218a:	2201      	movs	r2, #1
 800218c:	fa02 f303 	lsl.w	r3, r2, r3
 8002190:	687a      	ldr	r2, [r7, #4]
 8002192:	6812      	ldr	r2, [r2, #0]
 8002194:	69d1      	ldr	r1, [r2, #28]
 8002196:	687a      	ldr	r2, [r7, #4]
 8002198:	6812      	ldr	r2, [r2, #0]
 800219a:	430b      	orrs	r3, r1
 800219c:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6818      	ldr	r0, [r3, #0]
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	6859      	ldr	r1, [r3, #4]
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	461a      	mov	r2, r3
 80021ac:	f7ff fb67 	bl	800187e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4618      	mov	r0, r3
 80021b6:	f7ff fc83 	bl	8001ac0 <LL_ADC_REG_IsConversionOngoing>
 80021ba:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4618      	mov	r0, r3
 80021c2:	f7ff fc90 	bl	8001ae6 <LL_ADC_INJ_IsConversionOngoing>
 80021c6:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80021c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	f040 80a0 	bne.w	8002310 <HAL_ADC_ConfigChannel+0x210>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80021d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	f040 809c 	bne.w	8002310 <HAL_ADC_ConfigChannel+0x210>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6818      	ldr	r0, [r3, #0]
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	6819      	ldr	r1, [r3, #0]
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	689b      	ldr	r3, [r3, #8]
 80021e4:	461a      	mov	r2, r3
 80021e6:	f7ff fb76 	bl	80018d6 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	68db      	ldr	r3, [r3, #12]
 80021f0:	f003 0310 	and.w	r3, r3, #16
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d10b      	bne.n	8002210 <HAL_ADC_ConfigChannel+0x110>
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	695a      	ldr	r2, [r3, #20]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	68db      	ldr	r3, [r3, #12]
 8002202:	089b      	lsrs	r3, r3, #2
 8002204:	f003 0307 	and.w	r3, r3, #7
 8002208:	005b      	lsls	r3, r3, #1
 800220a:	fa02 f303 	lsl.w	r3, r2, r3
 800220e:	e00a      	b.n	8002226 <HAL_ADC_ConfigChannel+0x126>
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	695a      	ldr	r2, [r3, #20]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	68db      	ldr	r3, [r3, #12]
 800221a:	089b      	lsrs	r3, r3, #2
 800221c:	f003 0304 	and.w	r3, r3, #4
 8002220:	005b      	lsls	r3, r3, #1
 8002222:	fa02 f303 	lsl.w	r3, r2, r3
 8002226:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	691b      	ldr	r3, [r3, #16]
 800222c:	2b04      	cmp	r3, #4
 800222e:	d027      	beq.n	8002280 <HAL_ADC_ConfigChannel+0x180>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6818      	ldr	r0, [r3, #0]
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	6919      	ldr	r1, [r3, #16]
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	681a      	ldr	r2, [r3, #0]
 800223c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800223e:	f7ff fab7 	bl	80017b0 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6818      	ldr	r0, [r3, #0]
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	6919      	ldr	r1, [r3, #16]
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	7e5b      	ldrb	r3, [r3, #25]
 800224e:	2b01      	cmp	r3, #1
 8002250:	d102      	bne.n	8002258 <HAL_ADC_ConfigChannel+0x158>
 8002252:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002256:	e000      	b.n	800225a <HAL_ADC_ConfigChannel+0x15a>
 8002258:	2300      	movs	r3, #0
 800225a:	461a      	mov	r2, r3
 800225c:	f7ff fae1 	bl	8001822 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6818      	ldr	r0, [r3, #0]
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	6919      	ldr	r1, [r3, #16]
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	7e1b      	ldrb	r3, [r3, #24]
 800226c:	2b01      	cmp	r3, #1
 800226e:	d102      	bne.n	8002276 <HAL_ADC_ConfigChannel+0x176>
 8002270:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002274:	e000      	b.n	8002278 <HAL_ADC_ConfigChannel+0x178>
 8002276:	2300      	movs	r3, #0
 8002278:	461a      	mov	r2, r3
 800227a:	f7ff fab9 	bl	80017f0 <LL_ADC_SetDataRightShift>
 800227e:	e047      	b.n	8002310 <HAL_ADC_ConfigChannel+0x210>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002286:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	069b      	lsls	r3, r3, #26
 8002290:	429a      	cmp	r2, r3
 8002292:	d107      	bne.n	80022a4 <HAL_ADC_ConfigChannel+0x1a4>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80022a2:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80022aa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	069b      	lsls	r3, r3, #26
 80022b4:	429a      	cmp	r2, r3
 80022b6:	d107      	bne.n	80022c8 <HAL_ADC_ConfigChannel+0x1c8>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80022c6:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80022ce:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	069b      	lsls	r3, r3, #26
 80022d8:	429a      	cmp	r2, r3
 80022da:	d107      	bne.n	80022ec <HAL_ADC_ConfigChannel+0x1ec>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80022ea:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80022f2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	069b      	lsls	r3, r3, #26
 80022fc:	429a      	cmp	r2, r3
 80022fe:	d107      	bne.n	8002310 <HAL_ADC_ConfigChannel+0x210>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800230e:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4618      	mov	r0, r3
 8002316:	f7ff fbab 	bl	8001a70 <LL_ADC_IsEnabled>
 800231a:	4603      	mov	r3, r0
 800231c:	2b00      	cmp	r3, #0
 800231e:	f040 81bb 	bne.w	8002698 <HAL_ADC_ConfigChannel+0x598>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6818      	ldr	r0, [r3, #0]
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	6819      	ldr	r1, [r3, #0]
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	68db      	ldr	r3, [r3, #12]
 800232e:	461a      	mov	r2, r3
 8002330:	f7ff fafc 	bl	800192c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	68db      	ldr	r3, [r3, #12]
 8002338:	4a12      	ldr	r2, [pc, #72]	; (8002384 <HAL_ADC_ConfigChannel+0x284>)
 800233a:	4293      	cmp	r3, r2
 800233c:	f040 8130 	bne.w	80025a0 <HAL_ADC_ConfigChannel+0x4a0>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800234c:	2b00      	cmp	r3, #0
 800234e:	d10b      	bne.n	8002368 <HAL_ADC_ConfigChannel+0x268>
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	0e9b      	lsrs	r3, r3, #26
 8002356:	3301      	adds	r3, #1
 8002358:	f003 031f 	and.w	r3, r3, #31
 800235c:	2b09      	cmp	r3, #9
 800235e:	bf94      	ite	ls
 8002360:	2301      	movls	r3, #1
 8002362:	2300      	movhi	r3, #0
 8002364:	b2db      	uxtb	r3, r3
 8002366:	e01b      	b.n	80023a0 <HAL_ADC_ConfigChannel+0x2a0>
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800236e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002370:	fa93 f3a3 	rbit	r3, r3
 8002374:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002376:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002378:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 800237a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800237c:	2b00      	cmp	r3, #0
 800237e:	d103      	bne.n	8002388 <HAL_ADC_ConfigChannel+0x288>
    return 32U;
 8002380:	2320      	movs	r3, #32
 8002382:	e005      	b.n	8002390 <HAL_ADC_ConfigChannel+0x290>
 8002384:	47ff0000 	.word	0x47ff0000
  return __builtin_clz(value);
 8002388:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800238a:	fab3 f383 	clz	r3, r3
 800238e:	b2db      	uxtb	r3, r3
 8002390:	3301      	adds	r3, #1
 8002392:	f003 031f 	and.w	r3, r3, #31
 8002396:	2b09      	cmp	r3, #9
 8002398:	bf94      	ite	ls
 800239a:	2301      	movls	r3, #1
 800239c:	2300      	movhi	r3, #0
 800239e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d079      	beq.n	8002498 <HAL_ADC_ConfigChannel+0x398>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d107      	bne.n	80023c0 <HAL_ADC_ConfigChannel+0x2c0>
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	0e9b      	lsrs	r3, r3, #26
 80023b6:	3301      	adds	r3, #1
 80023b8:	069b      	lsls	r3, r3, #26
 80023ba:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80023be:	e015      	b.n	80023ec <HAL_ADC_ConfigChannel+0x2ec>
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023c8:	fa93 f3a3 	rbit	r3, r3
 80023cc:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80023ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023d0:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80023d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d101      	bne.n	80023dc <HAL_ADC_ConfigChannel+0x2dc>
    return 32U;
 80023d8:	2320      	movs	r3, #32
 80023da:	e003      	b.n	80023e4 <HAL_ADC_ConfigChannel+0x2e4>
  return __builtin_clz(value);
 80023dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80023de:	fab3 f383 	clz	r3, r3
 80023e2:	b2db      	uxtb	r3, r3
 80023e4:	3301      	adds	r3, #1
 80023e6:	069b      	lsls	r3, r3, #26
 80023e8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d109      	bne.n	800240c <HAL_ADC_ConfigChannel+0x30c>
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	0e9b      	lsrs	r3, r3, #26
 80023fe:	3301      	adds	r3, #1
 8002400:	f003 031f 	and.w	r3, r3, #31
 8002404:	2101      	movs	r1, #1
 8002406:	fa01 f303 	lsl.w	r3, r1, r3
 800240a:	e017      	b.n	800243c <HAL_ADC_ConfigChannel+0x33c>
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002412:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002414:	fa93 f3a3 	rbit	r3, r3
 8002418:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800241a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800241c:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 800241e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002420:	2b00      	cmp	r3, #0
 8002422:	d101      	bne.n	8002428 <HAL_ADC_ConfigChannel+0x328>
    return 32U;
 8002424:	2320      	movs	r3, #32
 8002426:	e003      	b.n	8002430 <HAL_ADC_ConfigChannel+0x330>
  return __builtin_clz(value);
 8002428:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800242a:	fab3 f383 	clz	r3, r3
 800242e:	b2db      	uxtb	r3, r3
 8002430:	3301      	adds	r3, #1
 8002432:	f003 031f 	and.w	r3, r3, #31
 8002436:	2101      	movs	r1, #1
 8002438:	fa01 f303 	lsl.w	r3, r1, r3
 800243c:	ea42 0103 	orr.w	r1, r2, r3
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002448:	2b00      	cmp	r3, #0
 800244a:	d10a      	bne.n	8002462 <HAL_ADC_ConfigChannel+0x362>
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	0e9b      	lsrs	r3, r3, #26
 8002452:	3301      	adds	r3, #1
 8002454:	f003 021f 	and.w	r2, r3, #31
 8002458:	4613      	mov	r3, r2
 800245a:	005b      	lsls	r3, r3, #1
 800245c:	4413      	add	r3, r2
 800245e:	051b      	lsls	r3, r3, #20
 8002460:	e018      	b.n	8002494 <HAL_ADC_ConfigChannel+0x394>
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002468:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800246a:	fa93 f3a3 	rbit	r3, r3
 800246e:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8002470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002472:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8002474:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002476:	2b00      	cmp	r3, #0
 8002478:	d101      	bne.n	800247e <HAL_ADC_ConfigChannel+0x37e>
    return 32U;
 800247a:	2320      	movs	r3, #32
 800247c:	e003      	b.n	8002486 <HAL_ADC_ConfigChannel+0x386>
  return __builtin_clz(value);
 800247e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002480:	fab3 f383 	clz	r3, r3
 8002484:	b2db      	uxtb	r3, r3
 8002486:	3301      	adds	r3, #1
 8002488:	f003 021f 	and.w	r2, r3, #31
 800248c:	4613      	mov	r3, r2
 800248e:	005b      	lsls	r3, r3, #1
 8002490:	4413      	add	r3, r2
 8002492:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002494:	430b      	orrs	r3, r1
 8002496:	e07e      	b.n	8002596 <HAL_ADC_ConfigChannel+0x496>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d107      	bne.n	80024b4 <HAL_ADC_ConfigChannel+0x3b4>
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	0e9b      	lsrs	r3, r3, #26
 80024aa:	3301      	adds	r3, #1
 80024ac:	069b      	lsls	r3, r3, #26
 80024ae:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80024b2:	e015      	b.n	80024e0 <HAL_ADC_ConfigChannel+0x3e0>
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024bc:	fa93 f3a3 	rbit	r3, r3
 80024c0:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80024c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80024c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d101      	bne.n	80024d0 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80024cc:	2320      	movs	r3, #32
 80024ce:	e003      	b.n	80024d8 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80024d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024d2:	fab3 f383 	clz	r3, r3
 80024d6:	b2db      	uxtb	r3, r3
 80024d8:	3301      	adds	r3, #1
 80024da:	069b      	lsls	r3, r3, #26
 80024dc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d109      	bne.n	8002500 <HAL_ADC_ConfigChannel+0x400>
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	0e9b      	lsrs	r3, r3, #26
 80024f2:	3301      	adds	r3, #1
 80024f4:	f003 031f 	and.w	r3, r3, #31
 80024f8:	2101      	movs	r1, #1
 80024fa:	fa01 f303 	lsl.w	r3, r1, r3
 80024fe:	e017      	b.n	8002530 <HAL_ADC_ConfigChannel+0x430>
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002506:	69fb      	ldr	r3, [r7, #28]
 8002508:	fa93 f3a3 	rbit	r3, r3
 800250c:	61bb      	str	r3, [r7, #24]
  return result;
 800250e:	69bb      	ldr	r3, [r7, #24]
 8002510:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002512:	6a3b      	ldr	r3, [r7, #32]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d101      	bne.n	800251c <HAL_ADC_ConfigChannel+0x41c>
    return 32U;
 8002518:	2320      	movs	r3, #32
 800251a:	e003      	b.n	8002524 <HAL_ADC_ConfigChannel+0x424>
  return __builtin_clz(value);
 800251c:	6a3b      	ldr	r3, [r7, #32]
 800251e:	fab3 f383 	clz	r3, r3
 8002522:	b2db      	uxtb	r3, r3
 8002524:	3301      	adds	r3, #1
 8002526:	f003 031f 	and.w	r3, r3, #31
 800252a:	2101      	movs	r1, #1
 800252c:	fa01 f303 	lsl.w	r3, r1, r3
 8002530:	ea42 0103 	orr.w	r1, r2, r3
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800253c:	2b00      	cmp	r3, #0
 800253e:	d10d      	bne.n	800255c <HAL_ADC_ConfigChannel+0x45c>
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	0e9b      	lsrs	r3, r3, #26
 8002546:	3301      	adds	r3, #1
 8002548:	f003 021f 	and.w	r2, r3, #31
 800254c:	4613      	mov	r3, r2
 800254e:	005b      	lsls	r3, r3, #1
 8002550:	4413      	add	r3, r2
 8002552:	3b1e      	subs	r3, #30
 8002554:	051b      	lsls	r3, r3, #20
 8002556:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800255a:	e01b      	b.n	8002594 <HAL_ADC_ConfigChannel+0x494>
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	fa93 f3a3 	rbit	r3, r3
 8002568:	60fb      	str	r3, [r7, #12]
  return result;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d101      	bne.n	8002578 <HAL_ADC_ConfigChannel+0x478>
    return 32U;
 8002574:	2320      	movs	r3, #32
 8002576:	e003      	b.n	8002580 <HAL_ADC_ConfigChannel+0x480>
  return __builtin_clz(value);
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	fab3 f383 	clz	r3, r3
 800257e:	b2db      	uxtb	r3, r3
 8002580:	3301      	adds	r3, #1
 8002582:	f003 021f 	and.w	r2, r3, #31
 8002586:	4613      	mov	r3, r2
 8002588:	005b      	lsls	r3, r3, #1
 800258a:	4413      	add	r3, r2
 800258c:	3b1e      	subs	r3, #30
 800258e:	051b      	lsls	r3, r3, #20
 8002590:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002594:	430b      	orrs	r3, r1
 8002596:	683a      	ldr	r2, [r7, #0]
 8002598:	6892      	ldr	r2, [r2, #8]
 800259a:	4619      	mov	r1, r3
 800259c:	f7ff f99b 	bl	80018d6 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	da77      	bge.n	8002698 <HAL_ADC_ConfigChannel+0x598>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80025a8:	4840      	ldr	r0, [pc, #256]	; (80026ac <HAL_ADC_ConfigChannel+0x5ac>)
 80025aa:	f7ff f8f3 	bl	8001794 <LL_ADC_GetCommonPathInternalCh>
 80025ae:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80025b0:	483f      	ldr	r0, [pc, #252]	; (80026b0 <HAL_ADC_ConfigChannel+0x5b0>)
 80025b2:	f7ff fa5d 	bl	8001a70 <LL_ADC_IsEnabled>
 80025b6:	4604      	mov	r4, r0
 80025b8:	483e      	ldr	r0, [pc, #248]	; (80026b4 <HAL_ADC_ConfigChannel+0x5b4>)
 80025ba:	f7ff fa59 	bl	8001a70 <LL_ADC_IsEnabled>
 80025be:	4603      	mov	r3, r0
 80025c0:	4323      	orrs	r3, r4
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d155      	bne.n	8002672 <HAL_ADC_ConfigChannel+0x572>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a3b      	ldr	r2, [pc, #236]	; (80026b8 <HAL_ADC_ConfigChannel+0x5b8>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d122      	bne.n	8002616 <HAL_ADC_ConfigChannel+0x516>
 80025d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025d2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d11d      	bne.n	8002616 <HAL_ADC_ConfigChannel+0x516>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4a35      	ldr	r2, [pc, #212]	; (80026b4 <HAL_ADC_ConfigChannel+0x5b4>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d159      	bne.n	8002698 <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80025e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025e6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80025ea:	4619      	mov	r1, r3
 80025ec:	482f      	ldr	r0, [pc, #188]	; (80026ac <HAL_ADC_ConfigChannel+0x5ac>)
 80025ee:	f7ff f8be 	bl	800176e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80025f2:	4b32      	ldr	r3, [pc, #200]	; (80026bc <HAL_ADC_ConfigChannel+0x5bc>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	099b      	lsrs	r3, r3, #6
 80025f8:	4a31      	ldr	r2, [pc, #196]	; (80026c0 <HAL_ADC_ConfigChannel+0x5c0>)
 80025fa:	fba2 2303 	umull	r2, r3, r2, r3
 80025fe:	099b      	lsrs	r3, r3, #6
 8002600:	3301      	adds	r3, #1
 8002602:	005b      	lsls	r3, r3, #1
 8002604:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002606:	e002      	b.n	800260e <HAL_ADC_ConfigChannel+0x50e>
              {
                wait_loop_index--;
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	3b01      	subs	r3, #1
 800260c:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800260e:	68bb      	ldr	r3, [r7, #8]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d1f9      	bne.n	8002608 <HAL_ADC_ConfigChannel+0x508>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002614:	e040      	b.n	8002698 <HAL_ADC_ConfigChannel+0x598>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a2a      	ldr	r2, [pc, #168]	; (80026c4 <HAL_ADC_ConfigChannel+0x5c4>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d111      	bne.n	8002644 <HAL_ADC_ConfigChannel+0x544>
 8002620:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002622:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002626:	2b00      	cmp	r3, #0
 8002628:	d10c      	bne.n	8002644 <HAL_ADC_ConfigChannel+0x544>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4a21      	ldr	r2, [pc, #132]	; (80026b4 <HAL_ADC_ConfigChannel+0x5b4>)
 8002630:	4293      	cmp	r3, r2
 8002632:	d131      	bne.n	8002698 <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002634:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002636:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800263a:	4619      	mov	r1, r3
 800263c:	481b      	ldr	r0, [pc, #108]	; (80026ac <HAL_ADC_ConfigChannel+0x5ac>)
 800263e:	f7ff f896 	bl	800176e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002642:	e029      	b.n	8002698 <HAL_ADC_ConfigChannel+0x598>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a1f      	ldr	r2, [pc, #124]	; (80026c8 <HAL_ADC_ConfigChannel+0x5c8>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d124      	bne.n	8002698 <HAL_ADC_ConfigChannel+0x598>
 800264e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002650:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002654:	2b00      	cmp	r3, #0
 8002656:	d11f      	bne.n	8002698 <HAL_ADC_ConfigChannel+0x598>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a15      	ldr	r2, [pc, #84]	; (80026b4 <HAL_ADC_ConfigChannel+0x5b4>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d11a      	bne.n	8002698 <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002662:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002664:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002668:	4619      	mov	r1, r3
 800266a:	4810      	ldr	r0, [pc, #64]	; (80026ac <HAL_ADC_ConfigChannel+0x5ac>)
 800266c:	f7ff f87f 	bl	800176e <LL_ADC_SetCommonPathInternalCh>
 8002670:	e012      	b.n	8002698 <HAL_ADC_ConfigChannel+0x598>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002676:	f043 0220 	orr.w	r2, r3, #32
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002684:	e008      	b.n	8002698 <HAL_ADC_ConfigChannel+0x598>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800268a:	f043 0220 	orr.w	r2, r3, #32
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2200      	movs	r2, #0
 800269c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80026a0:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	3784      	adds	r7, #132	; 0x84
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd90      	pop	{r4, r7, pc}
 80026ac:	40022300 	.word	0x40022300
 80026b0:	40022000 	.word	0x40022000
 80026b4:	40022100 	.word	0x40022100
 80026b8:	cb840000 	.word	0xcb840000
 80026bc:	24000000 	.word	0x24000000
 80026c0:	053e2d63 	.word	0x053e2d63
 80026c4:	bac04000 	.word	0xbac04000
 80026c8:	cfb80000 	.word	0xcfb80000

080026cc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b084      	sub	sp, #16
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4618      	mov	r0, r3
 80026da:	f7ff f9c9 	bl	8001a70 <LL_ADC_IsEnabled>
 80026de:	4603      	mov	r3, r0
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d161      	bne.n	80027a8 <ADC_Enable+0xdc>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	689a      	ldr	r2, [r3, #8]
 80026ea:	4b32      	ldr	r3, [pc, #200]	; (80027b4 <ADC_Enable+0xe8>)
 80026ec:	4013      	ands	r3, r2
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d00d      	beq.n	800270e <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026f6:	f043 0210 	orr.w	r2, r3, #16
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002702:	f043 0201 	orr.w	r2, r3, #1
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800270a:	2301      	movs	r3, #1
 800270c:	e04d      	b.n	80027aa <ADC_Enable+0xde>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4618      	mov	r0, r3
 8002714:	f7ff f998 	bl	8001a48 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002718:	f7fe ffe6 	bl	80016e8 <HAL_GetTick>
 800271c:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800271e:	4826      	ldr	r0, [pc, #152]	; (80027b8 <ADC_Enable+0xec>)
 8002720:	f7ff f928 	bl	8001974 <LL_ADC_GetMultimode>
 8002724:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a24      	ldr	r2, [pc, #144]	; (80027bc <ADC_Enable+0xf0>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d002      	beq.n	8002736 <ADC_Enable+0x6a>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	e000      	b.n	8002738 <ADC_Enable+0x6c>
 8002736:	4b22      	ldr	r3, [pc, #136]	; (80027c0 <ADC_Enable+0xf4>)
 8002738:	687a      	ldr	r2, [r7, #4]
 800273a:	6812      	ldr	r2, [r2, #0]
 800273c:	4293      	cmp	r3, r2
 800273e:	d02c      	beq.n	800279a <ADC_Enable+0xce>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d130      	bne.n	80027a8 <ADC_Enable+0xdc>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002746:	e028      	b.n	800279a <ADC_Enable+0xce>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4618      	mov	r0, r3
 800274e:	f7ff f98f 	bl	8001a70 <LL_ADC_IsEnabled>
 8002752:	4603      	mov	r3, r0
 8002754:	2b00      	cmp	r3, #0
 8002756:	d104      	bne.n	8002762 <ADC_Enable+0x96>
        {
          LL_ADC_Enable(hadc->Instance);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4618      	mov	r0, r3
 800275e:	f7ff f973 	bl	8001a48 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002762:	f7fe ffc1 	bl	80016e8 <HAL_GetTick>
 8002766:	4602      	mov	r2, r0
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	1ad3      	subs	r3, r2, r3
 800276c:	2b02      	cmp	r3, #2
 800276e:	d914      	bls.n	800279a <ADC_Enable+0xce>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f003 0301 	and.w	r3, r3, #1
 800277a:	2b01      	cmp	r3, #1
 800277c:	d00d      	beq.n	800279a <ADC_Enable+0xce>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002782:	f043 0210 	orr.w	r2, r3, #16
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800278e:	f043 0201 	orr.w	r2, r3, #1
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8002796:	2301      	movs	r3, #1
 8002798:	e007      	b.n	80027aa <ADC_Enable+0xde>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f003 0301 	and.w	r3, r3, #1
 80027a4:	2b01      	cmp	r3, #1
 80027a6:	d1cf      	bne.n	8002748 <ADC_Enable+0x7c>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80027a8:	2300      	movs	r3, #0
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	3710      	adds	r7, #16
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}
 80027b2:	bf00      	nop
 80027b4:	8000003f 	.word	0x8000003f
 80027b8:	40022300 	.word	0x40022300
 80027bc:	40022100 	.word	0x40022100
 80027c0:	40022000 	.word	0x40022000

080027c4 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b084      	sub	sp, #16
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80027cc:	4b5f      	ldr	r3, [pc, #380]	; (800294c <ADC_ConfigureBoostMode+0x188>)
 80027ce:	689b      	ldr	r3, [r3, #8]
 80027d0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d01c      	beq.n	8002812 <ADC_ConfigureBoostMode+0x4e>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80027d8:	f002 fd8e 	bl	80052f8 <HAL_RCC_GetHCLKFreq>
 80027dc:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80027e6:	d010      	beq.n	800280a <ADC_ConfigureBoostMode+0x46>
 80027e8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80027ec:	d871      	bhi.n	80028d2 <ADC_ConfigureBoostMode+0x10e>
 80027ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027f2:	d002      	beq.n	80027fa <ADC_ConfigureBoostMode+0x36>
 80027f4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80027f8:	d16b      	bne.n	80028d2 <ADC_ConfigureBoostMode+0x10e>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	0c1b      	lsrs	r3, r3, #16
 8002800:	68fa      	ldr	r2, [r7, #12]
 8002802:	fbb2 f3f3 	udiv	r3, r2, r3
 8002806:	60fb      	str	r3, [r7, #12]
        break;
 8002808:	e066      	b.n	80028d8 <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	089b      	lsrs	r3, r3, #2
 800280e:	60fb      	str	r3, [r7, #12]
        break;
 8002810:	e062      	b.n	80028d8 <ADC_ConfigureBoostMode+0x114>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002812:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002816:	f003 fd03 	bl	8006220 <HAL_RCCEx_GetPeriphCLKFreq>
 800281a:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002824:	d051      	beq.n	80028ca <ADC_ConfigureBoostMode+0x106>
 8002826:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800282a:	d854      	bhi.n	80028d6 <ADC_ConfigureBoostMode+0x112>
 800282c:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002830:	d047      	beq.n	80028c2 <ADC_ConfigureBoostMode+0xfe>
 8002832:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002836:	d84e      	bhi.n	80028d6 <ADC_ConfigureBoostMode+0x112>
 8002838:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800283c:	d03d      	beq.n	80028ba <ADC_ConfigureBoostMode+0xf6>
 800283e:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002842:	d848      	bhi.n	80028d6 <ADC_ConfigureBoostMode+0x112>
 8002844:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002848:	d033      	beq.n	80028b2 <ADC_ConfigureBoostMode+0xee>
 800284a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800284e:	d842      	bhi.n	80028d6 <ADC_ConfigureBoostMode+0x112>
 8002850:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002854:	d029      	beq.n	80028aa <ADC_ConfigureBoostMode+0xe6>
 8002856:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800285a:	d83c      	bhi.n	80028d6 <ADC_ConfigureBoostMode+0x112>
 800285c:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002860:	d01a      	beq.n	8002898 <ADC_ConfigureBoostMode+0xd4>
 8002862:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002866:	d836      	bhi.n	80028d6 <ADC_ConfigureBoostMode+0x112>
 8002868:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800286c:	d014      	beq.n	8002898 <ADC_ConfigureBoostMode+0xd4>
 800286e:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002872:	d830      	bhi.n	80028d6 <ADC_ConfigureBoostMode+0x112>
 8002874:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002878:	d00e      	beq.n	8002898 <ADC_ConfigureBoostMode+0xd4>
 800287a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800287e:	d82a      	bhi.n	80028d6 <ADC_ConfigureBoostMode+0x112>
 8002880:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002884:	d008      	beq.n	8002898 <ADC_ConfigureBoostMode+0xd4>
 8002886:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800288a:	d824      	bhi.n	80028d6 <ADC_ConfigureBoostMode+0x112>
 800288c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002890:	d002      	beq.n	8002898 <ADC_ConfigureBoostMode+0xd4>
 8002892:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002896:	d11e      	bne.n	80028d6 <ADC_ConfigureBoostMode+0x112>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	0c9b      	lsrs	r3, r3, #18
 800289e:	005b      	lsls	r3, r3, #1
 80028a0:	68fa      	ldr	r2, [r7, #12]
 80028a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80028a6:	60fb      	str	r3, [r7, #12]
        break;
 80028a8:	e016      	b.n	80028d8 <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	091b      	lsrs	r3, r3, #4
 80028ae:	60fb      	str	r3, [r7, #12]
        break;
 80028b0:	e012      	b.n	80028d8 <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	095b      	lsrs	r3, r3, #5
 80028b6:	60fb      	str	r3, [r7, #12]
        break;
 80028b8:	e00e      	b.n	80028d8 <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	099b      	lsrs	r3, r3, #6
 80028be:	60fb      	str	r3, [r7, #12]
        break;
 80028c0:	e00a      	b.n	80028d8 <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	09db      	lsrs	r3, r3, #7
 80028c6:	60fb      	str	r3, [r7, #12]
        break;
 80028c8:	e006      	b.n	80028d8 <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	0a1b      	lsrs	r3, r3, #8
 80028ce:	60fb      	str	r3, [r7, #12]
        break;
 80028d0:	e002      	b.n	80028d8 <ADC_ConfigureBoostMode+0x114>
        break;
 80028d2:	bf00      	nop
 80028d4:	e000      	b.n	80028d8 <ADC_ConfigureBoostMode+0x114>
      default:
        break;
 80028d6:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	085b      	lsrs	r3, r3, #1
 80028dc:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	4a1b      	ldr	r2, [pc, #108]	; (8002950 <ADC_ConfigureBoostMode+0x18c>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d808      	bhi.n	80028f8 <ADC_ConfigureBoostMode+0x134>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	689a      	ldr	r2, [r3, #8]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80028f4:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80028f6:	e025      	b.n	8002944 <ADC_ConfigureBoostMode+0x180>
  else if (freq <= 12500000UL)
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	4a16      	ldr	r2, [pc, #88]	; (8002954 <ADC_ConfigureBoostMode+0x190>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d80a      	bhi.n	8002916 <ADC_ConfigureBoostMode+0x152>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002912:	609a      	str	r2, [r3, #8]
}
 8002914:	e016      	b.n	8002944 <ADC_ConfigureBoostMode+0x180>
  else if (freq <= 25000000UL)
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	4a0f      	ldr	r2, [pc, #60]	; (8002958 <ADC_ConfigureBoostMode+0x194>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d80a      	bhi.n	8002934 <ADC_ConfigureBoostMode+0x170>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	689b      	ldr	r3, [r3, #8]
 8002924:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002930:	609a      	str	r2, [r3, #8]
}
 8002932:	e007      	b.n	8002944 <ADC_ConfigureBoostMode+0x180>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	689a      	ldr	r2, [r3, #8]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8002942:	609a      	str	r2, [r3, #8]
}
 8002944:	bf00      	nop
 8002946:	3710      	adds	r7, #16
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}
 800294c:	40022300 	.word	0x40022300
 8002950:	005f5e10 	.word	0x005f5e10
 8002954:	00bebc20 	.word	0x00bebc20
 8002958:	017d7840 	.word	0x017d7840

0800295c <LL_ADC_IsEnabled>:
{
 800295c:	b480      	push	{r7}
 800295e:	b083      	sub	sp, #12
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	f003 0301 	and.w	r3, r3, #1
 800296c:	2b01      	cmp	r3, #1
 800296e:	d101      	bne.n	8002974 <LL_ADC_IsEnabled+0x18>
 8002970:	2301      	movs	r3, #1
 8002972:	e000      	b.n	8002976 <LL_ADC_IsEnabled+0x1a>
 8002974:	2300      	movs	r3, #0
}
 8002976:	4618      	mov	r0, r3
 8002978:	370c      	adds	r7, #12
 800297a:	46bd      	mov	sp, r7
 800297c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002980:	4770      	bx	lr

08002982 <LL_ADC_REG_IsConversionOngoing>:
{
 8002982:	b480      	push	{r7}
 8002984:	b083      	sub	sp, #12
 8002986:	af00      	add	r7, sp, #0
 8002988:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	f003 0304 	and.w	r3, r3, #4
 8002992:	2b04      	cmp	r3, #4
 8002994:	d101      	bne.n	800299a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002996:	2301      	movs	r3, #1
 8002998:	e000      	b.n	800299c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800299a:	2300      	movs	r3, #0
}
 800299c:	4618      	mov	r0, r3
 800299e:	370c      	adds	r7, #12
 80029a0:	46bd      	mov	sp, r7
 80029a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a6:	4770      	bx	lr

080029a8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80029a8:	b590      	push	{r4, r7, lr}
 80029aa:	b09f      	sub	sp, #124	; 0x7c
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
 80029b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80029b2:	2300      	movs	r3, #0
 80029b4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80029be:	2b01      	cmp	r3, #1
 80029c0:	d101      	bne.n	80029c6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80029c2:	2302      	movs	r3, #2
 80029c4:	e080      	b.n	8002ac8 <HAL_ADCEx_MultiModeConfigChannel+0x120>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2201      	movs	r2, #1
 80029ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80029ce:	2300      	movs	r3, #0
 80029d0:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80029d2:	2300      	movs	r3, #0
 80029d4:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a3d      	ldr	r2, [pc, #244]	; (8002ad0 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d102      	bne.n	80029e6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80029e0:	4b3c      	ldr	r3, [pc, #240]	; (8002ad4 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 80029e2:	60bb      	str	r3, [r7, #8]
 80029e4:	e001      	b.n	80029ea <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80029e6:	2300      	movs	r3, #0
 80029e8:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80029ea:	68bb      	ldr	r3, [r7, #8]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d10b      	bne.n	8002a08 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029f4:	f043 0220 	orr.w	r2, r3, #32
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2200      	movs	r2, #0
 8002a00:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002a04:	2301      	movs	r3, #1
 8002a06:	e05f      	b.n	8002ac8 <HAL_ADCEx_MultiModeConfigChannel+0x120>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f7ff ffb9 	bl	8002982 <LL_ADC_REG_IsConversionOngoing>
 8002a10:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4618      	mov	r0, r3
 8002a18:	f7ff ffb3 	bl	8002982 <LL_ADC_REG_IsConversionOngoing>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d141      	bne.n	8002aa6 <HAL_ADCEx_MultiModeConfigChannel+0xfe>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002a22:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d13e      	bne.n	8002aa6 <HAL_ADCEx_MultiModeConfigChannel+0xfe>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002a28:	4b2b      	ldr	r3, [pc, #172]	; (8002ad8 <HAL_ADCEx_MultiModeConfigChannel+0x130>)
 8002a2a:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d020      	beq.n	8002a76 <HAL_ADCEx_MultiModeConfigChannel+0xce>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8002a34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a36:	689b      	ldr	r3, [r3, #8]
 8002a38:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	431a      	orrs	r2, r3
 8002a42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a44:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002a46:	4822      	ldr	r0, [pc, #136]	; (8002ad0 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8002a48:	f7ff ff88 	bl	800295c <LL_ADC_IsEnabled>
 8002a4c:	4604      	mov	r4, r0
 8002a4e:	4821      	ldr	r0, [pc, #132]	; (8002ad4 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8002a50:	f7ff ff84 	bl	800295c <LL_ADC_IsEnabled>
 8002a54:	4603      	mov	r3, r0
 8002a56:	4323      	orrs	r3, r4
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d12e      	bne.n	8002aba <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002a5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a5e:	689a      	ldr	r2, [r3, #8]
 8002a60:	4b1e      	ldr	r3, [pc, #120]	; (8002adc <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 8002a62:	4013      	ands	r3, r2
 8002a64:	683a      	ldr	r2, [r7, #0]
 8002a66:	6811      	ldr	r1, [r2, #0]
 8002a68:	683a      	ldr	r2, [r7, #0]
 8002a6a:	6892      	ldr	r2, [r2, #8]
 8002a6c:	430a      	orrs	r2, r1
 8002a6e:	431a      	orrs	r2, r3
 8002a70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a72:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002a74:	e021      	b.n	8002aba <HAL_ADCEx_MultiModeConfigChannel+0x112>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8002a76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002a7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a80:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002a82:	4813      	ldr	r0, [pc, #76]	; (8002ad0 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8002a84:	f7ff ff6a 	bl	800295c <LL_ADC_IsEnabled>
 8002a88:	4604      	mov	r4, r0
 8002a8a:	4812      	ldr	r0, [pc, #72]	; (8002ad4 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8002a8c:	f7ff ff66 	bl	800295c <LL_ADC_IsEnabled>
 8002a90:	4603      	mov	r3, r0
 8002a92:	4323      	orrs	r3, r4
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d110      	bne.n	8002aba <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002a98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a9a:	689a      	ldr	r2, [r3, #8]
 8002a9c:	4b0f      	ldr	r3, [pc, #60]	; (8002adc <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 8002a9e:	4013      	ands	r3, r2
 8002aa0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002aa2:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002aa4:	e009      	b.n	8002aba <HAL_ADCEx_MultiModeConfigChannel+0x112>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aaa:	f043 0220 	orr.w	r2, r3, #32
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002ab8:	e000      	b.n	8002abc <HAL_ADCEx_MultiModeConfigChannel+0x114>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002aba:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2200      	movs	r2, #0
 8002ac0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002ac4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	377c      	adds	r7, #124	; 0x7c
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd90      	pop	{r4, r7, pc}
 8002ad0:	40022000 	.word	0x40022000
 8002ad4:	40022100 	.word	0x40022100
 8002ad8:	40022300 	.word	0x40022300
 8002adc:	fffff0e0 	.word	0xfffff0e0

08002ae0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b085      	sub	sp, #20
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	f003 0307 	and.w	r3, r3, #7
 8002aee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002af0:	4b0b      	ldr	r3, [pc, #44]	; (8002b20 <__NVIC_SetPriorityGrouping+0x40>)
 8002af2:	68db      	ldr	r3, [r3, #12]
 8002af4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002af6:	68ba      	ldr	r2, [r7, #8]
 8002af8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002afc:	4013      	ands	r3, r2
 8002afe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002b08:	4b06      	ldr	r3, [pc, #24]	; (8002b24 <__NVIC_SetPriorityGrouping+0x44>)
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b0e:	4a04      	ldr	r2, [pc, #16]	; (8002b20 <__NVIC_SetPriorityGrouping+0x40>)
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	60d3      	str	r3, [r2, #12]
}
 8002b14:	bf00      	nop
 8002b16:	3714      	adds	r7, #20
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1e:	4770      	bx	lr
 8002b20:	e000ed00 	.word	0xe000ed00
 8002b24:	05fa0000 	.word	0x05fa0000

08002b28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b2c:	4b04      	ldr	r3, [pc, #16]	; (8002b40 <__NVIC_GetPriorityGrouping+0x18>)
 8002b2e:	68db      	ldr	r3, [r3, #12]
 8002b30:	0a1b      	lsrs	r3, r3, #8
 8002b32:	f003 0307 	and.w	r3, r3, #7
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3e:	4770      	bx	lr
 8002b40:	e000ed00 	.word	0xe000ed00

08002b44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b083      	sub	sp, #12
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002b4e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	db0b      	blt.n	8002b6e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b56:	88fb      	ldrh	r3, [r7, #6]
 8002b58:	f003 021f 	and.w	r2, r3, #31
 8002b5c:	4907      	ldr	r1, [pc, #28]	; (8002b7c <__NVIC_EnableIRQ+0x38>)
 8002b5e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b62:	095b      	lsrs	r3, r3, #5
 8002b64:	2001      	movs	r0, #1
 8002b66:	fa00 f202 	lsl.w	r2, r0, r2
 8002b6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002b6e:	bf00      	nop
 8002b70:	370c      	adds	r7, #12
 8002b72:	46bd      	mov	sp, r7
 8002b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b78:	4770      	bx	lr
 8002b7a:	bf00      	nop
 8002b7c:	e000e100 	.word	0xe000e100

08002b80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b083      	sub	sp, #12
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	4603      	mov	r3, r0
 8002b88:	6039      	str	r1, [r7, #0]
 8002b8a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002b8c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	db0a      	blt.n	8002baa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	b2da      	uxtb	r2, r3
 8002b98:	490c      	ldr	r1, [pc, #48]	; (8002bcc <__NVIC_SetPriority+0x4c>)
 8002b9a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b9e:	0112      	lsls	r2, r2, #4
 8002ba0:	b2d2      	uxtb	r2, r2
 8002ba2:	440b      	add	r3, r1
 8002ba4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ba8:	e00a      	b.n	8002bc0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	b2da      	uxtb	r2, r3
 8002bae:	4908      	ldr	r1, [pc, #32]	; (8002bd0 <__NVIC_SetPriority+0x50>)
 8002bb0:	88fb      	ldrh	r3, [r7, #6]
 8002bb2:	f003 030f 	and.w	r3, r3, #15
 8002bb6:	3b04      	subs	r3, #4
 8002bb8:	0112      	lsls	r2, r2, #4
 8002bba:	b2d2      	uxtb	r2, r2
 8002bbc:	440b      	add	r3, r1
 8002bbe:	761a      	strb	r2, [r3, #24]
}
 8002bc0:	bf00      	nop
 8002bc2:	370c      	adds	r7, #12
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bca:	4770      	bx	lr
 8002bcc:	e000e100 	.word	0xe000e100
 8002bd0:	e000ed00 	.word	0xe000ed00

08002bd4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b089      	sub	sp, #36	; 0x24
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	60f8      	str	r0, [r7, #12]
 8002bdc:	60b9      	str	r1, [r7, #8]
 8002bde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	f003 0307 	and.w	r3, r3, #7
 8002be6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002be8:	69fb      	ldr	r3, [r7, #28]
 8002bea:	f1c3 0307 	rsb	r3, r3, #7
 8002bee:	2b04      	cmp	r3, #4
 8002bf0:	bf28      	it	cs
 8002bf2:	2304      	movcs	r3, #4
 8002bf4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002bf6:	69fb      	ldr	r3, [r7, #28]
 8002bf8:	3304      	adds	r3, #4
 8002bfa:	2b06      	cmp	r3, #6
 8002bfc:	d902      	bls.n	8002c04 <NVIC_EncodePriority+0x30>
 8002bfe:	69fb      	ldr	r3, [r7, #28]
 8002c00:	3b03      	subs	r3, #3
 8002c02:	e000      	b.n	8002c06 <NVIC_EncodePriority+0x32>
 8002c04:	2300      	movs	r3, #0
 8002c06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c08:	f04f 32ff 	mov.w	r2, #4294967295
 8002c0c:	69bb      	ldr	r3, [r7, #24]
 8002c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c12:	43da      	mvns	r2, r3
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	401a      	ands	r2, r3
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c1c:	f04f 31ff 	mov.w	r1, #4294967295
 8002c20:	697b      	ldr	r3, [r7, #20]
 8002c22:	fa01 f303 	lsl.w	r3, r1, r3
 8002c26:	43d9      	mvns	r1, r3
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c2c:	4313      	orrs	r3, r2
         );
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	3724      	adds	r7, #36	; 0x24
 8002c32:	46bd      	mov	sp, r7
 8002c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c38:	4770      	bx	lr

08002c3a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c3a:	b580      	push	{r7, lr}
 8002c3c:	b082      	sub	sp, #8
 8002c3e:	af00      	add	r7, sp, #0
 8002c40:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c42:	6878      	ldr	r0, [r7, #4]
 8002c44:	f7ff ff4c 	bl	8002ae0 <__NVIC_SetPriorityGrouping>
}
 8002c48:	bf00      	nop
 8002c4a:	3708      	adds	r7, #8
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bd80      	pop	{r7, pc}

08002c50 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b086      	sub	sp, #24
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	4603      	mov	r3, r0
 8002c58:	60b9      	str	r1, [r7, #8]
 8002c5a:	607a      	str	r2, [r7, #4]
 8002c5c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002c5e:	f7ff ff63 	bl	8002b28 <__NVIC_GetPriorityGrouping>
 8002c62:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c64:	687a      	ldr	r2, [r7, #4]
 8002c66:	68b9      	ldr	r1, [r7, #8]
 8002c68:	6978      	ldr	r0, [r7, #20]
 8002c6a:	f7ff ffb3 	bl	8002bd4 <NVIC_EncodePriority>
 8002c6e:	4602      	mov	r2, r0
 8002c70:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002c74:	4611      	mov	r1, r2
 8002c76:	4618      	mov	r0, r3
 8002c78:	f7ff ff82 	bl	8002b80 <__NVIC_SetPriority>
}
 8002c7c:	bf00      	nop
 8002c7e:	3718      	adds	r7, #24
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bd80      	pop	{r7, pc}

08002c84 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b082      	sub	sp, #8
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c8e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002c92:	4618      	mov	r0, r3
 8002c94:	f7ff ff56 	bl	8002b44 <__NVIC_EnableIRQ>
}
 8002c98:	bf00      	nop
 8002c9a:	3708      	adds	r7, #8
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}

08002ca0 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b098      	sub	sp, #96	; 0x60
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8002ca8:	4a84      	ldr	r2, [pc, #528]	; (8002ebc <HAL_FDCAN_Init+0x21c>)
 8002caa:	f107 030c 	add.w	r3, r7, #12
 8002cae:	4611      	mov	r1, r2
 8002cb0:	224c      	movs	r2, #76	; 0x4c
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f005 ff76 	bl	8008ba4 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d101      	bne.n	8002cc2 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e1ca      	b.n	8003058 <HAL_FDCAN_Init+0x3b8>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a7e      	ldr	r2, [pc, #504]	; (8002ec0 <HAL_FDCAN_Init+0x220>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d106      	bne.n	8002cda <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002cd4:	461a      	mov	r2, r3
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8002ce0:	b2db      	uxtb	r3, r3
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d106      	bne.n	8002cf4 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8002cee:	6878      	ldr	r0, [r7, #4]
 8002cf0:	f7fd fcee 	bl	80006d0 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	699a      	ldr	r2, [r3, #24]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f022 0210 	bic.w	r2, r2, #16
 8002d02:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002d04:	f7fe fcf0 	bl	80016e8 <HAL_GetTick>
 8002d08:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8002d0a:	e014      	b.n	8002d36 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002d0c:	f7fe fcec 	bl	80016e8 <HAL_GetTick>
 8002d10:	4602      	mov	r2, r0
 8002d12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d14:	1ad3      	subs	r3, r2, r3
 8002d16:	2b0a      	cmp	r3, #10
 8002d18:	d90d      	bls.n	8002d36 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002d20:	f043 0201 	orr.w	r2, r3, #1
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2203      	movs	r2, #3
 8002d2e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	e190      	b.n	8003058 <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	699b      	ldr	r3, [r3, #24]
 8002d3c:	f003 0308 	and.w	r3, r3, #8
 8002d40:	2b08      	cmp	r3, #8
 8002d42:	d0e3      	beq.n	8002d0c <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	699a      	ldr	r2, [r3, #24]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f042 0201 	orr.w	r2, r2, #1
 8002d52:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002d54:	f7fe fcc8 	bl	80016e8 <HAL_GetTick>
 8002d58:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8002d5a:	e014      	b.n	8002d86 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002d5c:	f7fe fcc4 	bl	80016e8 <HAL_GetTick>
 8002d60:	4602      	mov	r2, r0
 8002d62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d64:	1ad3      	subs	r3, r2, r3
 8002d66:	2b0a      	cmp	r3, #10
 8002d68:	d90d      	bls.n	8002d86 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002d70:	f043 0201 	orr.w	r2, r3, #1
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2203      	movs	r2, #3
 8002d7e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	e168      	b.n	8003058 <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	699b      	ldr	r3, [r3, #24]
 8002d8c:	f003 0301 	and.w	r3, r3, #1
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d0e3      	beq.n	8002d5c <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	699a      	ldr	r2, [r3, #24]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f042 0202 	orr.w	r2, r2, #2
 8002da2:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	7c1b      	ldrb	r3, [r3, #16]
 8002da8:	2b01      	cmp	r3, #1
 8002daa:	d108      	bne.n	8002dbe <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	699a      	ldr	r2, [r3, #24]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002dba:	619a      	str	r2, [r3, #24]
 8002dbc:	e007      	b.n	8002dce <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	699a      	ldr	r2, [r3, #24]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002dcc:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	7c5b      	ldrb	r3, [r3, #17]
 8002dd2:	2b01      	cmp	r3, #1
 8002dd4:	d108      	bne.n	8002de8 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	699a      	ldr	r2, [r3, #24]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002de4:	619a      	str	r2, [r3, #24]
 8002de6:	e007      	b.n	8002df8 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	699a      	ldr	r2, [r3, #24]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002df6:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	7c9b      	ldrb	r3, [r3, #18]
 8002dfc:	2b01      	cmp	r3, #1
 8002dfe:	d108      	bne.n	8002e12 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	699a      	ldr	r2, [r3, #24]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002e0e:	619a      	str	r2, [r3, #24]
 8002e10:	e007      	b.n	8002e22 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	699a      	ldr	r2, [r3, #24]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002e20:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	699b      	ldr	r3, [r3, #24]
 8002e28:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	689a      	ldr	r2, [r3, #8]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	430a      	orrs	r2, r1
 8002e36:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	699a      	ldr	r2, [r3, #24]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8002e46:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	691a      	ldr	r2, [r3, #16]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f022 0210 	bic.w	r2, r2, #16
 8002e56:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	68db      	ldr	r3, [r3, #12]
 8002e5c:	2b01      	cmp	r3, #1
 8002e5e:	d108      	bne.n	8002e72 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	699a      	ldr	r2, [r3, #24]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f042 0204 	orr.w	r2, r2, #4
 8002e6e:	619a      	str	r2, [r3, #24]
 8002e70:	e030      	b.n	8002ed4 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	68db      	ldr	r3, [r3, #12]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d02c      	beq.n	8002ed4 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	68db      	ldr	r3, [r3, #12]
 8002e7e:	2b02      	cmp	r3, #2
 8002e80:	d020      	beq.n	8002ec4 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	699a      	ldr	r2, [r3, #24]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002e90:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	691a      	ldr	r2, [r3, #16]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f042 0210 	orr.w	r2, r2, #16
 8002ea0:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	68db      	ldr	r3, [r3, #12]
 8002ea6:	2b03      	cmp	r3, #3
 8002ea8:	d114      	bne.n	8002ed4 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	699a      	ldr	r2, [r3, #24]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f042 0220 	orr.w	r2, r2, #32
 8002eb8:	619a      	str	r2, [r3, #24]
 8002eba:	e00b      	b.n	8002ed4 <HAL_FDCAN_Init+0x234>
 8002ebc:	08009440 	.word	0x08009440
 8002ec0:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	699a      	ldr	r2, [r3, #24]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f042 0220 	orr.w	r2, r2, #32
 8002ed2:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	699b      	ldr	r3, [r3, #24]
 8002ed8:	3b01      	subs	r3, #1
 8002eda:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	69db      	ldr	r3, [r3, #28]
 8002ee0:	3b01      	subs	r3, #1
 8002ee2:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002ee4:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6a1b      	ldr	r3, [r3, #32]
 8002eea:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8002eec:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	695b      	ldr	r3, [r3, #20]
 8002ef4:	3b01      	subs	r3, #1
 8002ef6:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8002efc:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002efe:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	689b      	ldr	r3, [r3, #8]
 8002f04:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f08:	d115      	bne.n	8002f36 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f0e:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f14:	3b01      	subs	r3, #1
 8002f16:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8002f18:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f1e:	3b01      	subs	r3, #1
 8002f20:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8002f22:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f2a:	3b01      	subs	r3, #1
 8002f2c:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8002f32:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8002f34:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d00a      	beq.n	8002f54 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	430a      	orrs	r2, r1
 8002f50:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f5c:	4413      	add	r3, r2
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d012      	beq.n	8002f88 <HAL_FDCAN_Init+0x2e8>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8002f6a:	f023 0107 	bic.w	r1, r3, #7
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002f72:	009b      	lsls	r3, r3, #2
 8002f74:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002f78:	4413      	add	r3, r2
 8002f7a:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	430a      	orrs	r2, r1
 8002f84:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d012      	beq.n	8002fb6 <HAL_FDCAN_Init+0x316>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8002f98:	f023 0107 	bic.w	r1, r3, #7
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fa0:	009b      	lsls	r3, r3, #2
 8002fa2:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002fa6:	4413      	add	r3, r2
 8002fa8:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	430a      	orrs	r2, r1
 8002fb2:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d013      	beq.n	8002fe6 <HAL_FDCAN_Init+0x346>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8002fc6:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fce:	009b      	lsls	r3, r3, #2
 8002fd0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002fd4:	4413      	add	r3, r2
 8002fd6:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8002fda:	011a      	lsls	r2, r3, #4
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	430a      	orrs	r2, r1
 8002fe2:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d013      	beq.n	8003016 <HAL_FDCAN_Init+0x376>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8002ff6:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ffe:	009b      	lsls	r3, r3, #2
 8003000:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003004:	4413      	add	r3, r2
 8003006:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800300a:	021a      	lsls	r2, r3, #8
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	430a      	orrs	r2, r1
 8003012:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a11      	ldr	r2, [pc, #68]	; (8003060 <HAL_FDCAN_Init+0x3c0>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d107      	bne.n	8003030 <HAL_FDCAN_Init+0x390>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	689a      	ldr	r2, [r3, #8]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	f022 0203 	bic.w	r2, r2, #3
 800302e:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2200      	movs	r2, #0
 8003034:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2200      	movs	r2, #0
 800303c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2201      	movs	r2, #1
 8003044:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8003048:	6878      	ldr	r0, [r7, #4]
 800304a:	f000 fdf9 	bl	8003c40 <FDCAN_CalcultateRamBlockAddresses>
 800304e:	4603      	mov	r3, r0
 8003050:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8003054:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8003058:	4618      	mov	r0, r3
 800305a:	3760      	adds	r7, #96	; 0x60
 800305c:	46bd      	mov	sp, r7
 800305e:	bd80      	pop	{r7, pc}
 8003060:	4000a000 	.word	0x4000a000

08003064 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 8003064:	b480      	push	{r7}
 8003066:	b087      	sub	sp, #28
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
 800306c:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8003074:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8003076:	7bfb      	ldrb	r3, [r7, #15]
 8003078:	2b01      	cmp	r3, #1
 800307a:	d002      	beq.n	8003082 <HAL_FDCAN_ConfigFilter+0x1e>
 800307c:	7bfb      	ldrb	r3, [r7, #15]
 800307e:	2b02      	cmp	r3, #2
 8003080:	d157      	bne.n	8003132 <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d12b      	bne.n	80030e2 <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	68db      	ldr	r3, [r3, #12]
 800308e:	2b07      	cmp	r3, #7
 8003090:	d10d      	bne.n	80030ae <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	691b      	ldr	r3, [r3, #16]
 8003096:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	69db      	ldr	r3, [r3, #28]
 800309c:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 800309e:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 80030a4:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 80030a6:	f043 5360 	orr.w	r3, r3, #939524096	; 0x38000000
 80030aa:	617b      	str	r3, [r7, #20]
 80030ac:	e00e      	b.n	80030cc <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	689b      	ldr	r3, [r3, #8]
 80030b2:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	68db      	ldr	r3, [r3, #12]
 80030b8:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80030ba:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	691b      	ldr	r3, [r3, #16]
 80030c0:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 80030c2:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80030c8:	4313      	orrs	r3, r2
 80030ca:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	009b      	lsls	r3, r3, #2
 80030d6:	4413      	add	r3, r2
 80030d8:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	697a      	ldr	r2, [r7, #20]
 80030de:	601a      	str	r2, [r3, #0]
 80030e0:	e025      	b.n	800312e <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	68db      	ldr	r3, [r3, #12]
 80030e6:	075a      	lsls	r2, r3, #29
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	691b      	ldr	r3, [r3, #16]
 80030ec:	4313      	orrs	r3, r2
 80030ee:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	68db      	ldr	r3, [r3, #12]
 80030f4:	2b07      	cmp	r3, #7
 80030f6:	d103      	bne.n	8003100 <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	699b      	ldr	r3, [r3, #24]
 80030fc:	613b      	str	r3, [r7, #16]
 80030fe:	e006      	b.n	800310e <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	689b      	ldr	r3, [r3, #8]
 8003104:	079a      	lsls	r2, r3, #30
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	695b      	ldr	r3, [r3, #20]
 800310a:	4313      	orrs	r3, r2
 800310c:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	00db      	lsls	r3, r3, #3
 8003118:	4413      	add	r3, r2
 800311a:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	697a      	ldr	r2, [r7, #20]
 8003120:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	3304      	adds	r3, #4
 8003126:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	693a      	ldr	r2, [r7, #16]
 800312c:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 800312e:	2300      	movs	r3, #0
 8003130:	e008      	b.n	8003144 <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003138:	f043 0202 	orr.w	r2, r3, #2
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8003142:	2301      	movs	r3, #1
  }
}
 8003144:	4618      	mov	r0, r3
 8003146:	371c      	adds	r7, #28
 8003148:	46bd      	mov	sp, r7
 800314a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314e:	4770      	bx	lr

08003150 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8003150:	b480      	push	{r7}
 8003152:	b083      	sub	sp, #12
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800315e:	b2db      	uxtb	r3, r3
 8003160:	2b01      	cmp	r3, #1
 8003162:	d111      	bne.n	8003188 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2202      	movs	r2, #2
 8003168:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	699a      	ldr	r2, [r3, #24]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f022 0201 	bic.w	r2, r2, #1
 800317a:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2200      	movs	r2, #0
 8003180:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Return function status */
    return HAL_OK;
 8003184:	2300      	movs	r3, #0
 8003186:	e008      	b.n	800319a <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800318e:	f043 0204 	orr.w	r2, r3, #4
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8003198:	2301      	movs	r3, #1
  }
}
 800319a:	4618      	mov	r0, r3
 800319c:	370c      	adds	r7, #12
 800319e:	46bd      	mov	sp, r7
 80031a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a4:	4770      	bx	lr

080031a6 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxHeader pointer to a FDCAN_TxHeaderTypeDef structure.
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData)
{
 80031a6:	b580      	push	{r7, lr}
 80031a8:	b086      	sub	sp, #24
 80031aa:	af00      	add	r7, sp, #0
 80031ac:	60f8      	str	r0, [r7, #12]
 80031ae:	60b9      	str	r1, [r7, #8]
 80031b0:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80031b8:	b2db      	uxtb	r3, r3
 80031ba:	2b02      	cmp	r3, #2
 80031bc:	d141      	bne.n	8003242 <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80031c6:	f003 537c 	and.w	r3, r3, #1056964608	; 0x3f000000
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d109      	bne.n	80031e2 <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80031d4:	f043 0220 	orr.w	r2, r3, #32
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	e038      	b.n	8003254 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80031ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d009      	beq.n	8003206 <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80031f8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	e026      	b.n	8003254 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800320e:	0c1b      	lsrs	r3, r3, #16
 8003210:	f003 031f 	and.w	r3, r3, #31
 8003214:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8003216:	697b      	ldr	r3, [r7, #20]
 8003218:	687a      	ldr	r2, [r7, #4]
 800321a:	68b9      	ldr	r1, [r7, #8]
 800321c:	68f8      	ldr	r0, [r7, #12]
 800321e:	f000 fe95 	bl	8003f4c <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	2101      	movs	r1, #1
 8003228:	697a      	ldr	r2, [r7, #20]
 800322a:	fa01 f202 	lsl.w	r2, r1, r2
 800322e:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8003232:	2201      	movs	r2, #1
 8003234:	697b      	ldr	r3, [r7, #20]
 8003236:	409a      	lsls	r2, r3
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    }

    /* Return function status */
    return HAL_OK;
 800323e:	2300      	movs	r3, #0
 8003240:	e008      	b.n	8003254 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003248:	f043 0208 	orr.w	r2, r3, #8
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8003252:	2301      	movs	r3, #1
  }
}
 8003254:	4618      	mov	r0, r3
 8003256:	3718      	adds	r7, #24
 8003258:	46bd      	mov	sp, r7
 800325a:	bd80      	pop	{r7, pc}

0800325c <HAL_FDCAN_GetRxMessage>:
  * @param  pRxHeader pointer to a FDCAN_RxHeaderTypeDef structure.
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation, FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 800325c:	b480      	push	{r7}
 800325e:	b08b      	sub	sp, #44	; 0x2c
 8003260:	af00      	add	r7, sp, #0
 8003262:	60f8      	str	r0, [r7, #12]
 8003264:	60b9      	str	r1, [r7, #8]
 8003266:	607a      	str	r2, [r7, #4]
 8003268:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 800326a:	2300      	movs	r3, #0
 800326c:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8003274:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 8003276:	7efb      	ldrb	r3, [r7, #27]
 8003278:	2b02      	cmp	r3, #2
 800327a:	f040 814b 	bne.w	8003514 <HAL_FDCAN_GetRxMessage+0x2b8>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800327e:	68bb      	ldr	r3, [r7, #8]
 8003280:	2b40      	cmp	r3, #64	; 0x40
 8003282:	d14d      	bne.n	8003320 <HAL_FDCAN_GetRxMessage+0xc4>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800328c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003290:	2b00      	cmp	r3, #0
 8003292:	d109      	bne.n	80032a8 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800329a:	f043 0220 	orr.w	r2, r3, #32
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80032a4:	2301      	movs	r3, #1
 80032a6:	e13e      	b.n	8003526 <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80032b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d109      	bne.n	80032cc <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80032be:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80032c8:	2301      	movs	r3, #1
 80032ca:	e12c      	b.n	8003526 <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80032d4:	0e1b      	lsrs	r3, r3, #24
 80032d6:	f003 0301 	and.w	r3, r3, #1
 80032da:	2b01      	cmp	r3, #1
 80032dc:	d10b      	bne.n	80032f6 <HAL_FDCAN_GetRxMessage+0x9a>
        {
          if(((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80032e6:	0fdb      	lsrs	r3, r3, #31
 80032e8:	f003 0301 	and.w	r3, r3, #1
 80032ec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80032f0:	d101      	bne.n	80032f6 <HAL_FDCAN_GetRxMessage+0x9a>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80032f2:	2301      	movs	r3, #1
 80032f4:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index*/
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80032fe:	0a1b      	lsrs	r3, r3, #8
 8003300:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003304:	69fa      	ldr	r2, [r7, #28]
 8003306:	4413      	add	r3, r2
 8003308:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003312:	69f9      	ldr	r1, [r7, #28]
 8003314:	fb01 f303 	mul.w	r3, r1, r3
 8003318:	009b      	lsls	r3, r3, #2
 800331a:	4413      	add	r3, r2
 800331c:	627b      	str	r3, [r7, #36]	; 0x24
 800331e:	e069      	b.n	80033f4 <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	2b41      	cmp	r3, #65	; 0x41
 8003324:	d14d      	bne.n	80033c2 <HAL_FDCAN_GetRxMessage+0x166>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800332e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003332:	2b00      	cmp	r3, #0
 8003334:	d109      	bne.n	800334a <HAL_FDCAN_GetRxMessage+0xee>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800333c:	f043 0220 	orr.w	r2, r3, #32
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8003346:	2301      	movs	r3, #1
 8003348:	e0ed      	b.n	8003526 <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003352:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003356:	2b00      	cmp	r3, #0
 8003358:	d109      	bne.n	800336e <HAL_FDCAN_GetRxMessage+0x112>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003360:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 800336a:	2301      	movs	r3, #1
 800336c:	e0db      	b.n	8003526 <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003376:	0e1b      	lsrs	r3, r3, #24
 8003378:	f003 0301 	and.w	r3, r3, #1
 800337c:	2b01      	cmp	r3, #1
 800337e:	d10b      	bne.n	8003398 <HAL_FDCAN_GetRxMessage+0x13c>
        {
          if(((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003388:	0fdb      	lsrs	r3, r3, #31
 800338a:	f003 0301 	and.w	r3, r3, #1
 800338e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003392:	d101      	bne.n	8003398 <HAL_FDCAN_GetRxMessage+0x13c>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8003394:	2301      	movs	r3, #1
 8003396:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index*/
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80033a0:	0a1b      	lsrs	r3, r3, #8
 80033a2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80033a6:	69fa      	ldr	r2, [r7, #28]
 80033a8:	4413      	add	r3, r2
 80033aa:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033b4:	69f9      	ldr	r1, [r7, #28]
 80033b6:	fb01 f303 	mul.w	r3, r1, r3
 80033ba:	009b      	lsls	r3, r3, #2
 80033bc:	4413      	add	r3, r2
 80033be:	627b      	str	r3, [r7, #36]	; 0x24
 80033c0:	e018      	b.n	80033f4 <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033c6:	68ba      	ldr	r2, [r7, #8]
 80033c8:	429a      	cmp	r2, r3
 80033ca:	d309      	bcc.n	80033e0 <HAL_FDCAN_GetRxMessage+0x184>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80033d2:	f043 0220 	orr.w	r2, r3, #32
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80033dc:	2301      	movs	r3, #1
 80033de:	e0a2      	b.n	8003526 <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033e8:	68b9      	ldr	r1, [r7, #8]
 80033ea:	fb01 f303 	mul.w	r3, r1, r3
 80033ee:	009b      	lsls	r3, r3, #2
 80033f0:	4413      	add	r3, r2
 80033f2:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 80033f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d107      	bne.n	8003418 <HAL_FDCAN_GetRxMessage+0x1bc>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18);
 8003408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	0c9b      	lsrs	r3, r3, #18
 800340e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	601a      	str	r2, [r3, #0]
 8003416:	e005      	b.n	8003424 <HAL_FDCAN_GetRxMessage+0x1c8>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8003418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8003424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8003430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 800343c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800343e:	3304      	adds	r3, #4
 8003440:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8003442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	b29a      	uxth	r2, r3
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 800344c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8003458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8003464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24);
 8003470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	0e1b      	lsrs	r3, r3, #24
 8003476:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31);
 800347e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	0fda      	lsrs	r2, r3, #31
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8003488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800348a:	3304      	adds	r3, #4
 800348c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 800348e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003490:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 8003492:	2300      	movs	r3, #0
 8003494:	623b      	str	r3, [r7, #32]
 8003496:	e00a      	b.n	80034ae <HAL_FDCAN_GetRxMessage+0x252>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8003498:	697a      	ldr	r2, [r7, #20]
 800349a:	6a3b      	ldr	r3, [r7, #32]
 800349c:	441a      	add	r2, r3
 800349e:	6839      	ldr	r1, [r7, #0]
 80034a0:	6a3b      	ldr	r3, [r7, #32]
 80034a2:	440b      	add	r3, r1
 80034a4:	7812      	ldrb	r2, [r2, #0]
 80034a6:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 80034a8:	6a3b      	ldr	r3, [r7, #32]
 80034aa:	3301      	adds	r3, #1
 80034ac:	623b      	str	r3, [r7, #32]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	68db      	ldr	r3, [r3, #12]
 80034b2:	0c1b      	lsrs	r3, r3, #16
 80034b4:	4a1f      	ldr	r2, [pc, #124]	; (8003534 <HAL_FDCAN_GetRxMessage+0x2d8>)
 80034b6:	5cd3      	ldrb	r3, [r2, r3]
 80034b8:	461a      	mov	r2, r3
 80034ba:	6a3b      	ldr	r3, [r7, #32]
 80034bc:	4293      	cmp	r3, r2
 80034be:	d3eb      	bcc.n	8003498 <HAL_FDCAN_GetRxMessage+0x23c>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	2b40      	cmp	r3, #64	; 0x40
 80034c4:	d105      	bne.n	80034d2 <HAL_FDCAN_GetRxMessage+0x276>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	69fa      	ldr	r2, [r7, #28]
 80034cc:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 80034d0:	e01e      	b.n	8003510 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	2b41      	cmp	r3, #65	; 0x41
 80034d6:	d105      	bne.n	80034e4 <HAL_FDCAN_GetRxMessage+0x288>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	69fa      	ldr	r2, [r7, #28]
 80034de:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 80034e2:	e015      	b.n	8003510 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	2b1f      	cmp	r3, #31
 80034e8:	d808      	bhi.n	80034fc <HAL_FDCAN_GetRxMessage+0x2a0>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1 << RxLocation);
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	2101      	movs	r1, #1
 80034f0:	68ba      	ldr	r2, [r7, #8]
 80034f2:	fa01 f202 	lsl.w	r2, r1, r2
 80034f6:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 80034fa:	e009      	b.n	8003510 <HAL_FDCAN_GetRxMessage+0x2b4>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1 << (RxLocation & 0x1FU));
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	f003 021f 	and.w	r2, r3, #31
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	2101      	movs	r1, #1
 8003508:	fa01 f202 	lsl.w	r2, r1, r2
 800350c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 8003510:	2300      	movs	r3, #0
 8003512:	e008      	b.n	8003526 <HAL_FDCAN_GetRxMessage+0x2ca>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800351a:	f043 0208 	orr.w	r2, r3, #8
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8003524:	2301      	movs	r3, #1
  }
}
 8003526:	4618      	mov	r0, r3
 8003528:	372c      	adds	r7, #44	; 0x2c
 800352a:	46bd      	mov	sp, r7
 800352c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003530:	4770      	bx	lr
 8003532:	bf00      	nop
 8003534:	0800949c 	.word	0x0800949c

08003538 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_COMPLETE
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs, uint32_t BufferIndexes)
{
 8003538:	b480      	push	{r7}
 800353a:	b087      	sub	sp, #28
 800353c:	af00      	add	r7, sp, #0
 800353e:	60f8      	str	r0, [r7, #12]
 8003540:	60b9      	str	r1, [r7, #8]
 8003542:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800354a:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800354c:	7dfb      	ldrb	r3, [r7, #23]
 800354e:	2b01      	cmp	r3, #1
 8003550:	d002      	beq.n	8003558 <HAL_FDCAN_ActivateNotification+0x20>
 8003552:	7dfb      	ldrb	r3, [r7, #23]
 8003554:	2b02      	cmp	r3, #2
 8003556:	d155      	bne.n	8003604 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800355e:	68bb      	ldr	r3, [r7, #8]
 8003560:	4013      	ands	r3, r2
 8003562:	2b00      	cmp	r3, #0
 8003564:	d108      	bne.n	8003578 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f042 0201 	orr.w	r2, r2, #1
 8003574:	65da      	str	r2, [r3, #92]	; 0x5c
 8003576:	e014      	b.n	80035a2 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	4013      	ands	r3, r2
 8003582:	68ba      	ldr	r2, [r7, #8]
 8003584:	429a      	cmp	r2, r3
 8003586:	d108      	bne.n	800359a <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f042 0202 	orr.w	r2, r2, #2
 8003596:	65da      	str	r2, [r3, #92]	; 0x5c
 8003598:	e003      	b.n	80035a2 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	2203      	movs	r2, #3
 80035a0:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 80035a2:	68bb      	ldr	r3, [r7, #8]
 80035a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d009      	beq.n	80035c0 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	687a      	ldr	r2, [r7, #4]
 80035ba:	430a      	orrs	r2, r1
 80035bc:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80035c0:	68bb      	ldr	r3, [r7, #8]
 80035c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d009      	beq.n	80035de <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f8d3 10e4 	ldr.w	r1, [r3, #228]	; 0xe4
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	687a      	ldr	r2, [r7, #4]
 80035d8:	430a      	orrs	r2, r1
 80035da:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80035e4:	68ba      	ldr	r2, [r7, #8]
 80035e6:	4b0f      	ldr	r3, [pc, #60]	; (8003624 <HAL_FDCAN_ActivateNotification+0xec>)
 80035e8:	4013      	ands	r3, r2
 80035ea:	68fa      	ldr	r2, [r7, #12]
 80035ec:	6812      	ldr	r2, [r2, #0]
 80035ee:	430b      	orrs	r3, r1
 80035f0:	6553      	str	r3, [r2, #84]	; 0x54
 80035f2:	4b0d      	ldr	r3, [pc, #52]	; (8003628 <HAL_FDCAN_ActivateNotification+0xf0>)
 80035f4:	695a      	ldr	r2, [r3, #20]
 80035f6:	68bb      	ldr	r3, [r7, #8]
 80035f8:	0f9b      	lsrs	r3, r3, #30
 80035fa:	490b      	ldr	r1, [pc, #44]	; (8003628 <HAL_FDCAN_ActivateNotification+0xf0>)
 80035fc:	4313      	orrs	r3, r2
 80035fe:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 8003600:	2300      	movs	r3, #0
 8003602:	e008      	b.n	8003616 <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800360a:	f043 0202 	orr.w	r2, r3, #2
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8003614:	2301      	movs	r3, #1
  }
}
 8003616:	4618      	mov	r0, r3
 8003618:	371c      	adds	r7, #28
 800361a:	46bd      	mov	sp, r7
 800361c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003620:	4770      	bx	lr
 8003622:	bf00      	nop
 8003624:	3fcfffff 	.word	0x3fcfffff
 8003628:	4000a800 	.word	0x4000a800

0800362c <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b092      	sub	sp, #72	; 0x48
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  uint32_t TTDistErrors;
  uint32_t TTFatalErrors;
  uint32_t SWTime;
  uint32_t SWCycleCount;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 8003634:	4b90      	ldr	r3, [pc, #576]	; (8003878 <HAL_FDCAN_IRQHandler+0x24c>)
 8003636:	691b      	ldr	r3, [r3, #16]
 8003638:	079b      	lsls	r3, r3, #30
 800363a:	647b      	str	r3, [r7, #68]	; 0x44
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 800363c:	4b8e      	ldr	r3, [pc, #568]	; (8003878 <HAL_FDCAN_IRQHandler+0x24c>)
 800363e:	695b      	ldr	r3, [r3, #20]
 8003640:	079b      	lsls	r3, r3, #30
 8003642:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003644:	4013      	ands	r3, r2
 8003646:	647b      	str	r3, [r7, #68]	; 0x44
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800364e:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8003652:	643b      	str	r3, [r7, #64]	; 0x40
  TxEventFifoITs &= hfdcan->Instance->IE;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800365a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800365c:	4013      	ands	r3, r2
 800365e:	643b      	str	r3, [r7, #64]	; 0x40
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003666:	f003 030f 	and.w	r3, r3, #15
 800366a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RxFifo0ITs &= hfdcan->Instance->IE;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003672:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003674:	4013      	ands	r3, r2
 8003676:	63fb      	str	r3, [r7, #60]	; 0x3c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800367e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003682:	63bb      	str	r3, [r7, #56]	; 0x38
  RxFifo1ITs &= hfdcan->Instance->IE;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800368a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800368c:	4013      	ands	r3, r2
 800368e:	63bb      	str	r3, [r7, #56]	; 0x38
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003696:	f003 5371 	and.w	r3, r3, #1010827264	; 0x3c400000
 800369a:	637b      	str	r3, [r7, #52]	; 0x34
  Errors &= hfdcan->Instance->IE;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80036a4:	4013      	ands	r3, r2
 80036a6:	637b      	str	r3, [r7, #52]	; 0x34
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036ae:	f003 7360 	and.w	r3, r3, #58720256	; 0x3800000
 80036b2:	633b      	str	r3, [r7, #48]	; 0x30
  ErrorStatusITs &= hfdcan->Instance->IE;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80036bc:	4013      	ands	r3, r2
 80036be:	633b      	str	r3, [r7, #48]	; 0x30

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d011      	beq.n	80036f2 <HAL_FDCAN_IRQHandler+0xc6>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d00a      	beq.n	80036f2 <HAL_FDCAN_IRQHandler+0xc6>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80036e4:	651a      	str	r2, [r3, #80]	; 0x50
 80036e6:	4b64      	ldr	r3, [pc, #400]	; (8003878 <HAL_FDCAN_IRQHandler+0x24c>)
 80036e8:	2200      	movs	r2, #0
 80036ea:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 80036ec:	6878      	ldr	r0, [r7, #4]
 80036ee:	f000 fa5a 	bl	8003ba6 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d01e      	beq.n	800373e <HAL_FDCAN_IRQHandler+0x112>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003706:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800370a:	2b00      	cmp	r3, #0
 800370c:	d017      	beq.n	800373e <HAL_FDCAN_IRQHandler+0x112>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8003716:	62fb      	str	r3, [r7, #44]	; 0x2c
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003720:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003722:	4013      	ands	r3, r2
 8003724:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800372e:	651a      	str	r2, [r3, #80]	; 0x50
 8003730:	4b51      	ldr	r3, [pc, #324]	; (8003878 <HAL_FDCAN_IRQHandler+0x24c>)
 8003732:	2200      	movs	r2, #0
 8003734:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8003736:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003738:	6878      	ldr	r0, [r7, #4]
 800373a:	f000 fa0b 	bl	8003b54 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 800373e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003740:	2b00      	cmp	r3, #0
 8003742:	d00d      	beq.n	8003760 <HAL_FDCAN_IRQHandler+0x134>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681a      	ldr	r2, [r3, #0]
 8003748:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800374a:	4b4c      	ldr	r3, [pc, #304]	; (800387c <HAL_FDCAN_IRQHandler+0x250>)
 800374c:	400b      	ands	r3, r1
 800374e:	6513      	str	r3, [r2, #80]	; 0x50
 8003750:	4a49      	ldr	r2, [pc, #292]	; (8003878 <HAL_FDCAN_IRQHandler+0x24c>)
 8003752:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003754:	0f9b      	lsrs	r3, r3, #30
 8003756:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 8003758:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800375a:	6878      	ldr	r0, [r7, #4]
 800375c:	f000 f9c4 	bl	8003ae8 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8003760:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003762:	2b00      	cmp	r3, #0
 8003764:	d00d      	beq.n	8003782 <HAL_FDCAN_IRQHandler+0x156>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681a      	ldr	r2, [r3, #0]
 800376a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800376c:	4b43      	ldr	r3, [pc, #268]	; (800387c <HAL_FDCAN_IRQHandler+0x250>)
 800376e:	400b      	ands	r3, r1
 8003770:	6513      	str	r3, [r2, #80]	; 0x50
 8003772:	4a41      	ldr	r2, [pc, #260]	; (8003878 <HAL_FDCAN_IRQHandler+0x24c>)
 8003774:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003776:	0f9b      	lsrs	r3, r3, #30
 8003778:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 800377a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800377c:	6878      	ldr	r0, [r7, #4]
 800377e:	f000 f9be 	bl	8003afe <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8003782:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003784:	2b00      	cmp	r3, #0
 8003786:	d00d      	beq.n	80037a4 <HAL_FDCAN_IRQHandler+0x178>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681a      	ldr	r2, [r3, #0]
 800378c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800378e:	4b3b      	ldr	r3, [pc, #236]	; (800387c <HAL_FDCAN_IRQHandler+0x250>)
 8003790:	400b      	ands	r3, r1
 8003792:	6513      	str	r3, [r2, #80]	; 0x50
 8003794:	4a38      	ldr	r2, [pc, #224]	; (8003878 <HAL_FDCAN_IRQHandler+0x24c>)
 8003796:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003798:	0f9b      	lsrs	r3, r3, #30
 800379a:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 800379c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800379e:	6878      	ldr	r0, [r7, #4]
 80037a0:	f7fd fafe 	bl	8000da0 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 80037a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d00d      	beq.n	80037c6 <HAL_FDCAN_IRQHandler+0x19a>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681a      	ldr	r2, [r3, #0]
 80037ae:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80037b0:	4b32      	ldr	r3, [pc, #200]	; (800387c <HAL_FDCAN_IRQHandler+0x250>)
 80037b2:	400b      	ands	r3, r1
 80037b4:	6513      	str	r3, [r2, #80]	; 0x50
 80037b6:	4a30      	ldr	r2, [pc, #192]	; (8003878 <HAL_FDCAN_IRQHandler+0x24c>)
 80037b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037ba:	0f9b      	lsrs	r3, r3, #30
 80037bc:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 80037be:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80037c0:	6878      	ldr	r0, [r7, #4]
 80037c2:	f000 f9a7 	bl	8003b14 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d011      	beq.n	80037f8 <HAL_FDCAN_IRQHandler+0x1cc>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d00a      	beq.n	80037f8 <HAL_FDCAN_IRQHandler+0x1cc>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80037ea:	651a      	str	r2, [r3, #80]	; 0x50
 80037ec:	4b22      	ldr	r3, [pc, #136]	; (8003878 <HAL_FDCAN_IRQHandler+0x24c>)
 80037ee:	2200      	movs	r2, #0
 80037f0:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	f000 f999 	bl	8003b2a <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003802:	2b00      	cmp	r3, #0
 8003804:	d01e      	beq.n	8003844 <HAL_FDCAN_IRQHandler+0x218>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800380c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003810:	2b00      	cmp	r3, #0
 8003812:	d017      	beq.n	8003844 <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800381c:	62bb      	str	r3, [r7, #40]	; 0x28
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003826:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003828:	4013      	ands	r3, r2
 800382a:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003834:	651a      	str	r2, [r3, #80]	; 0x50
 8003836:	4b10      	ldr	r3, [pc, #64]	; (8003878 <HAL_FDCAN_IRQHandler+0x24c>)
 8003838:	2200      	movs	r2, #0
 800383a:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 800383c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800383e:	6878      	ldr	r0, [r7, #4]
 8003840:	f000 f97d 	bl	8003b3e <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != 0U)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800384a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800384e:	2b00      	cmp	r3, #0
 8003850:	d016      	beq.n	8003880 <HAL_FDCAN_IRQHandler+0x254>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != 0U)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003858:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800385c:	2b00      	cmp	r3, #0
 800385e:	d00f      	beq.n	8003880 <HAL_FDCAN_IRQHandler+0x254>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003868:	651a      	str	r2, [r3, #80]	; 0x50
 800386a:	4b03      	ldr	r3, [pc, #12]	; (8003878 <HAL_FDCAN_IRQHandler+0x24c>)
 800386c:	2200      	movs	r2, #0
 800386e:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8003870:	6878      	ldr	r0, [r7, #4]
 8003872:	f000 f97a 	bl	8003b6a <HAL_FDCAN_RxBufferNewMessageCallback>
 8003876:	e003      	b.n	8003880 <HAL_FDCAN_IRQHandler+0x254>
 8003878:	4000a800 	.word	0x4000a800
 800387c:	3fcfffff 	.word	0x3fcfffff
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003886:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800388a:	2b00      	cmp	r3, #0
 800388c:	d011      	beq.n	80038b2 <HAL_FDCAN_IRQHandler+0x286>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003894:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003898:	2b00      	cmp	r3, #0
 800389a:	d00a      	beq.n	80038b2 <HAL_FDCAN_IRQHandler+0x286>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80038a4:	651a      	str	r2, [r3, #80]	; 0x50
 80038a6:	4b8d      	ldr	r3, [pc, #564]	; (8003adc <HAL_FDCAN_IRQHandler+0x4b0>)
 80038a8:	2200      	movs	r2, #0
 80038aa:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 80038ac:	6878      	ldr	r0, [r7, #4]
 80038ae:	f000 f966 	bl	8003b7e <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d011      	beq.n	80038e4 <HAL_FDCAN_IRQHandler+0x2b8>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d00a      	beq.n	80038e4 <HAL_FDCAN_IRQHandler+0x2b8>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80038d6:	651a      	str	r2, [r3, #80]	; 0x50
 80038d8:	4b80      	ldr	r3, [pc, #512]	; (8003adc <HAL_FDCAN_IRQHandler+0x4b0>)
 80038da:	2200      	movs	r2, #0
 80038dc:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 80038de:	6878      	ldr	r0, [r7, #4]
 80038e0:	f000 f957 	bl	8003b92 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d016      	beq.n	8003920 <HAL_FDCAN_IRQHandler+0x2f4>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d00f      	beq.n	8003920 <HAL_FDCAN_IRQHandler+0x2f4>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003908:	651a      	str	r2, [r3, #80]	; 0x50
 800390a:	4b74      	ldr	r3, [pc, #464]	; (8003adc <HAL_FDCAN_IRQHandler+0x4b0>)
 800390c:	2200      	movs	r2, #0
 800390e:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003916:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8003920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003922:	2b00      	cmp	r3, #0
 8003924:	d00d      	beq.n	8003942 <HAL_FDCAN_IRQHandler+0x316>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681a      	ldr	r2, [r3, #0]
 800392a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800392c:	4b6c      	ldr	r3, [pc, #432]	; (8003ae0 <HAL_FDCAN_IRQHandler+0x4b4>)
 800392e:	400b      	ands	r3, r1
 8003930:	6513      	str	r3, [r2, #80]	; 0x50
 8003932:	4a6a      	ldr	r2, [pc, #424]	; (8003adc <HAL_FDCAN_IRQHandler+0x4b0>)
 8003934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003936:	0f9b      	lsrs	r3, r3, #30
 8003938:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 800393a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800393c:	6878      	ldr	r0, [r7, #4]
 800393e:	f000 f946 	bl	8003bce <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8003942:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003944:	2b00      	cmp	r3, #0
 8003946:	d011      	beq.n	800396c <HAL_FDCAN_IRQHandler+0x340>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681a      	ldr	r2, [r3, #0]
 800394c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800394e:	4b64      	ldr	r3, [pc, #400]	; (8003ae0 <HAL_FDCAN_IRQHandler+0x4b4>)
 8003950:	400b      	ands	r3, r1
 8003952:	6513      	str	r3, [r2, #80]	; 0x50
 8003954:	4a61      	ldr	r2, [pc, #388]	; (8003adc <HAL_FDCAN_IRQHandler+0x4b0>)
 8003956:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003958:	0f9b      	lsrs	r3, r3, #30
 800395a:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8003962:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003964:	431a      	orrs	r2, r3
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a5c      	ldr	r2, [pc, #368]	; (8003ae4 <HAL_FDCAN_IRQHandler+0x4b8>)
 8003972:	4293      	cmp	r3, r2
 8003974:	f040 80a6 	bne.w	8003ac4 <HAL_FDCAN_IRQHandler+0x498>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	689b      	ldr	r3, [r3, #8]
 800397e:	f003 0303 	and.w	r3, r3, #3
 8003982:	2b00      	cmp	r3, #0
 8003984:	f000 809e 	beq.w	8003ac4 <HAL_FDCAN_IRQHandler+0x498>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	6a1b      	ldr	r3, [r3, #32]
 800398e:	f003 030f 	and.w	r3, r3, #15
 8003992:	627b      	str	r3, [r7, #36]	; 0x24
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800399a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800399c:	4013      	ands	r3, r2
 800399e:	627b      	str	r3, [r7, #36]	; 0x24
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	6a1b      	ldr	r3, [r3, #32]
 80039a6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80039aa:	623b      	str	r3, [r7, #32]
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b2:	6a3a      	ldr	r2, [r7, #32]
 80039b4:	4013      	ands	r3, r2
 80039b6:	623b      	str	r3, [r7, #32]
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	6a1b      	ldr	r3, [r3, #32]
 80039be:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 80039c2:	61fb      	str	r3, [r7, #28]
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ca:	69fa      	ldr	r2, [r7, #28]
 80039cc:	4013      	ands	r3, r2
 80039ce:	61fb      	str	r3, [r7, #28]
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	6a1b      	ldr	r3, [r3, #32]
 80039d6:	f403 43fc 	and.w	r3, r3, #32256	; 0x7e00
 80039da:	61bb      	str	r3, [r7, #24]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039e2:	69ba      	ldr	r2, [r7, #24]
 80039e4:	4013      	ands	r3, r2
 80039e6:	61bb      	str	r3, [r7, #24]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	6a1b      	ldr	r3, [r3, #32]
 80039ee:	f403 23f0 	and.w	r3, r3, #491520	; 0x78000
 80039f2:	617b      	str	r3, [r7, #20]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039fa:	697a      	ldr	r2, [r7, #20]
 80039fc:	4013      	ands	r3, r2
 80039fe:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 8003a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d007      	beq.n	8003a16 <HAL_FDCAN_IRQHandler+0x3ea>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a0c:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 8003a0e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003a10:	6878      	ldr	r0, [r7, #4]
 8003a12:	f000 f8e7 	bl	8003be4 <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 8003a16:	6a3b      	ldr	r3, [r7, #32]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d007      	beq.n	8003a2c <HAL_FDCAN_IRQHandler+0x400>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	6a3a      	ldr	r2, [r7, #32]
 8003a22:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 8003a24:	6a39      	ldr	r1, [r7, #32]
 8003a26:	6878      	ldr	r0, [r7, #4]
 8003a28:	f000 f8e7 	bl	8003bfa <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (__HAL_FDCAN_TT_GET_IT_SOURCE(hfdcan, FDCAN_TT_IT_STOP_WATCH) != 0U)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d01b      	beq.n	8003a72 <HAL_FDCAN_IRQHandler+0x446>
      {
        if (__HAL_FDCAN_TT_GET_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH) != 0U)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	6a1b      	ldr	r3, [r3, #32]
 8003a40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d014      	beq.n	8003a72 <HAL_FDCAN_IRQHandler+0x446>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a4e:	0c1b      	lsrs	r3, r3, #16
 8003a50:	b29b      	uxth	r3, r3
 8003a52:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a5a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a5e:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	2240      	movs	r2, #64	; 0x40
 8003a66:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 8003a68:	68fa      	ldr	r2, [r7, #12]
 8003a6a:	6939      	ldr	r1, [r7, #16]
 8003a6c:	6878      	ldr	r0, [r7, #4]
 8003a6e:	f000 f8cf 	bl	8003c10 <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 8003a72:	69fb      	ldr	r3, [r7, #28]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d007      	beq.n	8003a88 <HAL_FDCAN_IRQHandler+0x45c>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	69fa      	ldr	r2, [r7, #28]
 8003a7e:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 8003a80:	69f9      	ldr	r1, [r7, #28]
 8003a82:	6878      	ldr	r0, [r7, #4]
 8003a84:	f000 f8d0 	bl	8003c28 <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 8003a88:	69bb      	ldr	r3, [r7, #24]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d00b      	beq.n	8003aa6 <HAL_FDCAN_IRQHandler+0x47a>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	69ba      	ldr	r2, [r7, #24]
 8003a94:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8003a9c:	69bb      	ldr	r3, [r7, #24]
 8003a9e:	431a      	orrs	r2, r3
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d00b      	beq.n	8003ac4 <HAL_FDCAN_IRQHandler+0x498>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	697a      	ldr	r2, [r7, #20]
 8003ab2:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	431a      	orrs	r2, r3
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d002      	beq.n	8003ad4 <HAL_FDCAN_IRQHandler+0x4a8>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	f000 f873 	bl	8003bba <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8003ad4:	bf00      	nop
 8003ad6:	3748      	adds	r7, #72	; 0x48
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bd80      	pop	{r7, pc}
 8003adc:	4000a800 	.word	0x4000a800
 8003ae0:	3fcfffff 	.word	0x3fcfffff
 8003ae4:	4000a000 	.word	0x4000a000

08003ae8 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	b083      	sub	sp, #12
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
 8003af0:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 8003af2:	bf00      	nop
 8003af4:	370c      	adds	r7, #12
 8003af6:	46bd      	mov	sp, r7
 8003af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afc:	4770      	bx	lr

08003afe <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8003afe:	b480      	push	{r7}
 8003b00:	b083      	sub	sp, #12
 8003b02:	af00      	add	r7, sp, #0
 8003b04:	6078      	str	r0, [r7, #4]
 8003b06:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8003b08:	bf00      	nop
 8003b0a:	370c      	adds	r7, #12
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b12:	4770      	bx	lr

08003b14 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8003b14:	b480      	push	{r7}
 8003b16:	b083      	sub	sp, #12
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
 8003b1c:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8003b1e:	bf00      	nop
 8003b20:	370c      	adds	r7, #12
 8003b22:	46bd      	mov	sp, r7
 8003b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b28:	4770      	bx	lr

08003b2a <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003b2a:	b480      	push	{r7}
 8003b2c:	b083      	sub	sp, #12
 8003b2e:	af00      	add	r7, sp, #0
 8003b30:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8003b32:	bf00      	nop
 8003b34:	370c      	adds	r7, #12
 8003b36:	46bd      	mov	sp, r7
 8003b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3c:	4770      	bx	lr

08003b3e <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8003b3e:	b480      	push	{r7}
 8003b40:	b083      	sub	sp, #12
 8003b42:	af00      	add	r7, sp, #0
 8003b44:	6078      	str	r0, [r7, #4]
 8003b46:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8003b48:	bf00      	nop
 8003b4a:	370c      	adds	r7, #12
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b52:	4770      	bx	lr

08003b54 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8003b54:	b480      	push	{r7}
 8003b56:	b083      	sub	sp, #12
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
 8003b5c:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8003b5e:	bf00      	nop
 8003b60:	370c      	adds	r7, #12
 8003b62:	46bd      	mov	sp, r7
 8003b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b68:	4770      	bx	lr

08003b6a <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003b6a:	b480      	push	{r7}
 8003b6c:	b083      	sub	sp, #12
 8003b6e:	af00      	add	r7, sp, #0
 8003b70:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 8003b72:	bf00      	nop
 8003b74:	370c      	adds	r7, #12
 8003b76:	46bd      	mov	sp, r7
 8003b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7c:	4770      	bx	lr

08003b7e <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003b7e:	b480      	push	{r7}
 8003b80:	b083      	sub	sp, #12
 8003b82:	af00      	add	r7, sp, #0
 8003b84:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8003b86:	bf00      	nop
 8003b88:	370c      	adds	r7, #12
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b90:	4770      	bx	lr

08003b92 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003b92:	b480      	push	{r7}
 8003b94:	b083      	sub	sp, #12
 8003b96:	af00      	add	r7, sp, #0
 8003b98:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8003b9a:	bf00      	nop
 8003b9c:	370c      	adds	r7, #12
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba4:	4770      	bx	lr

08003ba6 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003ba6:	b480      	push	{r7}
 8003ba8:	b083      	sub	sp, #12
 8003baa:	af00      	add	r7, sp, #0
 8003bac:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8003bae:	bf00      	nop
 8003bb0:	370c      	adds	r7, #12
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb8:	4770      	bx	lr

08003bba <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003bba:	b480      	push	{r7}
 8003bbc:	b083      	sub	sp, #12
 8003bbe:	af00      	add	r7, sp, #0
 8003bc0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8003bc2:	bf00      	nop
 8003bc4:	370c      	adds	r7, #12
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bcc:	4770      	bx	lr

08003bce <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8003bce:	b480      	push	{r7}
 8003bd0:	b083      	sub	sp, #12
 8003bd2:	af00      	add	r7, sp, #0
 8003bd4:	6078      	str	r0, [r7, #4]
 8003bd6:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8003bd8:	bf00      	nop
 8003bda:	370c      	adds	r7, #12
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be2:	4770      	bx	lr

08003be4 <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 8003be4:	b480      	push	{r7}
 8003be6:	b083      	sub	sp, #12
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
 8003bec:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 8003bee:	bf00      	nop
 8003bf0:	370c      	adds	r7, #12
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf8:	4770      	bx	lr

08003bfa <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 8003bfa:	b480      	push	{r7}
 8003bfc:	b083      	sub	sp, #12
 8003bfe:	af00      	add	r7, sp, #0
 8003c00:	6078      	str	r0, [r7, #4]
 8003c02:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 8003c04:	bf00      	nop
 8003c06:	370c      	adds	r7, #12
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0e:	4770      	bx	lr

08003c10 <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 8003c10:	b480      	push	{r7}
 8003c12:	b085      	sub	sp, #20
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	60f8      	str	r0, [r7, #12]
 8003c18:	60b9      	str	r1, [r7, #8]
 8003c1a:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 8003c1c:	bf00      	nop
 8003c1e:	3714      	adds	r7, #20
 8003c20:	46bd      	mov	sp, r7
 8003c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c26:	4770      	bx	lr

08003c28 <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b083      	sub	sp, #12
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
 8003c30:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 8003c32:	bf00      	nop
 8003c34:	370c      	adds	r7, #12
 8003c36:	46bd      	mov	sp, r7
 8003c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3c:	4770      	bx	lr
	...

08003c40 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8003c40:	b480      	push	{r7}
 8003c42:	b085      	sub	sp, #20
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c4c:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8003c56:	4ba7      	ldr	r3, [pc, #668]	; (8003ef4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003c58:	4013      	ands	r3, r2
 8003c5a:	68ba      	ldr	r2, [r7, #8]
 8003c5c:	0091      	lsls	r1, r2, #2
 8003c5e:	687a      	ldr	r2, [r7, #4]
 8003c60:	6812      	ldr	r2, [r2, #0]
 8003c62:	430b      	orrs	r3, r1
 8003c64:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c70:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c78:	041a      	lsls	r2, r3, #16
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	430a      	orrs	r2, r1
 8003c80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c88:	68ba      	ldr	r2, [r7, #8]
 8003c8a:	4413      	add	r3, r2
 8003c8c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003c96:	4b97      	ldr	r3, [pc, #604]	; (8003ef4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003c98:	4013      	ands	r3, r2
 8003c9a:	68ba      	ldr	r2, [r7, #8]
 8003c9c:	0091      	lsls	r1, r2, #2
 8003c9e:	687a      	ldr	r2, [r7, #4]
 8003ca0:	6812      	ldr	r2, [r2, #0]
 8003ca2:	430b      	orrs	r3, r1
 8003ca4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cb0:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cb8:	041a      	lsls	r2, r3, #16
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	430a      	orrs	r2, r1
 8003cc0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cc8:	005b      	lsls	r3, r3, #1
 8003cca:	68ba      	ldr	r2, [r7, #8]
 8003ccc:	4413      	add	r3, r2
 8003cce:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8003cd8:	4b86      	ldr	r3, [pc, #536]	; (8003ef4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003cda:	4013      	ands	r3, r2
 8003cdc:	68ba      	ldr	r2, [r7, #8]
 8003cde:	0091      	lsls	r1, r2, #2
 8003ce0:	687a      	ldr	r2, [r7, #4]
 8003ce2:	6812      	ldr	r2, [r2, #0]
 8003ce4:	430b      	orrs	r3, r1
 8003ce6:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003cf2:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cfa:	041a      	lsls	r2, r3, #16
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	430a      	orrs	r2, r1
 8003d02:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d0a:	687a      	ldr	r2, [r7, #4]
 8003d0c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003d0e:	fb02 f303 	mul.w	r3, r2, r3
 8003d12:	68ba      	ldr	r2, [r7, #8]
 8003d14:	4413      	add	r3, r2
 8003d16:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003d20:	4b74      	ldr	r3, [pc, #464]	; (8003ef4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003d22:	4013      	ands	r3, r2
 8003d24:	68ba      	ldr	r2, [r7, #8]
 8003d26:	0091      	lsls	r1, r2, #2
 8003d28:	687a      	ldr	r2, [r7, #4]
 8003d2a:	6812      	ldr	r2, [r2, #0]
 8003d2c:	430b      	orrs	r3, r1
 8003d2e:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003d3a:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d42:	041a      	lsls	r2, r3, #16
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	430a      	orrs	r2, r1
 8003d4a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d52:	687a      	ldr	r2, [r7, #4]
 8003d54:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003d56:	fb02 f303 	mul.w	r3, r2, r3
 8003d5a:	68ba      	ldr	r2, [r7, #8]
 8003d5c:	4413      	add	r3, r2
 8003d5e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8003d68:	4b62      	ldr	r3, [pc, #392]	; (8003ef4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003d6a:	4013      	ands	r3, r2
 8003d6c:	68ba      	ldr	r2, [r7, #8]
 8003d6e:	0091      	lsls	r1, r2, #2
 8003d70:	687a      	ldr	r2, [r7, #4]
 8003d72:	6812      	ldr	r2, [r2, #0]
 8003d74:	430b      	orrs	r3, r1
 8003d76:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d7e:	687a      	ldr	r2, [r7, #4]
 8003d80:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8003d82:	fb02 f303 	mul.w	r3, r2, r3
 8003d86:	68ba      	ldr	r2, [r7, #8]
 8003d88:	4413      	add	r3, r2
 8003d8a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8003d94:	4b57      	ldr	r3, [pc, #348]	; (8003ef4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003d96:	4013      	ands	r3, r2
 8003d98:	68ba      	ldr	r2, [r7, #8]
 8003d9a:	0091      	lsls	r1, r2, #2
 8003d9c:	687a      	ldr	r2, [r7, #4]
 8003d9e:	6812      	ldr	r2, [r2, #0]
 8003da0:	430b      	orrs	r3, r1
 8003da2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003dae:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003db6:	041a      	lsls	r2, r3, #16
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	430a      	orrs	r2, r1
 8003dbe:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dc6:	005b      	lsls	r3, r3, #1
 8003dc8:	68ba      	ldr	r2, [r7, #8]
 8003dca:	4413      	add	r3, r2
 8003dcc:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8003dd6:	4b47      	ldr	r3, [pc, #284]	; (8003ef4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003dd8:	4013      	ands	r3, r2
 8003dda:	68ba      	ldr	r2, [r7, #8]
 8003ddc:	0091      	lsls	r1, r2, #2
 8003dde:	687a      	ldr	r2, [r7, #4]
 8003de0:	6812      	ldr	r2, [r2, #0]
 8003de2:	430b      	orrs	r3, r1
 8003de4:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003df0:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003df8:	041a      	lsls	r2, r3, #16
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	430a      	orrs	r2, r1
 8003e00:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003e0c:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e14:	061a      	lsls	r2, r3, #24
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	430a      	orrs	r2, r1
 8003e1c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e24:	4b34      	ldr	r3, [pc, #208]	; (8003ef8 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8003e26:	4413      	add	r3, r2
 8003e28:	009a      	lsls	r2, r3, #2
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e36:	009b      	lsls	r3, r3, #2
 8003e38:	441a      	add	r2, r3
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e46:	00db      	lsls	r3, r3, #3
 8003e48:	441a      	add	r2, r3
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e56:	6879      	ldr	r1, [r7, #4]
 8003e58:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8003e5a:	fb01 f303 	mul.w	r3, r1, r3
 8003e5e:	009b      	lsls	r3, r3, #2
 8003e60:	441a      	add	r2, r3
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e6e:	6879      	ldr	r1, [r7, #4]
 8003e70:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8003e72:	fb01 f303 	mul.w	r3, r1, r3
 8003e76:	009b      	lsls	r3, r3, #2
 8003e78:	441a      	add	r2, r3
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e86:	6879      	ldr	r1, [r7, #4]
 8003e88:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8003e8a:	fb01 f303 	mul.w	r3, r1, r3
 8003e8e:	009b      	lsls	r3, r3, #2
 8003e90:	441a      	add	r2, r3
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ea2:	00db      	lsls	r3, r3, #3
 8003ea4:	441a      	add	r2, r3
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003eb6:	6879      	ldr	r1, [r7, #4]
 8003eb8:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8003eba:	fb01 f303 	mul.w	r3, r1, r3
 8003ebe:	009b      	lsls	r3, r3, #2
 8003ec0:	441a      	add	r2, r3
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ed2:	6879      	ldr	r1, [r7, #4]
 8003ed4:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8003ed6:	fb01 f303 	mul.w	r3, r1, r3
 8003eda:	009b      	lsls	r3, r3, #2
 8003edc:	441a      	add	r2, r3
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eea:	4a04      	ldr	r2, [pc, #16]	; (8003efc <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d915      	bls.n	8003f1c <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8003ef0:	e006      	b.n	8003f00 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8003ef2:	bf00      	nop
 8003ef4:	ffff0003 	.word	0xffff0003
 8003ef8:	10002b00 	.word	0x10002b00
 8003efc:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003f06:	f043 0220 	orr.w	r2, r3, #32
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2203      	movs	r2, #3
 8003f14:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8003f18:	2301      	movs	r3, #1
 8003f1a:	e010      	b.n	8003f3e <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f20:	60fb      	str	r3, [r7, #12]
 8003f22:	e005      	b.n	8003f30 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	2200      	movs	r2, #0
 8003f28:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	3304      	adds	r3, #4
 8003f2e:	60fb      	str	r3, [r7, #12]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f36:	68fa      	ldr	r2, [r7, #12]
 8003f38:	429a      	cmp	r2, r3
 8003f3a:	d3f3      	bcc.n	8003f24 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8003f3c:	2300      	movs	r3, #0
}
 8003f3e:	4618      	mov	r0, r3
 8003f40:	3714      	adds	r7, #20
 8003f42:	46bd      	mov	sp, r7
 8003f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f48:	4770      	bx	lr
 8003f4a:	bf00      	nop

08003f4c <FDCAN_CopyMessageToRAM>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @param  BufferIndex index of the buffer to be configured.
  * @retval HAL status
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData, uint32_t BufferIndex)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	b089      	sub	sp, #36	; 0x24
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	60f8      	str	r0, [r7, #12]
 8003f54:	60b9      	str	r1, [r7, #8]
 8003f56:	607a      	str	r2, [r7, #4]
 8003f58:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8003f5a:	68bb      	ldr	r3, [r7, #8]
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d10a      	bne.n	8003f78 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8003f62:	68bb      	ldr	r3, [r7, #8]
 8003f64:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8003f6a:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18));
 8003f6c:	68bb      	ldr	r3, [r7, #8]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8003f72:	4313      	orrs	r3, r2
 8003f74:	61fb      	str	r3, [r7, #28]
 8003f76:	e00a      	b.n	8003f8e <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8003f80:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8003f82:	68bb      	ldr	r3, [r7, #8]
 8003f84:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8003f86:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8003f88:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003f8c:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	6a1b      	ldr	r3, [r3, #32]
 8003f92:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 8003f98:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8003f9e:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8003fa4:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 8003fa6:	68bb      	ldr	r3, [r7, #8]
 8003fa8:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 8003faa:	4313      	orrs	r3, r2
 8003fac:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003fb8:	6839      	ldr	r1, [r7, #0]
 8003fba:	fb01 f303 	mul.w	r3, r1, r3
 8003fbe:	009b      	lsls	r3, r3, #2
 8003fc0:	4413      	add	r3, r2
 8003fc2:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8003fc4:	69bb      	ldr	r3, [r7, #24]
 8003fc6:	69fa      	ldr	r2, [r7, #28]
 8003fc8:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8003fca:	69bb      	ldr	r3, [r7, #24]
 8003fcc:	3304      	adds	r3, #4
 8003fce:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8003fd0:	69bb      	ldr	r3, [r7, #24]
 8003fd2:	693a      	ldr	r2, [r7, #16]
 8003fd4:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8003fd6:	69bb      	ldr	r3, [r7, #24]
 8003fd8:	3304      	adds	r3, #4
 8003fda:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 8003fdc:	2300      	movs	r3, #0
 8003fde:	617b      	str	r3, [r7, #20]
 8003fe0:	e020      	b.n	8004024 <FDCAN_CopyMessageToRAM+0xd8>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 8003fe2:	697b      	ldr	r3, [r7, #20]
 8003fe4:	3303      	adds	r3, #3
 8003fe6:	687a      	ldr	r2, [r7, #4]
 8003fe8:	4413      	add	r3, r2
 8003fea:	781b      	ldrb	r3, [r3, #0]
 8003fec:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 8003fee:	697b      	ldr	r3, [r7, #20]
 8003ff0:	3302      	adds	r3, #2
 8003ff2:	6879      	ldr	r1, [r7, #4]
 8003ff4:	440b      	add	r3, r1
 8003ff6:	781b      	ldrb	r3, [r3, #0]
 8003ff8:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 8003ffa:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 8003ffc:	697b      	ldr	r3, [r7, #20]
 8003ffe:	3301      	adds	r3, #1
 8004000:	6879      	ldr	r1, [r7, #4]
 8004002:	440b      	add	r3, r1
 8004004:	781b      	ldrb	r3, [r3, #0]
 8004006:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 8004008:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 800400a:	6879      	ldr	r1, [r7, #4]
 800400c:	697a      	ldr	r2, [r7, #20]
 800400e:	440a      	add	r2, r1
 8004010:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 8004012:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 8004014:	69bb      	ldr	r3, [r7, #24]
 8004016:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8004018:	69bb      	ldr	r3, [r7, #24]
 800401a:	3304      	adds	r3, #4
 800401c:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	3304      	adds	r3, #4
 8004022:	617b      	str	r3, [r7, #20]
 8004024:	68bb      	ldr	r3, [r7, #8]
 8004026:	68db      	ldr	r3, [r3, #12]
 8004028:	0c1b      	lsrs	r3, r3, #16
 800402a:	4a06      	ldr	r2, [pc, #24]	; (8004044 <FDCAN_CopyMessageToRAM+0xf8>)
 800402c:	5cd3      	ldrb	r3, [r2, r3]
 800402e:	461a      	mov	r2, r3
 8004030:	697b      	ldr	r3, [r7, #20]
 8004032:	4293      	cmp	r3, r2
 8004034:	d3d5      	bcc.n	8003fe2 <FDCAN_CopyMessageToRAM+0x96>
  }
}
 8004036:	bf00      	nop
 8004038:	bf00      	nop
 800403a:	3724      	adds	r7, #36	; 0x24
 800403c:	46bd      	mov	sp, r7
 800403e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004042:	4770      	bx	lr
 8004044:	0800949c 	.word	0x0800949c

08004048 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004048:	b480      	push	{r7}
 800404a:	b089      	sub	sp, #36	; 0x24
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
 8004050:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004052:	2300      	movs	r3, #0
 8004054:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004056:	4b89      	ldr	r3, [pc, #548]	; (800427c <HAL_GPIO_Init+0x234>)
 8004058:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800405a:	e194      	b.n	8004386 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	681a      	ldr	r2, [r3, #0]
 8004060:	2101      	movs	r1, #1
 8004062:	69fb      	ldr	r3, [r7, #28]
 8004064:	fa01 f303 	lsl.w	r3, r1, r3
 8004068:	4013      	ands	r3, r2
 800406a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800406c:	693b      	ldr	r3, [r7, #16]
 800406e:	2b00      	cmp	r3, #0
 8004070:	f000 8186 	beq.w	8004380 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	f003 0303 	and.w	r3, r3, #3
 800407c:	2b01      	cmp	r3, #1
 800407e:	d005      	beq.n	800408c <HAL_GPIO_Init+0x44>
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	f003 0303 	and.w	r3, r3, #3
 8004088:	2b02      	cmp	r3, #2
 800408a:	d130      	bne.n	80040ee <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004092:	69fb      	ldr	r3, [r7, #28]
 8004094:	005b      	lsls	r3, r3, #1
 8004096:	2203      	movs	r2, #3
 8004098:	fa02 f303 	lsl.w	r3, r2, r3
 800409c:	43db      	mvns	r3, r3
 800409e:	69ba      	ldr	r2, [r7, #24]
 80040a0:	4013      	ands	r3, r2
 80040a2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	68da      	ldr	r2, [r3, #12]
 80040a8:	69fb      	ldr	r3, [r7, #28]
 80040aa:	005b      	lsls	r3, r3, #1
 80040ac:	fa02 f303 	lsl.w	r3, r2, r3
 80040b0:	69ba      	ldr	r2, [r7, #24]
 80040b2:	4313      	orrs	r3, r2
 80040b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	69ba      	ldr	r2, [r7, #24]
 80040ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80040c2:	2201      	movs	r2, #1
 80040c4:	69fb      	ldr	r3, [r7, #28]
 80040c6:	fa02 f303 	lsl.w	r3, r2, r3
 80040ca:	43db      	mvns	r3, r3
 80040cc:	69ba      	ldr	r2, [r7, #24]
 80040ce:	4013      	ands	r3, r2
 80040d0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	091b      	lsrs	r3, r3, #4
 80040d8:	f003 0201 	and.w	r2, r3, #1
 80040dc:	69fb      	ldr	r3, [r7, #28]
 80040de:	fa02 f303 	lsl.w	r3, r2, r3
 80040e2:	69ba      	ldr	r2, [r7, #24]
 80040e4:	4313      	orrs	r3, r2
 80040e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	69ba      	ldr	r2, [r7, #24]
 80040ec:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	685b      	ldr	r3, [r3, #4]
 80040f2:	f003 0303 	and.w	r3, r3, #3
 80040f6:	2b03      	cmp	r3, #3
 80040f8:	d017      	beq.n	800412a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	68db      	ldr	r3, [r3, #12]
 80040fe:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004100:	69fb      	ldr	r3, [r7, #28]
 8004102:	005b      	lsls	r3, r3, #1
 8004104:	2203      	movs	r2, #3
 8004106:	fa02 f303 	lsl.w	r3, r2, r3
 800410a:	43db      	mvns	r3, r3
 800410c:	69ba      	ldr	r2, [r7, #24]
 800410e:	4013      	ands	r3, r2
 8004110:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	689a      	ldr	r2, [r3, #8]
 8004116:	69fb      	ldr	r3, [r7, #28]
 8004118:	005b      	lsls	r3, r3, #1
 800411a:	fa02 f303 	lsl.w	r3, r2, r3
 800411e:	69ba      	ldr	r2, [r7, #24]
 8004120:	4313      	orrs	r3, r2
 8004122:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	69ba      	ldr	r2, [r7, #24]
 8004128:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	f003 0303 	and.w	r3, r3, #3
 8004132:	2b02      	cmp	r3, #2
 8004134:	d123      	bne.n	800417e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004136:	69fb      	ldr	r3, [r7, #28]
 8004138:	08da      	lsrs	r2, r3, #3
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	3208      	adds	r2, #8
 800413e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004142:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004144:	69fb      	ldr	r3, [r7, #28]
 8004146:	f003 0307 	and.w	r3, r3, #7
 800414a:	009b      	lsls	r3, r3, #2
 800414c:	220f      	movs	r2, #15
 800414e:	fa02 f303 	lsl.w	r3, r2, r3
 8004152:	43db      	mvns	r3, r3
 8004154:	69ba      	ldr	r2, [r7, #24]
 8004156:	4013      	ands	r3, r2
 8004158:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	691a      	ldr	r2, [r3, #16]
 800415e:	69fb      	ldr	r3, [r7, #28]
 8004160:	f003 0307 	and.w	r3, r3, #7
 8004164:	009b      	lsls	r3, r3, #2
 8004166:	fa02 f303 	lsl.w	r3, r2, r3
 800416a:	69ba      	ldr	r2, [r7, #24]
 800416c:	4313      	orrs	r3, r2
 800416e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004170:	69fb      	ldr	r3, [r7, #28]
 8004172:	08da      	lsrs	r2, r3, #3
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	3208      	adds	r2, #8
 8004178:	69b9      	ldr	r1, [r7, #24]
 800417a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004184:	69fb      	ldr	r3, [r7, #28]
 8004186:	005b      	lsls	r3, r3, #1
 8004188:	2203      	movs	r2, #3
 800418a:	fa02 f303 	lsl.w	r3, r2, r3
 800418e:	43db      	mvns	r3, r3
 8004190:	69ba      	ldr	r2, [r7, #24]
 8004192:	4013      	ands	r3, r2
 8004194:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	f003 0203 	and.w	r2, r3, #3
 800419e:	69fb      	ldr	r3, [r7, #28]
 80041a0:	005b      	lsls	r3, r3, #1
 80041a2:	fa02 f303 	lsl.w	r3, r2, r3
 80041a6:	69ba      	ldr	r2, [r7, #24]
 80041a8:	4313      	orrs	r3, r2
 80041aa:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	69ba      	ldr	r2, [r7, #24]
 80041b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	f000 80e0 	beq.w	8004380 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80041c0:	4b2f      	ldr	r3, [pc, #188]	; (8004280 <HAL_GPIO_Init+0x238>)
 80041c2:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80041c6:	4a2e      	ldr	r2, [pc, #184]	; (8004280 <HAL_GPIO_Init+0x238>)
 80041c8:	f043 0302 	orr.w	r3, r3, #2
 80041cc:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 80041d0:	4b2b      	ldr	r3, [pc, #172]	; (8004280 <HAL_GPIO_Init+0x238>)
 80041d2:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80041d6:	f003 0302 	and.w	r3, r3, #2
 80041da:	60fb      	str	r3, [r7, #12]
 80041dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80041de:	4a29      	ldr	r2, [pc, #164]	; (8004284 <HAL_GPIO_Init+0x23c>)
 80041e0:	69fb      	ldr	r3, [r7, #28]
 80041e2:	089b      	lsrs	r3, r3, #2
 80041e4:	3302      	adds	r3, #2
 80041e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80041ec:	69fb      	ldr	r3, [r7, #28]
 80041ee:	f003 0303 	and.w	r3, r3, #3
 80041f2:	009b      	lsls	r3, r3, #2
 80041f4:	220f      	movs	r2, #15
 80041f6:	fa02 f303 	lsl.w	r3, r2, r3
 80041fa:	43db      	mvns	r3, r3
 80041fc:	69ba      	ldr	r2, [r7, #24]
 80041fe:	4013      	ands	r3, r2
 8004200:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	4a20      	ldr	r2, [pc, #128]	; (8004288 <HAL_GPIO_Init+0x240>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d052      	beq.n	80042b0 <HAL_GPIO_Init+0x268>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	4a1f      	ldr	r2, [pc, #124]	; (800428c <HAL_GPIO_Init+0x244>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d031      	beq.n	8004276 <HAL_GPIO_Init+0x22e>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	4a1e      	ldr	r2, [pc, #120]	; (8004290 <HAL_GPIO_Init+0x248>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d02b      	beq.n	8004272 <HAL_GPIO_Init+0x22a>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	4a1d      	ldr	r2, [pc, #116]	; (8004294 <HAL_GPIO_Init+0x24c>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d025      	beq.n	800426e <HAL_GPIO_Init+0x226>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	4a1c      	ldr	r2, [pc, #112]	; (8004298 <HAL_GPIO_Init+0x250>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d01f      	beq.n	800426a <HAL_GPIO_Init+0x222>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	4a1b      	ldr	r2, [pc, #108]	; (800429c <HAL_GPIO_Init+0x254>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d019      	beq.n	8004266 <HAL_GPIO_Init+0x21e>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	4a1a      	ldr	r2, [pc, #104]	; (80042a0 <HAL_GPIO_Init+0x258>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d013      	beq.n	8004262 <HAL_GPIO_Init+0x21a>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	4a19      	ldr	r2, [pc, #100]	; (80042a4 <HAL_GPIO_Init+0x25c>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d00d      	beq.n	800425e <HAL_GPIO_Init+0x216>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	4a18      	ldr	r2, [pc, #96]	; (80042a8 <HAL_GPIO_Init+0x260>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d007      	beq.n	800425a <HAL_GPIO_Init+0x212>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	4a17      	ldr	r2, [pc, #92]	; (80042ac <HAL_GPIO_Init+0x264>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d101      	bne.n	8004256 <HAL_GPIO_Init+0x20e>
 8004252:	2309      	movs	r3, #9
 8004254:	e02d      	b.n	80042b2 <HAL_GPIO_Init+0x26a>
 8004256:	230a      	movs	r3, #10
 8004258:	e02b      	b.n	80042b2 <HAL_GPIO_Init+0x26a>
 800425a:	2308      	movs	r3, #8
 800425c:	e029      	b.n	80042b2 <HAL_GPIO_Init+0x26a>
 800425e:	2307      	movs	r3, #7
 8004260:	e027      	b.n	80042b2 <HAL_GPIO_Init+0x26a>
 8004262:	2306      	movs	r3, #6
 8004264:	e025      	b.n	80042b2 <HAL_GPIO_Init+0x26a>
 8004266:	2305      	movs	r3, #5
 8004268:	e023      	b.n	80042b2 <HAL_GPIO_Init+0x26a>
 800426a:	2304      	movs	r3, #4
 800426c:	e021      	b.n	80042b2 <HAL_GPIO_Init+0x26a>
 800426e:	2303      	movs	r3, #3
 8004270:	e01f      	b.n	80042b2 <HAL_GPIO_Init+0x26a>
 8004272:	2302      	movs	r3, #2
 8004274:	e01d      	b.n	80042b2 <HAL_GPIO_Init+0x26a>
 8004276:	2301      	movs	r3, #1
 8004278:	e01b      	b.n	80042b2 <HAL_GPIO_Init+0x26a>
 800427a:	bf00      	nop
 800427c:	58000080 	.word	0x58000080
 8004280:	58024400 	.word	0x58024400
 8004284:	58000400 	.word	0x58000400
 8004288:	58020000 	.word	0x58020000
 800428c:	58020400 	.word	0x58020400
 8004290:	58020800 	.word	0x58020800
 8004294:	58020c00 	.word	0x58020c00
 8004298:	58021000 	.word	0x58021000
 800429c:	58021400 	.word	0x58021400
 80042a0:	58021800 	.word	0x58021800
 80042a4:	58021c00 	.word	0x58021c00
 80042a8:	58022000 	.word	0x58022000
 80042ac:	58022400 	.word	0x58022400
 80042b0:	2300      	movs	r3, #0
 80042b2:	69fa      	ldr	r2, [r7, #28]
 80042b4:	f002 0203 	and.w	r2, r2, #3
 80042b8:	0092      	lsls	r2, r2, #2
 80042ba:	4093      	lsls	r3, r2
 80042bc:	69ba      	ldr	r2, [r7, #24]
 80042be:	4313      	orrs	r3, r2
 80042c0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80042c2:	4938      	ldr	r1, [pc, #224]	; (80043a4 <HAL_GPIO_Init+0x35c>)
 80042c4:	69fb      	ldr	r3, [r7, #28]
 80042c6:	089b      	lsrs	r3, r3, #2
 80042c8:	3302      	adds	r3, #2
 80042ca:	69ba      	ldr	r2, [r7, #24]
 80042cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80042d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80042d8:	693b      	ldr	r3, [r7, #16]
 80042da:	43db      	mvns	r3, r3
 80042dc:	69ba      	ldr	r2, [r7, #24]
 80042de:	4013      	ands	r3, r2
 80042e0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d003      	beq.n	80042f6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80042ee:	69ba      	ldr	r2, [r7, #24]
 80042f0:	693b      	ldr	r3, [r7, #16]
 80042f2:	4313      	orrs	r3, r2
 80042f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80042f6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80042fa:	69bb      	ldr	r3, [r7, #24]
 80042fc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80042fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004306:	693b      	ldr	r3, [r7, #16]
 8004308:	43db      	mvns	r3, r3
 800430a:	69ba      	ldr	r2, [r7, #24]
 800430c:	4013      	ands	r3, r2
 800430e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	685b      	ldr	r3, [r3, #4]
 8004314:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004318:	2b00      	cmp	r3, #0
 800431a:	d003      	beq.n	8004324 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800431c:	69ba      	ldr	r2, [r7, #24]
 800431e:	693b      	ldr	r3, [r7, #16]
 8004320:	4313      	orrs	r3, r2
 8004322:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004324:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004328:	69bb      	ldr	r3, [r7, #24]
 800432a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800432c:	697b      	ldr	r3, [r7, #20]
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004332:	693b      	ldr	r3, [r7, #16]
 8004334:	43db      	mvns	r3, r3
 8004336:	69ba      	ldr	r2, [r7, #24]
 8004338:	4013      	ands	r3, r2
 800433a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004344:	2b00      	cmp	r3, #0
 8004346:	d003      	beq.n	8004350 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8004348:	69ba      	ldr	r2, [r7, #24]
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	4313      	orrs	r3, r2
 800434e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004350:	697b      	ldr	r3, [r7, #20]
 8004352:	69ba      	ldr	r2, [r7, #24]
 8004354:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004356:	697b      	ldr	r3, [r7, #20]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800435c:	693b      	ldr	r3, [r7, #16]
 800435e:	43db      	mvns	r3, r3
 8004360:	69ba      	ldr	r2, [r7, #24]
 8004362:	4013      	ands	r3, r2
 8004364:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800436e:	2b00      	cmp	r3, #0
 8004370:	d003      	beq.n	800437a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8004372:	69ba      	ldr	r2, [r7, #24]
 8004374:	693b      	ldr	r3, [r7, #16]
 8004376:	4313      	orrs	r3, r2
 8004378:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800437a:	697b      	ldr	r3, [r7, #20]
 800437c:	69ba      	ldr	r2, [r7, #24]
 800437e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004380:	69fb      	ldr	r3, [r7, #28]
 8004382:	3301      	adds	r3, #1
 8004384:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	681a      	ldr	r2, [r3, #0]
 800438a:	69fb      	ldr	r3, [r7, #28]
 800438c:	fa22 f303 	lsr.w	r3, r2, r3
 8004390:	2b00      	cmp	r3, #0
 8004392:	f47f ae63 	bne.w	800405c <HAL_GPIO_Init+0x14>
  }
}
 8004396:	bf00      	nop
 8004398:	bf00      	nop
 800439a:	3724      	adds	r7, #36	; 0x24
 800439c:	46bd      	mov	sp, r7
 800439e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a2:	4770      	bx	lr
 80043a4:	58000400 	.word	0x58000400

080043a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80043a8:	b480      	push	{r7}
 80043aa:	b083      	sub	sp, #12
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
 80043b0:	460b      	mov	r3, r1
 80043b2:	807b      	strh	r3, [r7, #2]
 80043b4:	4613      	mov	r3, r2
 80043b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80043b8:	787b      	ldrb	r3, [r7, #1]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d003      	beq.n	80043c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80043be:	887a      	ldrh	r2, [r7, #2]
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80043c4:	e003      	b.n	80043ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80043c6:	887b      	ldrh	r3, [r7, #2]
 80043c8:	041a      	lsls	r2, r3, #16
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	619a      	str	r2, [r3, #24]
}
 80043ce:	bf00      	nop
 80043d0:	370c      	adds	r7, #12
 80043d2:	46bd      	mov	sp, r7
 80043d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d8:	4770      	bx	lr
	...

080043dc <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b084      	sub	sp, #16
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80043e4:	4b29      	ldr	r3, [pc, #164]	; (800448c <HAL_PWREx_ConfigSupply+0xb0>)
 80043e6:	68db      	ldr	r3, [r3, #12]
 80043e8:	f003 0307 	and.w	r3, r3, #7
 80043ec:	2b06      	cmp	r3, #6
 80043ee:	d00a      	beq.n	8004406 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80043f0:	4b26      	ldr	r3, [pc, #152]	; (800448c <HAL_PWREx_ConfigSupply+0xb0>)
 80043f2:	68db      	ldr	r3, [r3, #12]
 80043f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80043f8:	687a      	ldr	r2, [r7, #4]
 80043fa:	429a      	cmp	r2, r3
 80043fc:	d001      	beq.n	8004402 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80043fe:	2301      	movs	r3, #1
 8004400:	e040      	b.n	8004484 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004402:	2300      	movs	r3, #0
 8004404:	e03e      	b.n	8004484 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004406:	4b21      	ldr	r3, [pc, #132]	; (800448c <HAL_PWREx_ConfigSupply+0xb0>)
 8004408:	68db      	ldr	r3, [r3, #12]
 800440a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800440e:	491f      	ldr	r1, [pc, #124]	; (800448c <HAL_PWREx_ConfigSupply+0xb0>)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	4313      	orrs	r3, r2
 8004414:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004416:	f7fd f967 	bl	80016e8 <HAL_GetTick>
 800441a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800441c:	e009      	b.n	8004432 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800441e:	f7fd f963 	bl	80016e8 <HAL_GetTick>
 8004422:	4602      	mov	r2, r0
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	1ad3      	subs	r3, r2, r3
 8004428:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800442c:	d901      	bls.n	8004432 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800442e:	2301      	movs	r3, #1
 8004430:	e028      	b.n	8004484 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004432:	4b16      	ldr	r3, [pc, #88]	; (800448c <HAL_PWREx_ConfigSupply+0xb0>)
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800443a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800443e:	d1ee      	bne.n	800441e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2b1e      	cmp	r3, #30
 8004444:	d008      	beq.n	8004458 <HAL_PWREx_ConfigSupply+0x7c>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2b2e      	cmp	r3, #46	; 0x2e
 800444a:	d005      	beq.n	8004458 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2b1d      	cmp	r3, #29
 8004450:	d002      	beq.n	8004458 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2b2d      	cmp	r3, #45	; 0x2d
 8004456:	d114      	bne.n	8004482 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8004458:	f7fd f946 	bl	80016e8 <HAL_GetTick>
 800445c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800445e:	e009      	b.n	8004474 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004460:	f7fd f942 	bl	80016e8 <HAL_GetTick>
 8004464:	4602      	mov	r2, r0
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	1ad3      	subs	r3, r2, r3
 800446a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800446e:	d901      	bls.n	8004474 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8004470:	2301      	movs	r3, #1
 8004472:	e007      	b.n	8004484 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004474:	4b05      	ldr	r3, [pc, #20]	; (800448c <HAL_PWREx_ConfigSupply+0xb0>)
 8004476:	68db      	ldr	r3, [r3, #12]
 8004478:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800447c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004480:	d1ee      	bne.n	8004460 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004482:	2300      	movs	r3, #0
}
 8004484:	4618      	mov	r0, r3
 8004486:	3710      	adds	r7, #16
 8004488:	46bd      	mov	sp, r7
 800448a:	bd80      	pop	{r7, pc}
 800448c:	58024800 	.word	0x58024800

08004490 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b08c      	sub	sp, #48	; 0x30
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d101      	bne.n	80044a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800449e:	2301      	movs	r3, #1
 80044a0:	e3f3      	b.n	8004c8a <HAL_RCC_OscConfig+0x7fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f003 0301 	and.w	r3, r3, #1
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	f000 80b3 	beq.w	8004616 <HAL_RCC_OscConfig+0x186>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80044b0:	4b9e      	ldr	r3, [pc, #632]	; (800472c <HAL_RCC_OscConfig+0x29c>)
 80044b2:	691b      	ldr	r3, [r3, #16]
 80044b4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80044b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80044ba:	4b9c      	ldr	r3, [pc, #624]	; (800472c <HAL_RCC_OscConfig+0x29c>)
 80044bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044be:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80044c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044c2:	2b10      	cmp	r3, #16
 80044c4:	d007      	beq.n	80044d6 <HAL_RCC_OscConfig+0x46>
 80044c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044c8:	2b18      	cmp	r3, #24
 80044ca:	d112      	bne.n	80044f2 <HAL_RCC_OscConfig+0x62>
 80044cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044ce:	f003 0303 	and.w	r3, r3, #3
 80044d2:	2b02      	cmp	r3, #2
 80044d4:	d10d      	bne.n	80044f2 <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044d6:	4b95      	ldr	r3, [pc, #596]	; (800472c <HAL_RCC_OscConfig+0x29c>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044de:	2b00      	cmp	r3, #0
 80044e0:	f000 8098 	beq.w	8004614 <HAL_RCC_OscConfig+0x184>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	f040 8093 	bne.w	8004614 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 80044ee:	2301      	movs	r3, #1
 80044f0:	e3cb      	b.n	8004c8a <HAL_RCC_OscConfig+0x7fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044fa:	d106      	bne.n	800450a <HAL_RCC_OscConfig+0x7a>
 80044fc:	4b8b      	ldr	r3, [pc, #556]	; (800472c <HAL_RCC_OscConfig+0x29c>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a8a      	ldr	r2, [pc, #552]	; (800472c <HAL_RCC_OscConfig+0x29c>)
 8004502:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004506:	6013      	str	r3, [r2, #0]
 8004508:	e058      	b.n	80045bc <HAL_RCC_OscConfig+0x12c>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d112      	bne.n	8004538 <HAL_RCC_OscConfig+0xa8>
 8004512:	4b86      	ldr	r3, [pc, #536]	; (800472c <HAL_RCC_OscConfig+0x29c>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4a85      	ldr	r2, [pc, #532]	; (800472c <HAL_RCC_OscConfig+0x29c>)
 8004518:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800451c:	6013      	str	r3, [r2, #0]
 800451e:	4b83      	ldr	r3, [pc, #524]	; (800472c <HAL_RCC_OscConfig+0x29c>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4a82      	ldr	r2, [pc, #520]	; (800472c <HAL_RCC_OscConfig+0x29c>)
 8004524:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004528:	6013      	str	r3, [r2, #0]
 800452a:	4b80      	ldr	r3, [pc, #512]	; (800472c <HAL_RCC_OscConfig+0x29c>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4a7f      	ldr	r2, [pc, #508]	; (800472c <HAL_RCC_OscConfig+0x29c>)
 8004530:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004534:	6013      	str	r3, [r2, #0]
 8004536:	e041      	b.n	80045bc <HAL_RCC_OscConfig+0x12c>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	685b      	ldr	r3, [r3, #4]
 800453c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004540:	d112      	bne.n	8004568 <HAL_RCC_OscConfig+0xd8>
 8004542:	4b7a      	ldr	r3, [pc, #488]	; (800472c <HAL_RCC_OscConfig+0x29c>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4a79      	ldr	r2, [pc, #484]	; (800472c <HAL_RCC_OscConfig+0x29c>)
 8004548:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800454c:	6013      	str	r3, [r2, #0]
 800454e:	4b77      	ldr	r3, [pc, #476]	; (800472c <HAL_RCC_OscConfig+0x29c>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4a76      	ldr	r2, [pc, #472]	; (800472c <HAL_RCC_OscConfig+0x29c>)
 8004554:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004558:	6013      	str	r3, [r2, #0]
 800455a:	4b74      	ldr	r3, [pc, #464]	; (800472c <HAL_RCC_OscConfig+0x29c>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4a73      	ldr	r2, [pc, #460]	; (800472c <HAL_RCC_OscConfig+0x29c>)
 8004560:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004564:	6013      	str	r3, [r2, #0]
 8004566:	e029      	b.n	80045bc <HAL_RCC_OscConfig+0x12c>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8004570:	d112      	bne.n	8004598 <HAL_RCC_OscConfig+0x108>
 8004572:	4b6e      	ldr	r3, [pc, #440]	; (800472c <HAL_RCC_OscConfig+0x29c>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4a6d      	ldr	r2, [pc, #436]	; (800472c <HAL_RCC_OscConfig+0x29c>)
 8004578:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800457c:	6013      	str	r3, [r2, #0]
 800457e:	4b6b      	ldr	r3, [pc, #428]	; (800472c <HAL_RCC_OscConfig+0x29c>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4a6a      	ldr	r2, [pc, #424]	; (800472c <HAL_RCC_OscConfig+0x29c>)
 8004584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004588:	6013      	str	r3, [r2, #0]
 800458a:	4b68      	ldr	r3, [pc, #416]	; (800472c <HAL_RCC_OscConfig+0x29c>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a67      	ldr	r2, [pc, #412]	; (800472c <HAL_RCC_OscConfig+0x29c>)
 8004590:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004594:	6013      	str	r3, [r2, #0]
 8004596:	e011      	b.n	80045bc <HAL_RCC_OscConfig+0x12c>
 8004598:	4b64      	ldr	r3, [pc, #400]	; (800472c <HAL_RCC_OscConfig+0x29c>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a63      	ldr	r2, [pc, #396]	; (800472c <HAL_RCC_OscConfig+0x29c>)
 800459e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045a2:	6013      	str	r3, [r2, #0]
 80045a4:	4b61      	ldr	r3, [pc, #388]	; (800472c <HAL_RCC_OscConfig+0x29c>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4a60      	ldr	r2, [pc, #384]	; (800472c <HAL_RCC_OscConfig+0x29c>)
 80045aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80045ae:	6013      	str	r3, [r2, #0]
 80045b0:	4b5e      	ldr	r3, [pc, #376]	; (800472c <HAL_RCC_OscConfig+0x29c>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a5d      	ldr	r2, [pc, #372]	; (800472c <HAL_RCC_OscConfig+0x29c>)
 80045b6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80045ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d013      	beq.n	80045ec <HAL_RCC_OscConfig+0x15c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045c4:	f7fd f890 	bl	80016e8 <HAL_GetTick>
 80045c8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80045ca:	e008      	b.n	80045de <HAL_RCC_OscConfig+0x14e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80045cc:	f7fd f88c 	bl	80016e8 <HAL_GetTick>
 80045d0:	4602      	mov	r2, r0
 80045d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d4:	1ad3      	subs	r3, r2, r3
 80045d6:	2b64      	cmp	r3, #100	; 0x64
 80045d8:	d901      	bls.n	80045de <HAL_RCC_OscConfig+0x14e>
          {
            return HAL_TIMEOUT;
 80045da:	2303      	movs	r3, #3
 80045dc:	e355      	b.n	8004c8a <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80045de:	4b53      	ldr	r3, [pc, #332]	; (800472c <HAL_RCC_OscConfig+0x29c>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d0f0      	beq.n	80045cc <HAL_RCC_OscConfig+0x13c>
 80045ea:	e014      	b.n	8004616 <HAL_RCC_OscConfig+0x186>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045ec:	f7fd f87c 	bl	80016e8 <HAL_GetTick>
 80045f0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80045f2:	e008      	b.n	8004606 <HAL_RCC_OscConfig+0x176>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80045f4:	f7fd f878 	bl	80016e8 <HAL_GetTick>
 80045f8:	4602      	mov	r2, r0
 80045fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045fc:	1ad3      	subs	r3, r2, r3
 80045fe:	2b64      	cmp	r3, #100	; 0x64
 8004600:	d901      	bls.n	8004606 <HAL_RCC_OscConfig+0x176>
          {
            return HAL_TIMEOUT;
 8004602:	2303      	movs	r3, #3
 8004604:	e341      	b.n	8004c8a <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004606:	4b49      	ldr	r3, [pc, #292]	; (800472c <HAL_RCC_OscConfig+0x29c>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800460e:	2b00      	cmp	r3, #0
 8004610:	d1f0      	bne.n	80045f4 <HAL_RCC_OscConfig+0x164>
 8004612:	e000      	b.n	8004616 <HAL_RCC_OscConfig+0x186>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004614:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f003 0302 	and.w	r3, r3, #2
 800461e:	2b00      	cmp	r3, #0
 8004620:	f000 808c 	beq.w	800473c <HAL_RCC_OscConfig+0x2ac>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004624:	4b41      	ldr	r3, [pc, #260]	; (800472c <HAL_RCC_OscConfig+0x29c>)
 8004626:	691b      	ldr	r3, [r3, #16]
 8004628:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800462c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800462e:	4b3f      	ldr	r3, [pc, #252]	; (800472c <HAL_RCC_OscConfig+0x29c>)
 8004630:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004632:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004634:	6a3b      	ldr	r3, [r7, #32]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d007      	beq.n	800464a <HAL_RCC_OscConfig+0x1ba>
 800463a:	6a3b      	ldr	r3, [r7, #32]
 800463c:	2b18      	cmp	r3, #24
 800463e:	d137      	bne.n	80046b0 <HAL_RCC_OscConfig+0x220>
 8004640:	69fb      	ldr	r3, [r7, #28]
 8004642:	f003 0303 	and.w	r3, r3, #3
 8004646:	2b00      	cmp	r3, #0
 8004648:	d132      	bne.n	80046b0 <HAL_RCC_OscConfig+0x220>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800464a:	4b38      	ldr	r3, [pc, #224]	; (800472c <HAL_RCC_OscConfig+0x29c>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f003 0304 	and.w	r3, r3, #4
 8004652:	2b00      	cmp	r3, #0
 8004654:	d005      	beq.n	8004662 <HAL_RCC_OscConfig+0x1d2>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	68db      	ldr	r3, [r3, #12]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d101      	bne.n	8004662 <HAL_RCC_OscConfig+0x1d2>
      {
        return HAL_ERROR;
 800465e:	2301      	movs	r3, #1
 8004660:	e313      	b.n	8004c8a <HAL_RCC_OscConfig+0x7fa>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004662:	4b32      	ldr	r3, [pc, #200]	; (800472c <HAL_RCC_OscConfig+0x29c>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f023 0219 	bic.w	r2, r3, #25
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	68db      	ldr	r3, [r3, #12]
 800466e:	492f      	ldr	r1, [pc, #188]	; (800472c <HAL_RCC_OscConfig+0x29c>)
 8004670:	4313      	orrs	r3, r2
 8004672:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004674:	f7fd f838 	bl	80016e8 <HAL_GetTick>
 8004678:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800467a:	e008      	b.n	800468e <HAL_RCC_OscConfig+0x1fe>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800467c:	f7fd f834 	bl	80016e8 <HAL_GetTick>
 8004680:	4602      	mov	r2, r0
 8004682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004684:	1ad3      	subs	r3, r2, r3
 8004686:	2b02      	cmp	r3, #2
 8004688:	d901      	bls.n	800468e <HAL_RCC_OscConfig+0x1fe>
            {
              return HAL_TIMEOUT;
 800468a:	2303      	movs	r3, #3
 800468c:	e2fd      	b.n	8004c8a <HAL_RCC_OscConfig+0x7fa>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800468e:	4b27      	ldr	r3, [pc, #156]	; (800472c <HAL_RCC_OscConfig+0x29c>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f003 0304 	and.w	r3, r3, #4
 8004696:	2b00      	cmp	r3, #0
 8004698:	d0f0      	beq.n	800467c <HAL_RCC_OscConfig+0x1ec>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800469a:	4b24      	ldr	r3, [pc, #144]	; (800472c <HAL_RCC_OscConfig+0x29c>)
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	691b      	ldr	r3, [r3, #16]
 80046a6:	061b      	lsls	r3, r3, #24
 80046a8:	4920      	ldr	r1, [pc, #128]	; (800472c <HAL_RCC_OscConfig+0x29c>)
 80046aa:	4313      	orrs	r3, r2
 80046ac:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80046ae:	e045      	b.n	800473c <HAL_RCC_OscConfig+0x2ac>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	68db      	ldr	r3, [r3, #12]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d026      	beq.n	8004706 <HAL_RCC_OscConfig+0x276>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80046b8:	4b1c      	ldr	r3, [pc, #112]	; (800472c <HAL_RCC_OscConfig+0x29c>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f023 0219 	bic.w	r2, r3, #25
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	68db      	ldr	r3, [r3, #12]
 80046c4:	4919      	ldr	r1, [pc, #100]	; (800472c <HAL_RCC_OscConfig+0x29c>)
 80046c6:	4313      	orrs	r3, r2
 80046c8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046ca:	f7fd f80d 	bl	80016e8 <HAL_GetTick>
 80046ce:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80046d0:	e008      	b.n	80046e4 <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80046d2:	f7fd f809 	bl	80016e8 <HAL_GetTick>
 80046d6:	4602      	mov	r2, r0
 80046d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046da:	1ad3      	subs	r3, r2, r3
 80046dc:	2b02      	cmp	r3, #2
 80046de:	d901      	bls.n	80046e4 <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 80046e0:	2303      	movs	r3, #3
 80046e2:	e2d2      	b.n	8004c8a <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80046e4:	4b11      	ldr	r3, [pc, #68]	; (800472c <HAL_RCC_OscConfig+0x29c>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f003 0304 	and.w	r3, r3, #4
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d0f0      	beq.n	80046d2 <HAL_RCC_OscConfig+0x242>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046f0:	4b0e      	ldr	r3, [pc, #56]	; (800472c <HAL_RCC_OscConfig+0x29c>)
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	691b      	ldr	r3, [r3, #16]
 80046fc:	061b      	lsls	r3, r3, #24
 80046fe:	490b      	ldr	r1, [pc, #44]	; (800472c <HAL_RCC_OscConfig+0x29c>)
 8004700:	4313      	orrs	r3, r2
 8004702:	604b      	str	r3, [r1, #4]
 8004704:	e01a      	b.n	800473c <HAL_RCC_OscConfig+0x2ac>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004706:	4b09      	ldr	r3, [pc, #36]	; (800472c <HAL_RCC_OscConfig+0x29c>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4a08      	ldr	r2, [pc, #32]	; (800472c <HAL_RCC_OscConfig+0x29c>)
 800470c:	f023 0301 	bic.w	r3, r3, #1
 8004710:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004712:	f7fc ffe9 	bl	80016e8 <HAL_GetTick>
 8004716:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004718:	e00a      	b.n	8004730 <HAL_RCC_OscConfig+0x2a0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800471a:	f7fc ffe5 	bl	80016e8 <HAL_GetTick>
 800471e:	4602      	mov	r2, r0
 8004720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004722:	1ad3      	subs	r3, r2, r3
 8004724:	2b02      	cmp	r3, #2
 8004726:	d903      	bls.n	8004730 <HAL_RCC_OscConfig+0x2a0>
          {
            return HAL_TIMEOUT;
 8004728:	2303      	movs	r3, #3
 800472a:	e2ae      	b.n	8004c8a <HAL_RCC_OscConfig+0x7fa>
 800472c:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004730:	4b99      	ldr	r3, [pc, #612]	; (8004998 <HAL_RCC_OscConfig+0x508>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f003 0304 	and.w	r3, r3, #4
 8004738:	2b00      	cmp	r3, #0
 800473a:	d1ee      	bne.n	800471a <HAL_RCC_OscConfig+0x28a>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f003 0310 	and.w	r3, r3, #16
 8004744:	2b00      	cmp	r3, #0
 8004746:	d06a      	beq.n	800481e <HAL_RCC_OscConfig+0x38e>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004748:	4b93      	ldr	r3, [pc, #588]	; (8004998 <HAL_RCC_OscConfig+0x508>)
 800474a:	691b      	ldr	r3, [r3, #16]
 800474c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004750:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004752:	4b91      	ldr	r3, [pc, #580]	; (8004998 <HAL_RCC_OscConfig+0x508>)
 8004754:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004756:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004758:	69bb      	ldr	r3, [r7, #24]
 800475a:	2b08      	cmp	r3, #8
 800475c:	d007      	beq.n	800476e <HAL_RCC_OscConfig+0x2de>
 800475e:	69bb      	ldr	r3, [r7, #24]
 8004760:	2b18      	cmp	r3, #24
 8004762:	d11b      	bne.n	800479c <HAL_RCC_OscConfig+0x30c>
 8004764:	697b      	ldr	r3, [r7, #20]
 8004766:	f003 0303 	and.w	r3, r3, #3
 800476a:	2b01      	cmp	r3, #1
 800476c:	d116      	bne.n	800479c <HAL_RCC_OscConfig+0x30c>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800476e:	4b8a      	ldr	r3, [pc, #552]	; (8004998 <HAL_RCC_OscConfig+0x508>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004776:	2b00      	cmp	r3, #0
 8004778:	d005      	beq.n	8004786 <HAL_RCC_OscConfig+0x2f6>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	69db      	ldr	r3, [r3, #28]
 800477e:	2b80      	cmp	r3, #128	; 0x80
 8004780:	d001      	beq.n	8004786 <HAL_RCC_OscConfig+0x2f6>
      {
        return HAL_ERROR;
 8004782:	2301      	movs	r3, #1
 8004784:	e281      	b.n	8004c8a <HAL_RCC_OscConfig+0x7fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004786:	4b84      	ldr	r3, [pc, #528]	; (8004998 <HAL_RCC_OscConfig+0x508>)
 8004788:	68db      	ldr	r3, [r3, #12]
 800478a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6a1b      	ldr	r3, [r3, #32]
 8004792:	061b      	lsls	r3, r3, #24
 8004794:	4980      	ldr	r1, [pc, #512]	; (8004998 <HAL_RCC_OscConfig+0x508>)
 8004796:	4313      	orrs	r3, r2
 8004798:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800479a:	e040      	b.n	800481e <HAL_RCC_OscConfig+0x38e>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	69db      	ldr	r3, [r3, #28]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d023      	beq.n	80047ec <HAL_RCC_OscConfig+0x35c>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80047a4:	4b7c      	ldr	r3, [pc, #496]	; (8004998 <HAL_RCC_OscConfig+0x508>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a7b      	ldr	r2, [pc, #492]	; (8004998 <HAL_RCC_OscConfig+0x508>)
 80047aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047b0:	f7fc ff9a 	bl	80016e8 <HAL_GetTick>
 80047b4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80047b6:	e008      	b.n	80047ca <HAL_RCC_OscConfig+0x33a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80047b8:	f7fc ff96 	bl	80016e8 <HAL_GetTick>
 80047bc:	4602      	mov	r2, r0
 80047be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c0:	1ad3      	subs	r3, r2, r3
 80047c2:	2b02      	cmp	r3, #2
 80047c4:	d901      	bls.n	80047ca <HAL_RCC_OscConfig+0x33a>
          {
            return HAL_TIMEOUT;
 80047c6:	2303      	movs	r3, #3
 80047c8:	e25f      	b.n	8004c8a <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80047ca:	4b73      	ldr	r3, [pc, #460]	; (8004998 <HAL_RCC_OscConfig+0x508>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d0f0      	beq.n	80047b8 <HAL_RCC_OscConfig+0x328>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80047d6:	4b70      	ldr	r3, [pc, #448]	; (8004998 <HAL_RCC_OscConfig+0x508>)
 80047d8:	68db      	ldr	r3, [r3, #12]
 80047da:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6a1b      	ldr	r3, [r3, #32]
 80047e2:	061b      	lsls	r3, r3, #24
 80047e4:	496c      	ldr	r1, [pc, #432]	; (8004998 <HAL_RCC_OscConfig+0x508>)
 80047e6:	4313      	orrs	r3, r2
 80047e8:	60cb      	str	r3, [r1, #12]
 80047ea:	e018      	b.n	800481e <HAL_RCC_OscConfig+0x38e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80047ec:	4b6a      	ldr	r3, [pc, #424]	; (8004998 <HAL_RCC_OscConfig+0x508>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4a69      	ldr	r2, [pc, #420]	; (8004998 <HAL_RCC_OscConfig+0x508>)
 80047f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80047f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047f8:	f7fc ff76 	bl	80016e8 <HAL_GetTick>
 80047fc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80047fe:	e008      	b.n	8004812 <HAL_RCC_OscConfig+0x382>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004800:	f7fc ff72 	bl	80016e8 <HAL_GetTick>
 8004804:	4602      	mov	r2, r0
 8004806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004808:	1ad3      	subs	r3, r2, r3
 800480a:	2b02      	cmp	r3, #2
 800480c:	d901      	bls.n	8004812 <HAL_RCC_OscConfig+0x382>
          {
            return HAL_TIMEOUT;
 800480e:	2303      	movs	r3, #3
 8004810:	e23b      	b.n	8004c8a <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004812:	4b61      	ldr	r3, [pc, #388]	; (8004998 <HAL_RCC_OscConfig+0x508>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800481a:	2b00      	cmp	r3, #0
 800481c:	d1f0      	bne.n	8004800 <HAL_RCC_OscConfig+0x370>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f003 0308 	and.w	r3, r3, #8
 8004826:	2b00      	cmp	r3, #0
 8004828:	d036      	beq.n	8004898 <HAL_RCC_OscConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	695b      	ldr	r3, [r3, #20]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d019      	beq.n	8004866 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004832:	4b59      	ldr	r3, [pc, #356]	; (8004998 <HAL_RCC_OscConfig+0x508>)
 8004834:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004836:	4a58      	ldr	r2, [pc, #352]	; (8004998 <HAL_RCC_OscConfig+0x508>)
 8004838:	f043 0301 	orr.w	r3, r3, #1
 800483c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800483e:	f7fc ff53 	bl	80016e8 <HAL_GetTick>
 8004842:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004844:	e008      	b.n	8004858 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004846:	f7fc ff4f 	bl	80016e8 <HAL_GetTick>
 800484a:	4602      	mov	r2, r0
 800484c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800484e:	1ad3      	subs	r3, r2, r3
 8004850:	2b02      	cmp	r3, #2
 8004852:	d901      	bls.n	8004858 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004854:	2303      	movs	r3, #3
 8004856:	e218      	b.n	8004c8a <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004858:	4b4f      	ldr	r3, [pc, #316]	; (8004998 <HAL_RCC_OscConfig+0x508>)
 800485a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800485c:	f003 0302 	and.w	r3, r3, #2
 8004860:	2b00      	cmp	r3, #0
 8004862:	d0f0      	beq.n	8004846 <HAL_RCC_OscConfig+0x3b6>
 8004864:	e018      	b.n	8004898 <HAL_RCC_OscConfig+0x408>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004866:	4b4c      	ldr	r3, [pc, #304]	; (8004998 <HAL_RCC_OscConfig+0x508>)
 8004868:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800486a:	4a4b      	ldr	r2, [pc, #300]	; (8004998 <HAL_RCC_OscConfig+0x508>)
 800486c:	f023 0301 	bic.w	r3, r3, #1
 8004870:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004872:	f7fc ff39 	bl	80016e8 <HAL_GetTick>
 8004876:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004878:	e008      	b.n	800488c <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800487a:	f7fc ff35 	bl	80016e8 <HAL_GetTick>
 800487e:	4602      	mov	r2, r0
 8004880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004882:	1ad3      	subs	r3, r2, r3
 8004884:	2b02      	cmp	r3, #2
 8004886:	d901      	bls.n	800488c <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 8004888:	2303      	movs	r3, #3
 800488a:	e1fe      	b.n	8004c8a <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800488c:	4b42      	ldr	r3, [pc, #264]	; (8004998 <HAL_RCC_OscConfig+0x508>)
 800488e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004890:	f003 0302 	and.w	r3, r3, #2
 8004894:	2b00      	cmp	r3, #0
 8004896:	d1f0      	bne.n	800487a <HAL_RCC_OscConfig+0x3ea>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f003 0320 	and.w	r3, r3, #32
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d036      	beq.n	8004912 <HAL_RCC_OscConfig+0x482>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	699b      	ldr	r3, [r3, #24]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d019      	beq.n	80048e0 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80048ac:	4b3a      	ldr	r3, [pc, #232]	; (8004998 <HAL_RCC_OscConfig+0x508>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4a39      	ldr	r2, [pc, #228]	; (8004998 <HAL_RCC_OscConfig+0x508>)
 80048b2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80048b6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80048b8:	f7fc ff16 	bl	80016e8 <HAL_GetTick>
 80048bc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80048be:	e008      	b.n	80048d2 <HAL_RCC_OscConfig+0x442>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80048c0:	f7fc ff12 	bl	80016e8 <HAL_GetTick>
 80048c4:	4602      	mov	r2, r0
 80048c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c8:	1ad3      	subs	r3, r2, r3
 80048ca:	2b02      	cmp	r3, #2
 80048cc:	d901      	bls.n	80048d2 <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 80048ce:	2303      	movs	r3, #3
 80048d0:	e1db      	b.n	8004c8a <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80048d2:	4b31      	ldr	r3, [pc, #196]	; (8004998 <HAL_RCC_OscConfig+0x508>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d0f0      	beq.n	80048c0 <HAL_RCC_OscConfig+0x430>
 80048de:	e018      	b.n	8004912 <HAL_RCC_OscConfig+0x482>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80048e0:	4b2d      	ldr	r3, [pc, #180]	; (8004998 <HAL_RCC_OscConfig+0x508>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4a2c      	ldr	r2, [pc, #176]	; (8004998 <HAL_RCC_OscConfig+0x508>)
 80048e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80048ea:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80048ec:	f7fc fefc 	bl	80016e8 <HAL_GetTick>
 80048f0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80048f2:	e008      	b.n	8004906 <HAL_RCC_OscConfig+0x476>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80048f4:	f7fc fef8 	bl	80016e8 <HAL_GetTick>
 80048f8:	4602      	mov	r2, r0
 80048fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048fc:	1ad3      	subs	r3, r2, r3
 80048fe:	2b02      	cmp	r3, #2
 8004900:	d901      	bls.n	8004906 <HAL_RCC_OscConfig+0x476>
        {
          return HAL_TIMEOUT;
 8004902:	2303      	movs	r3, #3
 8004904:	e1c1      	b.n	8004c8a <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004906:	4b24      	ldr	r3, [pc, #144]	; (8004998 <HAL_RCC_OscConfig+0x508>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800490e:	2b00      	cmp	r3, #0
 8004910:	d1f0      	bne.n	80048f4 <HAL_RCC_OscConfig+0x464>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f003 0304 	and.w	r3, r3, #4
 800491a:	2b00      	cmp	r3, #0
 800491c:	f000 80af 	beq.w	8004a7e <HAL_RCC_OscConfig+0x5ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004920:	4b1e      	ldr	r3, [pc, #120]	; (800499c <HAL_RCC_OscConfig+0x50c>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4a1d      	ldr	r2, [pc, #116]	; (800499c <HAL_RCC_OscConfig+0x50c>)
 8004926:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800492a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800492c:	f7fc fedc 	bl	80016e8 <HAL_GetTick>
 8004930:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004932:	e008      	b.n	8004946 <HAL_RCC_OscConfig+0x4b6>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004934:	f7fc fed8 	bl	80016e8 <HAL_GetTick>
 8004938:	4602      	mov	r2, r0
 800493a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800493c:	1ad3      	subs	r3, r2, r3
 800493e:	2b64      	cmp	r3, #100	; 0x64
 8004940:	d901      	bls.n	8004946 <HAL_RCC_OscConfig+0x4b6>
      {
        return HAL_TIMEOUT;
 8004942:	2303      	movs	r3, #3
 8004944:	e1a1      	b.n	8004c8a <HAL_RCC_OscConfig+0x7fa>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004946:	4b15      	ldr	r3, [pc, #84]	; (800499c <HAL_RCC_OscConfig+0x50c>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800494e:	2b00      	cmp	r3, #0
 8004950:	d0f0      	beq.n	8004934 <HAL_RCC_OscConfig+0x4a4>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	689b      	ldr	r3, [r3, #8]
 8004956:	2b01      	cmp	r3, #1
 8004958:	d106      	bne.n	8004968 <HAL_RCC_OscConfig+0x4d8>
 800495a:	4b0f      	ldr	r3, [pc, #60]	; (8004998 <HAL_RCC_OscConfig+0x508>)
 800495c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800495e:	4a0e      	ldr	r2, [pc, #56]	; (8004998 <HAL_RCC_OscConfig+0x508>)
 8004960:	f043 0301 	orr.w	r3, r3, #1
 8004964:	6713      	str	r3, [r2, #112]	; 0x70
 8004966:	e05b      	b.n	8004a20 <HAL_RCC_OscConfig+0x590>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	689b      	ldr	r3, [r3, #8]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d117      	bne.n	80049a0 <HAL_RCC_OscConfig+0x510>
 8004970:	4b09      	ldr	r3, [pc, #36]	; (8004998 <HAL_RCC_OscConfig+0x508>)
 8004972:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004974:	4a08      	ldr	r2, [pc, #32]	; (8004998 <HAL_RCC_OscConfig+0x508>)
 8004976:	f023 0301 	bic.w	r3, r3, #1
 800497a:	6713      	str	r3, [r2, #112]	; 0x70
 800497c:	4b06      	ldr	r3, [pc, #24]	; (8004998 <HAL_RCC_OscConfig+0x508>)
 800497e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004980:	4a05      	ldr	r2, [pc, #20]	; (8004998 <HAL_RCC_OscConfig+0x508>)
 8004982:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004986:	6713      	str	r3, [r2, #112]	; 0x70
 8004988:	4b03      	ldr	r3, [pc, #12]	; (8004998 <HAL_RCC_OscConfig+0x508>)
 800498a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800498c:	4a02      	ldr	r2, [pc, #8]	; (8004998 <HAL_RCC_OscConfig+0x508>)
 800498e:	f023 0304 	bic.w	r3, r3, #4
 8004992:	6713      	str	r3, [r2, #112]	; 0x70
 8004994:	e044      	b.n	8004a20 <HAL_RCC_OscConfig+0x590>
 8004996:	bf00      	nop
 8004998:	58024400 	.word	0x58024400
 800499c:	58024800 	.word	0x58024800
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	689b      	ldr	r3, [r3, #8]
 80049a4:	2b05      	cmp	r3, #5
 80049a6:	d112      	bne.n	80049ce <HAL_RCC_OscConfig+0x53e>
 80049a8:	4b95      	ldr	r3, [pc, #596]	; (8004c00 <HAL_RCC_OscConfig+0x770>)
 80049aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049ac:	4a94      	ldr	r2, [pc, #592]	; (8004c00 <HAL_RCC_OscConfig+0x770>)
 80049ae:	f043 0304 	orr.w	r3, r3, #4
 80049b2:	6713      	str	r3, [r2, #112]	; 0x70
 80049b4:	4b92      	ldr	r3, [pc, #584]	; (8004c00 <HAL_RCC_OscConfig+0x770>)
 80049b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049b8:	4a91      	ldr	r2, [pc, #580]	; (8004c00 <HAL_RCC_OscConfig+0x770>)
 80049ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80049be:	6713      	str	r3, [r2, #112]	; 0x70
 80049c0:	4b8f      	ldr	r3, [pc, #572]	; (8004c00 <HAL_RCC_OscConfig+0x770>)
 80049c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049c4:	4a8e      	ldr	r2, [pc, #568]	; (8004c00 <HAL_RCC_OscConfig+0x770>)
 80049c6:	f043 0301 	orr.w	r3, r3, #1
 80049ca:	6713      	str	r3, [r2, #112]	; 0x70
 80049cc:	e028      	b.n	8004a20 <HAL_RCC_OscConfig+0x590>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	689b      	ldr	r3, [r3, #8]
 80049d2:	2b85      	cmp	r3, #133	; 0x85
 80049d4:	d112      	bne.n	80049fc <HAL_RCC_OscConfig+0x56c>
 80049d6:	4b8a      	ldr	r3, [pc, #552]	; (8004c00 <HAL_RCC_OscConfig+0x770>)
 80049d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049da:	4a89      	ldr	r2, [pc, #548]	; (8004c00 <HAL_RCC_OscConfig+0x770>)
 80049dc:	f043 0304 	orr.w	r3, r3, #4
 80049e0:	6713      	str	r3, [r2, #112]	; 0x70
 80049e2:	4b87      	ldr	r3, [pc, #540]	; (8004c00 <HAL_RCC_OscConfig+0x770>)
 80049e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049e6:	4a86      	ldr	r2, [pc, #536]	; (8004c00 <HAL_RCC_OscConfig+0x770>)
 80049e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049ec:	6713      	str	r3, [r2, #112]	; 0x70
 80049ee:	4b84      	ldr	r3, [pc, #528]	; (8004c00 <HAL_RCC_OscConfig+0x770>)
 80049f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049f2:	4a83      	ldr	r2, [pc, #524]	; (8004c00 <HAL_RCC_OscConfig+0x770>)
 80049f4:	f043 0301 	orr.w	r3, r3, #1
 80049f8:	6713      	str	r3, [r2, #112]	; 0x70
 80049fa:	e011      	b.n	8004a20 <HAL_RCC_OscConfig+0x590>
 80049fc:	4b80      	ldr	r3, [pc, #512]	; (8004c00 <HAL_RCC_OscConfig+0x770>)
 80049fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a00:	4a7f      	ldr	r2, [pc, #508]	; (8004c00 <HAL_RCC_OscConfig+0x770>)
 8004a02:	f023 0301 	bic.w	r3, r3, #1
 8004a06:	6713      	str	r3, [r2, #112]	; 0x70
 8004a08:	4b7d      	ldr	r3, [pc, #500]	; (8004c00 <HAL_RCC_OscConfig+0x770>)
 8004a0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a0c:	4a7c      	ldr	r2, [pc, #496]	; (8004c00 <HAL_RCC_OscConfig+0x770>)
 8004a0e:	f023 0304 	bic.w	r3, r3, #4
 8004a12:	6713      	str	r3, [r2, #112]	; 0x70
 8004a14:	4b7a      	ldr	r3, [pc, #488]	; (8004c00 <HAL_RCC_OscConfig+0x770>)
 8004a16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a18:	4a79      	ldr	r2, [pc, #484]	; (8004c00 <HAL_RCC_OscConfig+0x770>)
 8004a1a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a1e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	689b      	ldr	r3, [r3, #8]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d015      	beq.n	8004a54 <HAL_RCC_OscConfig+0x5c4>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a28:	f7fc fe5e 	bl	80016e8 <HAL_GetTick>
 8004a2c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004a2e:	e00a      	b.n	8004a46 <HAL_RCC_OscConfig+0x5b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a30:	f7fc fe5a 	bl	80016e8 <HAL_GetTick>
 8004a34:	4602      	mov	r2, r0
 8004a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a38:	1ad3      	subs	r3, r2, r3
 8004a3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d901      	bls.n	8004a46 <HAL_RCC_OscConfig+0x5b6>
        {
          return HAL_TIMEOUT;
 8004a42:	2303      	movs	r3, #3
 8004a44:	e121      	b.n	8004c8a <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004a46:	4b6e      	ldr	r3, [pc, #440]	; (8004c00 <HAL_RCC_OscConfig+0x770>)
 8004a48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a4a:	f003 0302 	and.w	r3, r3, #2
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d0ee      	beq.n	8004a30 <HAL_RCC_OscConfig+0x5a0>
 8004a52:	e014      	b.n	8004a7e <HAL_RCC_OscConfig+0x5ee>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a54:	f7fc fe48 	bl	80016e8 <HAL_GetTick>
 8004a58:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004a5a:	e00a      	b.n	8004a72 <HAL_RCC_OscConfig+0x5e2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a5c:	f7fc fe44 	bl	80016e8 <HAL_GetTick>
 8004a60:	4602      	mov	r2, r0
 8004a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a64:	1ad3      	subs	r3, r2, r3
 8004a66:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d901      	bls.n	8004a72 <HAL_RCC_OscConfig+0x5e2>
        {
          return HAL_TIMEOUT;
 8004a6e:	2303      	movs	r3, #3
 8004a70:	e10b      	b.n	8004c8a <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004a72:	4b63      	ldr	r3, [pc, #396]	; (8004c00 <HAL_RCC_OscConfig+0x770>)
 8004a74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a76:	f003 0302 	and.w	r3, r3, #2
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d1ee      	bne.n	8004a5c <HAL_RCC_OscConfig+0x5cc>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	f000 8100 	beq.w	8004c88 <HAL_RCC_OscConfig+0x7f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004a88:	4b5d      	ldr	r3, [pc, #372]	; (8004c00 <HAL_RCC_OscConfig+0x770>)
 8004a8a:	691b      	ldr	r3, [r3, #16]
 8004a8c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004a90:	2b18      	cmp	r3, #24
 8004a92:	f000 80bb 	beq.w	8004c0c <HAL_RCC_OscConfig+0x77c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a9a:	2b02      	cmp	r3, #2
 8004a9c:	f040 8095 	bne.w	8004bca <HAL_RCC_OscConfig+0x73a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004aa0:	4b57      	ldr	r3, [pc, #348]	; (8004c00 <HAL_RCC_OscConfig+0x770>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4a56      	ldr	r2, [pc, #344]	; (8004c00 <HAL_RCC_OscConfig+0x770>)
 8004aa6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004aaa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004aac:	f7fc fe1c 	bl	80016e8 <HAL_GetTick>
 8004ab0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004ab2:	e008      	b.n	8004ac6 <HAL_RCC_OscConfig+0x636>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ab4:	f7fc fe18 	bl	80016e8 <HAL_GetTick>
 8004ab8:	4602      	mov	r2, r0
 8004aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004abc:	1ad3      	subs	r3, r2, r3
 8004abe:	2b02      	cmp	r3, #2
 8004ac0:	d901      	bls.n	8004ac6 <HAL_RCC_OscConfig+0x636>
          {
            return HAL_TIMEOUT;
 8004ac2:	2303      	movs	r3, #3
 8004ac4:	e0e1      	b.n	8004c8a <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004ac6:	4b4e      	ldr	r3, [pc, #312]	; (8004c00 <HAL_RCC_OscConfig+0x770>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d1f0      	bne.n	8004ab4 <HAL_RCC_OscConfig+0x624>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004ad2:	4b4b      	ldr	r3, [pc, #300]	; (8004c00 <HAL_RCC_OscConfig+0x770>)
 8004ad4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004ad6:	4b4b      	ldr	r3, [pc, #300]	; (8004c04 <HAL_RCC_OscConfig+0x774>)
 8004ad8:	4013      	ands	r3, r2
 8004ada:	687a      	ldr	r2, [r7, #4]
 8004adc:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8004ade:	687a      	ldr	r2, [r7, #4]
 8004ae0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004ae2:	0112      	lsls	r2, r2, #4
 8004ae4:	430a      	orrs	r2, r1
 8004ae6:	4946      	ldr	r1, [pc, #280]	; (8004c00 <HAL_RCC_OscConfig+0x770>)
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	628b      	str	r3, [r1, #40]	; 0x28
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004af0:	3b01      	subs	r3, #1
 8004af2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004afa:	3b01      	subs	r3, #1
 8004afc:	025b      	lsls	r3, r3, #9
 8004afe:	b29b      	uxth	r3, r3
 8004b00:	431a      	orrs	r2, r3
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b06:	3b01      	subs	r3, #1
 8004b08:	041b      	lsls	r3, r3, #16
 8004b0a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004b0e:	431a      	orrs	r2, r3
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b14:	3b01      	subs	r3, #1
 8004b16:	061b      	lsls	r3, r3, #24
 8004b18:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004b1c:	4938      	ldr	r1, [pc, #224]	; (8004c00 <HAL_RCC_OscConfig+0x770>)
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8004b22:	4b37      	ldr	r3, [pc, #220]	; (8004c00 <HAL_RCC_OscConfig+0x770>)
 8004b24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b26:	4a36      	ldr	r2, [pc, #216]	; (8004c00 <HAL_RCC_OscConfig+0x770>)
 8004b28:	f023 0301 	bic.w	r3, r3, #1
 8004b2c:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004b2e:	4b34      	ldr	r3, [pc, #208]	; (8004c00 <HAL_RCC_OscConfig+0x770>)
 8004b30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b32:	4b35      	ldr	r3, [pc, #212]	; (8004c08 <HAL_RCC_OscConfig+0x778>)
 8004b34:	4013      	ands	r3, r2
 8004b36:	687a      	ldr	r2, [r7, #4]
 8004b38:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004b3a:	00d2      	lsls	r2, r2, #3
 8004b3c:	4930      	ldr	r1, [pc, #192]	; (8004c00 <HAL_RCC_OscConfig+0x770>)
 8004b3e:	4313      	orrs	r3, r2
 8004b40:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004b42:	4b2f      	ldr	r3, [pc, #188]	; (8004c00 <HAL_RCC_OscConfig+0x770>)
 8004b44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b46:	f023 020c 	bic.w	r2, r3, #12
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b4e:	492c      	ldr	r1, [pc, #176]	; (8004c00 <HAL_RCC_OscConfig+0x770>)
 8004b50:	4313      	orrs	r3, r2
 8004b52:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004b54:	4b2a      	ldr	r3, [pc, #168]	; (8004c00 <HAL_RCC_OscConfig+0x770>)
 8004b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b58:	f023 0202 	bic.w	r2, r3, #2
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b60:	4927      	ldr	r1, [pc, #156]	; (8004c00 <HAL_RCC_OscConfig+0x770>)
 8004b62:	4313      	orrs	r3, r2
 8004b64:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004b66:	4b26      	ldr	r3, [pc, #152]	; (8004c00 <HAL_RCC_OscConfig+0x770>)
 8004b68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b6a:	4a25      	ldr	r2, [pc, #148]	; (8004c00 <HAL_RCC_OscConfig+0x770>)
 8004b6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b70:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b72:	4b23      	ldr	r3, [pc, #140]	; (8004c00 <HAL_RCC_OscConfig+0x770>)
 8004b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b76:	4a22      	ldr	r2, [pc, #136]	; (8004c00 <HAL_RCC_OscConfig+0x770>)
 8004b78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b7c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004b7e:	4b20      	ldr	r3, [pc, #128]	; (8004c00 <HAL_RCC_OscConfig+0x770>)
 8004b80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b82:	4a1f      	ldr	r2, [pc, #124]	; (8004c00 <HAL_RCC_OscConfig+0x770>)
 8004b84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b88:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8004b8a:	4b1d      	ldr	r3, [pc, #116]	; (8004c00 <HAL_RCC_OscConfig+0x770>)
 8004b8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b8e:	4a1c      	ldr	r2, [pc, #112]	; (8004c00 <HAL_RCC_OscConfig+0x770>)
 8004b90:	f043 0301 	orr.w	r3, r3, #1
 8004b94:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b96:	4b1a      	ldr	r3, [pc, #104]	; (8004c00 <HAL_RCC_OscConfig+0x770>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4a19      	ldr	r2, [pc, #100]	; (8004c00 <HAL_RCC_OscConfig+0x770>)
 8004b9c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004ba0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ba2:	f7fc fda1 	bl	80016e8 <HAL_GetTick>
 8004ba6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004ba8:	e008      	b.n	8004bbc <HAL_RCC_OscConfig+0x72c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004baa:	f7fc fd9d 	bl	80016e8 <HAL_GetTick>
 8004bae:	4602      	mov	r2, r0
 8004bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb2:	1ad3      	subs	r3, r2, r3
 8004bb4:	2b02      	cmp	r3, #2
 8004bb6:	d901      	bls.n	8004bbc <HAL_RCC_OscConfig+0x72c>
          {
            return HAL_TIMEOUT;
 8004bb8:	2303      	movs	r3, #3
 8004bba:	e066      	b.n	8004c8a <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004bbc:	4b10      	ldr	r3, [pc, #64]	; (8004c00 <HAL_RCC_OscConfig+0x770>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d0f0      	beq.n	8004baa <HAL_RCC_OscConfig+0x71a>
 8004bc8:	e05e      	b.n	8004c88 <HAL_RCC_OscConfig+0x7f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bca:	4b0d      	ldr	r3, [pc, #52]	; (8004c00 <HAL_RCC_OscConfig+0x770>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4a0c      	ldr	r2, [pc, #48]	; (8004c00 <HAL_RCC_OscConfig+0x770>)
 8004bd0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004bd4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bd6:	f7fc fd87 	bl	80016e8 <HAL_GetTick>
 8004bda:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004bdc:	e008      	b.n	8004bf0 <HAL_RCC_OscConfig+0x760>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004bde:	f7fc fd83 	bl	80016e8 <HAL_GetTick>
 8004be2:	4602      	mov	r2, r0
 8004be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004be6:	1ad3      	subs	r3, r2, r3
 8004be8:	2b02      	cmp	r3, #2
 8004bea:	d901      	bls.n	8004bf0 <HAL_RCC_OscConfig+0x760>
          {
            return HAL_TIMEOUT;
 8004bec:	2303      	movs	r3, #3
 8004bee:	e04c      	b.n	8004c8a <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004bf0:	4b03      	ldr	r3, [pc, #12]	; (8004c00 <HAL_RCC_OscConfig+0x770>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d1f0      	bne.n	8004bde <HAL_RCC_OscConfig+0x74e>
 8004bfc:	e044      	b.n	8004c88 <HAL_RCC_OscConfig+0x7f8>
 8004bfe:	bf00      	nop
 8004c00:	58024400 	.word	0x58024400
 8004c04:	fffffc0c 	.word	0xfffffc0c
 8004c08:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004c0c:	4b21      	ldr	r3, [pc, #132]	; (8004c94 <HAL_RCC_OscConfig+0x804>)
 8004c0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c10:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004c12:	4b20      	ldr	r3, [pc, #128]	; (8004c94 <HAL_RCC_OscConfig+0x804>)
 8004c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c16:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c1c:	2b01      	cmp	r3, #1
 8004c1e:	d031      	beq.n	8004c84 <HAL_RCC_OscConfig+0x7f4>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c20:	693b      	ldr	r3, [r7, #16]
 8004c22:	f003 0203 	and.w	r2, r3, #3
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c2a:	429a      	cmp	r2, r3
 8004c2c:	d12a      	bne.n	8004c84 <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004c2e:	693b      	ldr	r3, [r7, #16]
 8004c30:	091b      	lsrs	r3, r3, #4
 8004c32:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c3a:	429a      	cmp	r2, r3
 8004c3c:	d122      	bne.n	8004c84 <HAL_RCC_OscConfig+0x7f4>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c48:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004c4a:	429a      	cmp	r2, r3
 8004c4c:	d11a      	bne.n	8004c84 <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	0a5b      	lsrs	r3, r3, #9
 8004c52:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c5a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004c5c:	429a      	cmp	r2, r3
 8004c5e:	d111      	bne.n	8004c84 <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	0c1b      	lsrs	r3, r3, #16
 8004c64:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c6c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004c6e:	429a      	cmp	r2, r3
 8004c70:	d108      	bne.n	8004c84 <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	0e1b      	lsrs	r3, r3, #24
 8004c76:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c7e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004c80:	429a      	cmp	r2, r3
 8004c82:	d001      	beq.n	8004c88 <HAL_RCC_OscConfig+0x7f8>
      {
        return HAL_ERROR;
 8004c84:	2301      	movs	r3, #1
 8004c86:	e000      	b.n	8004c8a <HAL_RCC_OscConfig+0x7fa>
      }
    }
  }
  return HAL_OK;
 8004c88:	2300      	movs	r3, #0
}
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	3730      	adds	r7, #48	; 0x30
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	bd80      	pop	{r7, pc}
 8004c92:	bf00      	nop
 8004c94:	58024400 	.word	0x58024400

08004c98 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b086      	sub	sp, #24
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
 8004ca0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d101      	bne.n	8004cac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ca8:	2301      	movs	r3, #1
 8004caa:	e19c      	b.n	8004fe6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004cac:	4b8a      	ldr	r3, [pc, #552]	; (8004ed8 <HAL_RCC_ClockConfig+0x240>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f003 030f 	and.w	r3, r3, #15
 8004cb4:	683a      	ldr	r2, [r7, #0]
 8004cb6:	429a      	cmp	r2, r3
 8004cb8:	d910      	bls.n	8004cdc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cba:	4b87      	ldr	r3, [pc, #540]	; (8004ed8 <HAL_RCC_ClockConfig+0x240>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f023 020f 	bic.w	r2, r3, #15
 8004cc2:	4985      	ldr	r1, [pc, #532]	; (8004ed8 <HAL_RCC_ClockConfig+0x240>)
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	4313      	orrs	r3, r2
 8004cc8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cca:	4b83      	ldr	r3, [pc, #524]	; (8004ed8 <HAL_RCC_ClockConfig+0x240>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f003 030f 	and.w	r3, r3, #15
 8004cd2:	683a      	ldr	r2, [r7, #0]
 8004cd4:	429a      	cmp	r2, r3
 8004cd6:	d001      	beq.n	8004cdc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004cd8:	2301      	movs	r3, #1
 8004cda:	e184      	b.n	8004fe6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f003 0304 	and.w	r3, r3, #4
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d010      	beq.n	8004d0a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	691a      	ldr	r2, [r3, #16]
 8004cec:	4b7b      	ldr	r3, [pc, #492]	; (8004edc <HAL_RCC_ClockConfig+0x244>)
 8004cee:	699b      	ldr	r3, [r3, #24]
 8004cf0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004cf4:	429a      	cmp	r2, r3
 8004cf6:	d908      	bls.n	8004d0a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004cf8:	4b78      	ldr	r3, [pc, #480]	; (8004edc <HAL_RCC_ClockConfig+0x244>)
 8004cfa:	699b      	ldr	r3, [r3, #24]
 8004cfc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	691b      	ldr	r3, [r3, #16]
 8004d04:	4975      	ldr	r1, [pc, #468]	; (8004edc <HAL_RCC_ClockConfig+0x244>)
 8004d06:	4313      	orrs	r3, r2
 8004d08:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f003 0308 	and.w	r3, r3, #8
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d010      	beq.n	8004d38 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	695a      	ldr	r2, [r3, #20]
 8004d1a:	4b70      	ldr	r3, [pc, #448]	; (8004edc <HAL_RCC_ClockConfig+0x244>)
 8004d1c:	69db      	ldr	r3, [r3, #28]
 8004d1e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004d22:	429a      	cmp	r2, r3
 8004d24:	d908      	bls.n	8004d38 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004d26:	4b6d      	ldr	r3, [pc, #436]	; (8004edc <HAL_RCC_ClockConfig+0x244>)
 8004d28:	69db      	ldr	r3, [r3, #28]
 8004d2a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	695b      	ldr	r3, [r3, #20]
 8004d32:	496a      	ldr	r1, [pc, #424]	; (8004edc <HAL_RCC_ClockConfig+0x244>)
 8004d34:	4313      	orrs	r3, r2
 8004d36:	61cb      	str	r3, [r1, #28]
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f003 0310 	and.w	r3, r3, #16
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d010      	beq.n	8004d66 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
     if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	699a      	ldr	r2, [r3, #24]
 8004d48:	4b64      	ldr	r3, [pc, #400]	; (8004edc <HAL_RCC_ClockConfig+0x244>)
 8004d4a:	69db      	ldr	r3, [r3, #28]
 8004d4c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004d50:	429a      	cmp	r2, r3
 8004d52:	d908      	bls.n	8004d66 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004d54:	4b61      	ldr	r3, [pc, #388]	; (8004edc <HAL_RCC_ClockConfig+0x244>)
 8004d56:	69db      	ldr	r3, [r3, #28]
 8004d58:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	699b      	ldr	r3, [r3, #24]
 8004d60:	495e      	ldr	r1, [pc, #376]	; (8004edc <HAL_RCC_ClockConfig+0x244>)
 8004d62:	4313      	orrs	r3, r2
 8004d64:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f003 0320 	and.w	r3, r3, #32
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d010      	beq.n	8004d94 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
    }
#else
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	69da      	ldr	r2, [r3, #28]
 8004d76:	4b59      	ldr	r3, [pc, #356]	; (8004edc <HAL_RCC_ClockConfig+0x244>)
 8004d78:	6a1b      	ldr	r3, [r3, #32]
 8004d7a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004d7e:	429a      	cmp	r2, r3
 8004d80:	d908      	bls.n	8004d94 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004d82:	4b56      	ldr	r3, [pc, #344]	; (8004edc <HAL_RCC_ClockConfig+0x244>)
 8004d84:	6a1b      	ldr	r3, [r3, #32]
 8004d86:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	69db      	ldr	r3, [r3, #28]
 8004d8e:	4953      	ldr	r1, [pc, #332]	; (8004edc <HAL_RCC_ClockConfig+0x244>)
 8004d90:	4313      	orrs	r3, r2
 8004d92:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f003 0302 	and.w	r3, r3, #2
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d010      	beq.n	8004dc2 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
        if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	68da      	ldr	r2, [r3, #12]
 8004da4:	4b4d      	ldr	r3, [pc, #308]	; (8004edc <HAL_RCC_ClockConfig+0x244>)
 8004da6:	699b      	ldr	r3, [r3, #24]
 8004da8:	f003 030f 	and.w	r3, r3, #15
 8004dac:	429a      	cmp	r2, r3
 8004dae:	d908      	bls.n	8004dc2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004db0:	4b4a      	ldr	r3, [pc, #296]	; (8004edc <HAL_RCC_ClockConfig+0x244>)
 8004db2:	699b      	ldr	r3, [r3, #24]
 8004db4:	f023 020f 	bic.w	r2, r3, #15
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	68db      	ldr	r3, [r3, #12]
 8004dbc:	4947      	ldr	r1, [pc, #284]	; (8004edc <HAL_RCC_ClockConfig+0x244>)
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f003 0301 	and.w	r3, r3, #1
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d055      	beq.n	8004e7a <HAL_RCC_ClockConfig+0x1e2>
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004dce:	4b43      	ldr	r3, [pc, #268]	; (8004edc <HAL_RCC_ClockConfig+0x244>)
 8004dd0:	699b      	ldr	r3, [r3, #24]
 8004dd2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	689b      	ldr	r3, [r3, #8]
 8004dda:	4940      	ldr	r1, [pc, #256]	; (8004edc <HAL_RCC_ClockConfig+0x244>)
 8004ddc:	4313      	orrs	r3, r2
 8004dde:	618b      	str	r3, [r1, #24]
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	685b      	ldr	r3, [r3, #4]
 8004de4:	2b02      	cmp	r3, #2
 8004de6:	d107      	bne.n	8004df8 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004de8:	4b3c      	ldr	r3, [pc, #240]	; (8004edc <HAL_RCC_ClockConfig+0x244>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d121      	bne.n	8004e38 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004df4:	2301      	movs	r3, #1
 8004df6:	e0f6      	b.n	8004fe6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	2b03      	cmp	r3, #3
 8004dfe:	d107      	bne.n	8004e10 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004e00:	4b36      	ldr	r3, [pc, #216]	; (8004edc <HAL_RCC_ClockConfig+0x244>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d115      	bne.n	8004e38 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	e0ea      	b.n	8004fe6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	685b      	ldr	r3, [r3, #4]
 8004e14:	2b01      	cmp	r3, #1
 8004e16:	d107      	bne.n	8004e28 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004e18:	4b30      	ldr	r3, [pc, #192]	; (8004edc <HAL_RCC_ClockConfig+0x244>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d109      	bne.n	8004e38 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004e24:	2301      	movs	r3, #1
 8004e26:	e0de      	b.n	8004fe6 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004e28:	4b2c      	ldr	r3, [pc, #176]	; (8004edc <HAL_RCC_ClockConfig+0x244>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f003 0304 	and.w	r3, r3, #4
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d101      	bne.n	8004e38 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004e34:	2301      	movs	r3, #1
 8004e36:	e0d6      	b.n	8004fe6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004e38:	4b28      	ldr	r3, [pc, #160]	; (8004edc <HAL_RCC_ClockConfig+0x244>)
 8004e3a:	691b      	ldr	r3, [r3, #16]
 8004e3c:	f023 0207 	bic.w	r2, r3, #7
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	4925      	ldr	r1, [pc, #148]	; (8004edc <HAL_RCC_ClockConfig+0x244>)
 8004e46:	4313      	orrs	r3, r2
 8004e48:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e4a:	f7fc fc4d 	bl	80016e8 <HAL_GetTick>
 8004e4e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e50:	e00a      	b.n	8004e68 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e52:	f7fc fc49 	bl	80016e8 <HAL_GetTick>
 8004e56:	4602      	mov	r2, r0
 8004e58:	697b      	ldr	r3, [r7, #20]
 8004e5a:	1ad3      	subs	r3, r2, r3
 8004e5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d901      	bls.n	8004e68 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004e64:	2303      	movs	r3, #3
 8004e66:	e0be      	b.n	8004fe6 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e68:	4b1c      	ldr	r3, [pc, #112]	; (8004edc <HAL_RCC_ClockConfig+0x244>)
 8004e6a:	691b      	ldr	r3, [r3, #16]
 8004e6c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	685b      	ldr	r3, [r3, #4]
 8004e74:	00db      	lsls	r3, r3, #3
 8004e76:	429a      	cmp	r2, r3
 8004e78:	d1eb      	bne.n	8004e52 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f003 0302 	and.w	r3, r3, #2
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d010      	beq.n	8004ea8 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	68da      	ldr	r2, [r3, #12]
 8004e8a:	4b14      	ldr	r3, [pc, #80]	; (8004edc <HAL_RCC_ClockConfig+0x244>)
 8004e8c:	699b      	ldr	r3, [r3, #24]
 8004e8e:	f003 030f 	and.w	r3, r3, #15
 8004e92:	429a      	cmp	r2, r3
 8004e94:	d208      	bcs.n	8004ea8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e96:	4b11      	ldr	r3, [pc, #68]	; (8004edc <HAL_RCC_ClockConfig+0x244>)
 8004e98:	699b      	ldr	r3, [r3, #24]
 8004e9a:	f023 020f 	bic.w	r2, r3, #15
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	68db      	ldr	r3, [r3, #12]
 8004ea2:	490e      	ldr	r1, [pc, #56]	; (8004edc <HAL_RCC_ClockConfig+0x244>)
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004ea8:	4b0b      	ldr	r3, [pc, #44]	; (8004ed8 <HAL_RCC_ClockConfig+0x240>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f003 030f 	and.w	r3, r3, #15
 8004eb0:	683a      	ldr	r2, [r7, #0]
 8004eb2:	429a      	cmp	r2, r3
 8004eb4:	d214      	bcs.n	8004ee0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004eb6:	4b08      	ldr	r3, [pc, #32]	; (8004ed8 <HAL_RCC_ClockConfig+0x240>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f023 020f 	bic.w	r2, r3, #15
 8004ebe:	4906      	ldr	r1, [pc, #24]	; (8004ed8 <HAL_RCC_ClockConfig+0x240>)
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ec6:	4b04      	ldr	r3, [pc, #16]	; (8004ed8 <HAL_RCC_ClockConfig+0x240>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f003 030f 	and.w	r3, r3, #15
 8004ece:	683a      	ldr	r2, [r7, #0]
 8004ed0:	429a      	cmp	r2, r3
 8004ed2:	d005      	beq.n	8004ee0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004ed4:	2301      	movs	r3, #1
 8004ed6:	e086      	b.n	8004fe6 <HAL_RCC_ClockConfig+0x34e>
 8004ed8:	52002000 	.word	0x52002000
 8004edc:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f003 0304 	and.w	r3, r3, #4
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d010      	beq.n	8004f0e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
   }
#else
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	691a      	ldr	r2, [r3, #16]
 8004ef0:	4b3f      	ldr	r3, [pc, #252]	; (8004ff0 <HAL_RCC_ClockConfig+0x358>)
 8004ef2:	699b      	ldr	r3, [r3, #24]
 8004ef4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004ef8:	429a      	cmp	r2, r3
 8004efa:	d208      	bcs.n	8004f0e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004efc:	4b3c      	ldr	r3, [pc, #240]	; (8004ff0 <HAL_RCC_ClockConfig+0x358>)
 8004efe:	699b      	ldr	r3, [r3, #24]
 8004f00:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	691b      	ldr	r3, [r3, #16]
 8004f08:	4939      	ldr	r1, [pc, #228]	; (8004ff0 <HAL_RCC_ClockConfig+0x358>)
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f003 0308 	and.w	r3, r3, #8
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d010      	beq.n	8004f3c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	695a      	ldr	r2, [r3, #20]
 8004f1e:	4b34      	ldr	r3, [pc, #208]	; (8004ff0 <HAL_RCC_ClockConfig+0x358>)
 8004f20:	69db      	ldr	r3, [r3, #28]
 8004f22:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004f26:	429a      	cmp	r2, r3
 8004f28:	d208      	bcs.n	8004f3c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004f2a:	4b31      	ldr	r3, [pc, #196]	; (8004ff0 <HAL_RCC_ClockConfig+0x358>)
 8004f2c:	69db      	ldr	r3, [r3, #28]
 8004f2e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	695b      	ldr	r3, [r3, #20]
 8004f36:	492e      	ldr	r1, [pc, #184]	; (8004ff0 <HAL_RCC_ClockConfig+0x358>)
 8004f38:	4313      	orrs	r3, r2
 8004f3a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f003 0310 	and.w	r3, r3, #16
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d010      	beq.n	8004f6a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	699a      	ldr	r2, [r3, #24]
 8004f4c:	4b28      	ldr	r3, [pc, #160]	; (8004ff0 <HAL_RCC_ClockConfig+0x358>)
 8004f4e:	69db      	ldr	r3, [r3, #28]
 8004f50:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004f54:	429a      	cmp	r2, r3
 8004f56:	d208      	bcs.n	8004f6a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004f58:	4b25      	ldr	r3, [pc, #148]	; (8004ff0 <HAL_RCC_ClockConfig+0x358>)
 8004f5a:	69db      	ldr	r3, [r3, #28]
 8004f5c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	699b      	ldr	r3, [r3, #24]
 8004f64:	4922      	ldr	r1, [pc, #136]	; (8004ff0 <HAL_RCC_ClockConfig+0x358>)
 8004f66:	4313      	orrs	r3, r2
 8004f68:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f003 0320 	and.w	r3, r3, #32
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d010      	beq.n	8004f98 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
   }
#else
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	69da      	ldr	r2, [r3, #28]
 8004f7a:	4b1d      	ldr	r3, [pc, #116]	; (8004ff0 <HAL_RCC_ClockConfig+0x358>)
 8004f7c:	6a1b      	ldr	r3, [r3, #32]
 8004f7e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004f82:	429a      	cmp	r2, r3
 8004f84:	d208      	bcs.n	8004f98 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004f86:	4b1a      	ldr	r3, [pc, #104]	; (8004ff0 <HAL_RCC_ClockConfig+0x358>)
 8004f88:	6a1b      	ldr	r3, [r3, #32]
 8004f8a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	69db      	ldr	r3, [r3, #28]
 8004f92:	4917      	ldr	r1, [pc, #92]	; (8004ff0 <HAL_RCC_ClockConfig+0x358>)
 8004f94:	4313      	orrs	r3, r2
 8004f96:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8004f98:	f000 f834 	bl	8005004 <HAL_RCC_GetSysClockFreq>
 8004f9c:	4602      	mov	r2, r0
 8004f9e:	4b14      	ldr	r3, [pc, #80]	; (8004ff0 <HAL_RCC_ClockConfig+0x358>)
 8004fa0:	699b      	ldr	r3, [r3, #24]
 8004fa2:	0a1b      	lsrs	r3, r3, #8
 8004fa4:	f003 030f 	and.w	r3, r3, #15
 8004fa8:	4912      	ldr	r1, [pc, #72]	; (8004ff4 <HAL_RCC_ClockConfig+0x35c>)
 8004faa:	5ccb      	ldrb	r3, [r1, r3]
 8004fac:	f003 031f 	and.w	r3, r3, #31
 8004fb0:	fa22 f303 	lsr.w	r3, r2, r3
 8004fb4:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8004fb6:	4b0e      	ldr	r3, [pc, #56]	; (8004ff0 <HAL_RCC_ClockConfig+0x358>)
 8004fb8:	699b      	ldr	r3, [r3, #24]
 8004fba:	f003 030f 	and.w	r3, r3, #15
 8004fbe:	4a0d      	ldr	r2, [pc, #52]	; (8004ff4 <HAL_RCC_ClockConfig+0x35c>)
 8004fc0:	5cd3      	ldrb	r3, [r2, r3]
 8004fc2:	f003 031f 	and.w	r3, r3, #31
 8004fc6:	693a      	ldr	r2, [r7, #16]
 8004fc8:	fa22 f303 	lsr.w	r3, r2, r3
 8004fcc:	4a0a      	ldr	r2, [pc, #40]	; (8004ff8 <HAL_RCC_ClockConfig+0x360>)
 8004fce:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004fd0:	4a0a      	ldr	r2, [pc, #40]	; (8004ffc <HAL_RCC_ClockConfig+0x364>)
 8004fd2:	693b      	ldr	r3, [r7, #16]
 8004fd4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8004fd6:	4b0a      	ldr	r3, [pc, #40]	; (8005000 <HAL_RCC_ClockConfig+0x368>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	4618      	mov	r0, r3
 8004fdc:	f7fc f8c2 	bl	8001164 <HAL_InitTick>
 8004fe0:	4603      	mov	r3, r0
 8004fe2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004fe4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	3718      	adds	r7, #24
 8004fea:	46bd      	mov	sp, r7
 8004fec:	bd80      	pop	{r7, pc}
 8004fee:	bf00      	nop
 8004ff0:	58024400 	.word	0x58024400
 8004ff4:	0800948c 	.word	0x0800948c
 8004ff8:	24000004 	.word	0x24000004
 8004ffc:	24000000 	.word	0x24000000
 8005000:	24000008 	.word	0x24000008

08005004 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005004:	b480      	push	{r7}
 8005006:	b089      	sub	sp, #36	; 0x24
 8005008:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800500a:	4bb3      	ldr	r3, [pc, #716]	; (80052d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800500c:	691b      	ldr	r3, [r3, #16]
 800500e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005012:	2b18      	cmp	r3, #24
 8005014:	f200 8155 	bhi.w	80052c2 <HAL_RCC_GetSysClockFreq+0x2be>
 8005018:	a201      	add	r2, pc, #4	; (adr r2, 8005020 <HAL_RCC_GetSysClockFreq+0x1c>)
 800501a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800501e:	bf00      	nop
 8005020:	08005085 	.word	0x08005085
 8005024:	080052c3 	.word	0x080052c3
 8005028:	080052c3 	.word	0x080052c3
 800502c:	080052c3 	.word	0x080052c3
 8005030:	080052c3 	.word	0x080052c3
 8005034:	080052c3 	.word	0x080052c3
 8005038:	080052c3 	.word	0x080052c3
 800503c:	080052c3 	.word	0x080052c3
 8005040:	080050ab 	.word	0x080050ab
 8005044:	080052c3 	.word	0x080052c3
 8005048:	080052c3 	.word	0x080052c3
 800504c:	080052c3 	.word	0x080052c3
 8005050:	080052c3 	.word	0x080052c3
 8005054:	080052c3 	.word	0x080052c3
 8005058:	080052c3 	.word	0x080052c3
 800505c:	080052c3 	.word	0x080052c3
 8005060:	080050b1 	.word	0x080050b1
 8005064:	080052c3 	.word	0x080052c3
 8005068:	080052c3 	.word	0x080052c3
 800506c:	080052c3 	.word	0x080052c3
 8005070:	080052c3 	.word	0x080052c3
 8005074:	080052c3 	.word	0x080052c3
 8005078:	080052c3 	.word	0x080052c3
 800507c:	080052c3 	.word	0x080052c3
 8005080:	080050b7 	.word	0x080050b7
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005084:	4b94      	ldr	r3, [pc, #592]	; (80052d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f003 0320 	and.w	r3, r3, #32
 800508c:	2b00      	cmp	r3, #0
 800508e:	d009      	beq.n	80050a4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005090:	4b91      	ldr	r3, [pc, #580]	; (80052d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	08db      	lsrs	r3, r3, #3
 8005096:	f003 0303 	and.w	r3, r3, #3
 800509a:	4a90      	ldr	r2, [pc, #576]	; (80052dc <HAL_RCC_GetSysClockFreq+0x2d8>)
 800509c:	fa22 f303 	lsr.w	r3, r2, r3
 80050a0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80050a2:	e111      	b.n	80052c8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80050a4:	4b8d      	ldr	r3, [pc, #564]	; (80052dc <HAL_RCC_GetSysClockFreq+0x2d8>)
 80050a6:	61bb      	str	r3, [r7, #24]
    break;
 80050a8:	e10e      	b.n	80052c8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80050aa:	4b8d      	ldr	r3, [pc, #564]	; (80052e0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80050ac:	61bb      	str	r3, [r7, #24]
    break;
 80050ae:	e10b      	b.n	80052c8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80050b0:	4b8c      	ldr	r3, [pc, #560]	; (80052e4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80050b2:	61bb      	str	r3, [r7, #24]
    break;
 80050b4:	e108      	b.n	80052c8 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80050b6:	4b88      	ldr	r3, [pc, #544]	; (80052d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80050b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050ba:	f003 0303 	and.w	r3, r3, #3
 80050be:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80050c0:	4b85      	ldr	r3, [pc, #532]	; (80052d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80050c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050c4:	091b      	lsrs	r3, r3, #4
 80050c6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80050ca:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80050cc:	4b82      	ldr	r3, [pc, #520]	; (80052d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80050ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050d0:	f003 0301 	and.w	r3, r3, #1
 80050d4:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80050d6:	4b80      	ldr	r3, [pc, #512]	; (80052d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80050d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050da:	08db      	lsrs	r3, r3, #3
 80050dc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80050e0:	68fa      	ldr	r2, [r7, #12]
 80050e2:	fb02 f303 	mul.w	r3, r2, r3
 80050e6:	ee07 3a90 	vmov	s15, r3
 80050ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050ee:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	f000 80e1 	beq.w	80052bc <HAL_RCC_GetSysClockFreq+0x2b8>
 80050fa:	697b      	ldr	r3, [r7, #20]
 80050fc:	2b02      	cmp	r3, #2
 80050fe:	f000 8083 	beq.w	8005208 <HAL_RCC_GetSysClockFreq+0x204>
 8005102:	697b      	ldr	r3, [r7, #20]
 8005104:	2b02      	cmp	r3, #2
 8005106:	f200 80a1 	bhi.w	800524c <HAL_RCC_GetSysClockFreq+0x248>
 800510a:	697b      	ldr	r3, [r7, #20]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d003      	beq.n	8005118 <HAL_RCC_GetSysClockFreq+0x114>
 8005110:	697b      	ldr	r3, [r7, #20]
 8005112:	2b01      	cmp	r3, #1
 8005114:	d056      	beq.n	80051c4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005116:	e099      	b.n	800524c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005118:	4b6f      	ldr	r3, [pc, #444]	; (80052d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f003 0320 	and.w	r3, r3, #32
 8005120:	2b00      	cmp	r3, #0
 8005122:	d02d      	beq.n	8005180 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005124:	4b6c      	ldr	r3, [pc, #432]	; (80052d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	08db      	lsrs	r3, r3, #3
 800512a:	f003 0303 	and.w	r3, r3, #3
 800512e:	4a6b      	ldr	r2, [pc, #428]	; (80052dc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005130:	fa22 f303 	lsr.w	r3, r2, r3
 8005134:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	ee07 3a90 	vmov	s15, r3
 800513c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005140:	693b      	ldr	r3, [r7, #16]
 8005142:	ee07 3a90 	vmov	s15, r3
 8005146:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800514a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800514e:	4b62      	ldr	r3, [pc, #392]	; (80052d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005152:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005156:	ee07 3a90 	vmov	s15, r3
 800515a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800515e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005162:	eddf 5a61 	vldr	s11, [pc, #388]	; 80052e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005166:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800516a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800516e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005172:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005176:	ee67 7a27 	vmul.f32	s15, s14, s15
 800517a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800517e:	e087      	b.n	8005290 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005180:	693b      	ldr	r3, [r7, #16]
 8005182:	ee07 3a90 	vmov	s15, r3
 8005186:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800518a:	eddf 6a58 	vldr	s13, [pc, #352]	; 80052ec <HAL_RCC_GetSysClockFreq+0x2e8>
 800518e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005192:	4b51      	ldr	r3, [pc, #324]	; (80052d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005196:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800519a:	ee07 3a90 	vmov	s15, r3
 800519e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051a2:	ed97 6a02 	vldr	s12, [r7, #8]
 80051a6:	eddf 5a50 	vldr	s11, [pc, #320]	; 80052e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80051aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80051ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80051b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80051ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80051c2:	e065      	b.n	8005290 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80051c4:	693b      	ldr	r3, [r7, #16]
 80051c6:	ee07 3a90 	vmov	s15, r3
 80051ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051ce:	eddf 6a48 	vldr	s13, [pc, #288]	; 80052f0 <HAL_RCC_GetSysClockFreq+0x2ec>
 80051d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80051d6:	4b40      	ldr	r3, [pc, #256]	; (80052d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80051d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051de:	ee07 3a90 	vmov	s15, r3
 80051e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051e6:	ed97 6a02 	vldr	s12, [r7, #8]
 80051ea:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80052e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80051ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80051f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80051fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80051fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005202:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005206:	e043      	b.n	8005290 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005208:	693b      	ldr	r3, [r7, #16]
 800520a:	ee07 3a90 	vmov	s15, r3
 800520e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005212:	eddf 6a38 	vldr	s13, [pc, #224]	; 80052f4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005216:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800521a:	4b2f      	ldr	r3, [pc, #188]	; (80052d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800521c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800521e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005222:	ee07 3a90 	vmov	s15, r3
 8005226:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800522a:	ed97 6a02 	vldr	s12, [r7, #8]
 800522e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80052e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005232:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005236:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800523a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800523e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005242:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005246:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800524a:	e021      	b.n	8005290 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800524c:	693b      	ldr	r3, [r7, #16]
 800524e:	ee07 3a90 	vmov	s15, r3
 8005252:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005256:	eddf 6a26 	vldr	s13, [pc, #152]	; 80052f0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800525a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800525e:	4b1e      	ldr	r3, [pc, #120]	; (80052d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005262:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005266:	ee07 3a90 	vmov	s15, r3
 800526a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800526e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005272:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80052e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005276:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800527a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800527e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005282:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005286:	ee67 7a27 	vmul.f32	s15, s14, s15
 800528a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800528e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8005290:	4b11      	ldr	r3, [pc, #68]	; (80052d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005292:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005294:	0a5b      	lsrs	r3, r3, #9
 8005296:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800529a:	3301      	adds	r3, #1
 800529c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	ee07 3a90 	vmov	s15, r3
 80052a4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80052a8:	edd7 6a07 	vldr	s13, [r7, #28]
 80052ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80052b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80052b4:	ee17 3a90 	vmov	r3, s15
 80052b8:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80052ba:	e005      	b.n	80052c8 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80052bc:	2300      	movs	r3, #0
 80052be:	61bb      	str	r3, [r7, #24]
    break;
 80052c0:	e002      	b.n	80052c8 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80052c2:	4b07      	ldr	r3, [pc, #28]	; (80052e0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80052c4:	61bb      	str	r3, [r7, #24]
    break;
 80052c6:	bf00      	nop
  }

  return sysclockfreq;
 80052c8:	69bb      	ldr	r3, [r7, #24]
}
 80052ca:	4618      	mov	r0, r3
 80052cc:	3724      	adds	r7, #36	; 0x24
 80052ce:	46bd      	mov	sp, r7
 80052d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d4:	4770      	bx	lr
 80052d6:	bf00      	nop
 80052d8:	58024400 	.word	0x58024400
 80052dc:	03d09000 	.word	0x03d09000
 80052e0:	003d0900 	.word	0x003d0900
 80052e4:	016e3600 	.word	0x016e3600
 80052e8:	46000000 	.word	0x46000000
 80052ec:	4c742400 	.word	0x4c742400
 80052f0:	4a742400 	.word	0x4a742400
 80052f4:	4bb71b00 	.word	0x4bb71b00

080052f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b082      	sub	sp, #8
 80052fc:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 80052fe:	f7ff fe81 	bl	8005004 <HAL_RCC_GetSysClockFreq>
 8005302:	4602      	mov	r2, r0
 8005304:	4b10      	ldr	r3, [pc, #64]	; (8005348 <HAL_RCC_GetHCLKFreq+0x50>)
 8005306:	699b      	ldr	r3, [r3, #24]
 8005308:	0a1b      	lsrs	r3, r3, #8
 800530a:	f003 030f 	and.w	r3, r3, #15
 800530e:	490f      	ldr	r1, [pc, #60]	; (800534c <HAL_RCC_GetHCLKFreq+0x54>)
 8005310:	5ccb      	ldrb	r3, [r1, r3]
 8005312:	f003 031f 	and.w	r3, r3, #31
 8005316:	fa22 f303 	lsr.w	r3, r2, r3
 800531a:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800531c:	4b0a      	ldr	r3, [pc, #40]	; (8005348 <HAL_RCC_GetHCLKFreq+0x50>)
 800531e:	699b      	ldr	r3, [r3, #24]
 8005320:	f003 030f 	and.w	r3, r3, #15
 8005324:	4a09      	ldr	r2, [pc, #36]	; (800534c <HAL_RCC_GetHCLKFreq+0x54>)
 8005326:	5cd3      	ldrb	r3, [r2, r3]
 8005328:	f003 031f 	and.w	r3, r3, #31
 800532c:	687a      	ldr	r2, [r7, #4]
 800532e:	fa22 f303 	lsr.w	r3, r2, r3
 8005332:	4a07      	ldr	r2, [pc, #28]	; (8005350 <HAL_RCC_GetHCLKFreq+0x58>)
 8005334:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005336:	4a07      	ldr	r2, [pc, #28]	; (8005354 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800533c:	4b04      	ldr	r3, [pc, #16]	; (8005350 <HAL_RCC_GetHCLKFreq+0x58>)
 800533e:	681b      	ldr	r3, [r3, #0]
}
 8005340:	4618      	mov	r0, r3
 8005342:	3708      	adds	r7, #8
 8005344:	46bd      	mov	sp, r7
 8005346:	bd80      	pop	{r7, pc}
 8005348:	58024400 	.word	0x58024400
 800534c:	0800948c 	.word	0x0800948c
 8005350:	24000004 	.word	0x24000004
 8005354:	24000000 	.word	0x24000000

08005358 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005358:	b580      	push	{r7, lr}
 800535a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 800535c:	f7ff ffcc 	bl	80052f8 <HAL_RCC_GetHCLKFreq>
 8005360:	4602      	mov	r2, r0
 8005362:	4b06      	ldr	r3, [pc, #24]	; (800537c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005364:	69db      	ldr	r3, [r3, #28]
 8005366:	091b      	lsrs	r3, r3, #4
 8005368:	f003 0307 	and.w	r3, r3, #7
 800536c:	4904      	ldr	r1, [pc, #16]	; (8005380 <HAL_RCC_GetPCLK1Freq+0x28>)
 800536e:	5ccb      	ldrb	r3, [r1, r3]
 8005370:	f003 031f 	and.w	r3, r3, #31
 8005374:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8005378:	4618      	mov	r0, r3
 800537a:	bd80      	pop	{r7, pc}
 800537c:	58024400 	.word	0x58024400
 8005380:	0800948c 	.word	0x0800948c

08005384 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005384:	b480      	push	{r7}
 8005386:	b083      	sub	sp, #12
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
 800538c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	223f      	movs	r2, #63	; 0x3f
 8005392:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005394:	4b1a      	ldr	r3, [pc, #104]	; (8005400 <HAL_RCC_GetClockConfig+0x7c>)
 8005396:	691b      	ldr	r3, [r3, #16]
 8005398:	f003 0207 	and.w	r2, r3, #7
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	605a      	str	r2, [r3, #4]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
#else
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE);
 80053a0:	4b17      	ldr	r3, [pc, #92]	; (8005400 <HAL_RCC_GetClockConfig+0x7c>)
 80053a2:	699b      	ldr	r3, [r3, #24]
 80053a4:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE);
 80053ac:	4b14      	ldr	r3, [pc, #80]	; (8005400 <HAL_RCC_GetClockConfig+0x7c>)
 80053ae:	699b      	ldr	r3, [r3, #24]
 80053b0:	f003 020f 	and.w	r2, r3, #15
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE);
 80053b8:	4b11      	ldr	r3, [pc, #68]	; (8005400 <HAL_RCC_GetClockConfig+0x7c>)
 80053ba:	699b      	ldr	r3, [r3, #24]
 80053bc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1);
 80053c4:	4b0e      	ldr	r3, [pc, #56]	; (8005400 <HAL_RCC_GetClockConfig+0x7c>)
 80053c6:	69db      	ldr	r3, [r3, #28]
 80053c8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2);
 80053d0:	4b0b      	ldr	r3, [pc, #44]	; (8005400 <HAL_RCC_GetClockConfig+0x7c>)
 80053d2:	69db      	ldr	r3, [r3, #28]
 80053d4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
 80053dc:	4b08      	ldr	r3, [pc, #32]	; (8005400 <HAL_RCC_GetClockConfig+0x7c>)
 80053de:	6a1b      	ldr	r3, [r3, #32]
 80053e0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	61da      	str	r2, [r3, #28]
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80053e8:	4b06      	ldr	r3, [pc, #24]	; (8005404 <HAL_RCC_GetClockConfig+0x80>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f003 020f 	and.w	r2, r3, #15
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	601a      	str	r2, [r3, #0]
}
 80053f4:	bf00      	nop
 80053f6:	370c      	adds	r7, #12
 80053f8:	46bd      	mov	sp, r7
 80053fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fe:	4770      	bx	lr
 8005400:	58024400 	.word	0x58024400
 8005404:	52002000 	.word	0x52002000

08005408 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b086      	sub	sp, #24
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005410:	2300      	movs	r3, #0
 8005412:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005414:	2300      	movs	r3, #0
 8005416:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005420:	2b00      	cmp	r3, #0
 8005422:	d03f      	beq.n	80054a4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005428:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800542c:	d02a      	beq.n	8005484 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800542e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005432:	d824      	bhi.n	800547e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005434:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005438:	d018      	beq.n	800546c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800543a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800543e:	d81e      	bhi.n	800547e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005440:	2b00      	cmp	r3, #0
 8005442:	d003      	beq.n	800544c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005444:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005448:	d007      	beq.n	800545a <HAL_RCCEx_PeriphCLKConfig+0x52>
 800544a:	e018      	b.n	800547e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800544c:	4ba6      	ldr	r3, [pc, #664]	; (80056e8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800544e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005450:	4aa5      	ldr	r2, [pc, #660]	; (80056e8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005452:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005456:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005458:	e015      	b.n	8005486 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	3304      	adds	r3, #4
 800545e:	2102      	movs	r1, #2
 8005460:	4618      	mov	r0, r3
 8005462:	f001 ff17 	bl	8007294 <RCCEx_PLL2_Config>
 8005466:	4603      	mov	r3, r0
 8005468:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800546a:	e00c      	b.n	8005486 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	3324      	adds	r3, #36	; 0x24
 8005470:	2102      	movs	r1, #2
 8005472:	4618      	mov	r0, r3
 8005474:	f001 ffc0 	bl	80073f8 <RCCEx_PLL3_Config>
 8005478:	4603      	mov	r3, r0
 800547a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800547c:	e003      	b.n	8005486 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800547e:	2301      	movs	r3, #1
 8005480:	75fb      	strb	r3, [r7, #23]
      break;
 8005482:	e000      	b.n	8005486 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005484:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005486:	7dfb      	ldrb	r3, [r7, #23]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d109      	bne.n	80054a0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800548c:	4b96      	ldr	r3, [pc, #600]	; (80056e8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800548e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005490:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005498:	4993      	ldr	r1, [pc, #588]	; (80056e8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800549a:	4313      	orrs	r3, r2
 800549c:	650b      	str	r3, [r1, #80]	; 0x50
 800549e:	e001      	b.n	80054a4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054a0:	7dfb      	ldrb	r3, [r7, #23]
 80054a2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d03d      	beq.n	800552c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054b4:	2b04      	cmp	r3, #4
 80054b6:	d826      	bhi.n	8005506 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80054b8:	a201      	add	r2, pc, #4	; (adr r2, 80054c0 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80054ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054be:	bf00      	nop
 80054c0:	080054d5 	.word	0x080054d5
 80054c4:	080054e3 	.word	0x080054e3
 80054c8:	080054f5 	.word	0x080054f5
 80054cc:	0800550d 	.word	0x0800550d
 80054d0:	0800550d 	.word	0x0800550d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80054d4:	4b84      	ldr	r3, [pc, #528]	; (80056e8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80054d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054d8:	4a83      	ldr	r2, [pc, #524]	; (80056e8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80054da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80054de:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80054e0:	e015      	b.n	800550e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	3304      	adds	r3, #4
 80054e6:	2100      	movs	r1, #0
 80054e8:	4618      	mov	r0, r3
 80054ea:	f001 fed3 	bl	8007294 <RCCEx_PLL2_Config>
 80054ee:	4603      	mov	r3, r0
 80054f0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80054f2:	e00c      	b.n	800550e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	3324      	adds	r3, #36	; 0x24
 80054f8:	2100      	movs	r1, #0
 80054fa:	4618      	mov	r0, r3
 80054fc:	f001 ff7c 	bl	80073f8 <RCCEx_PLL3_Config>
 8005500:	4603      	mov	r3, r0
 8005502:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005504:	e003      	b.n	800550e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005506:	2301      	movs	r3, #1
 8005508:	75fb      	strb	r3, [r7, #23]
      break;
 800550a:	e000      	b.n	800550e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800550c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800550e:	7dfb      	ldrb	r3, [r7, #23]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d109      	bne.n	8005528 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005514:	4b74      	ldr	r3, [pc, #464]	; (80056e8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005516:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005518:	f023 0207 	bic.w	r2, r3, #7
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005520:	4971      	ldr	r1, [pc, #452]	; (80056e8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005522:	4313      	orrs	r3, r2
 8005524:	650b      	str	r3, [r1, #80]	; 0x50
 8005526:	e001      	b.n	800552c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005528:	7dfb      	ldrb	r3, [r7, #23]
 800552a:	75bb      	strb	r3, [r7, #22]

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005534:	2b00      	cmp	r3, #0
 8005536:	d04a      	beq.n	80055ce <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    switch(PeriphClkInit->Sai2AClockSelection)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800553c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8005540:	d031      	beq.n	80055a6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
 8005542:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8005546:	d82b      	bhi.n	80055a0 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8005548:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800554c:	d02d      	beq.n	80055aa <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 800554e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005552:	d825      	bhi.n	80055a0 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8005554:	2bc0      	cmp	r3, #192	; 0xc0
 8005556:	d02a      	beq.n	80055ae <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8005558:	2bc0      	cmp	r3, #192	; 0xc0
 800555a:	d821      	bhi.n	80055a0 <HAL_RCCEx_PeriphCLKConfig+0x198>
 800555c:	2b80      	cmp	r3, #128	; 0x80
 800555e:	d016      	beq.n	800558e <HAL_RCCEx_PeriphCLKConfig+0x186>
 8005560:	2b80      	cmp	r3, #128	; 0x80
 8005562:	d81d      	bhi.n	80055a0 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8005564:	2b00      	cmp	r3, #0
 8005566:	d002      	beq.n	800556e <HAL_RCCEx_PeriphCLKConfig+0x166>
 8005568:	2b40      	cmp	r3, #64	; 0x40
 800556a:	d007      	beq.n	800557c <HAL_RCCEx_PeriphCLKConfig+0x174>
 800556c:	e018      	b.n	80055a0 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
    case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
      /* Enable SAI2A Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800556e:	4b5e      	ldr	r3, [pc, #376]	; (80056e8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005572:	4a5d      	ldr	r2, [pc, #372]	; (80056e8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005574:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005578:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 800557a:	e019      	b.n	80055b0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	3304      	adds	r3, #4
 8005580:	2100      	movs	r1, #0
 8005582:	4618      	mov	r0, r3
 8005584:	f001 fe86 	bl	8007294 <RCCEx_PLL2_Config>
 8005588:	4603      	mov	r3, r0
 800558a:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 800558c:	e010      	b.n	80055b0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	3324      	adds	r3, #36	; 0x24
 8005592:	2100      	movs	r1, #0
 8005594:	4618      	mov	r0, r3
 8005596:	f001 ff2f 	bl	80073f8 <RCCEx_PLL3_Config>
 800559a:	4603      	mov	r3, r0
 800559c:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 800559e:	e007      	b.n	80055b0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      /* SPDIF clock is used as source of SAI2A clock */
      /* SAI2A clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80055a0:	2301      	movs	r3, #1
 80055a2:	75fb      	strb	r3, [r7, #23]
      break;
 80055a4:	e004      	b.n	80055b0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 80055a6:	bf00      	nop
 80055a8:	e002      	b.n	80055b0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 80055aa:	bf00      	nop
 80055ac:	e000      	b.n	80055b0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 80055ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 80055b0:	7dfb      	ldrb	r3, [r7, #23]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d109      	bne.n	80055ca <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 80055b6:	4b4c      	ldr	r3, [pc, #304]	; (80056e8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80055b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055ba:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055c2:	4949      	ldr	r1, [pc, #292]	; (80056e8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80055c4:	4313      	orrs	r3, r2
 80055c6:	650b      	str	r3, [r1, #80]	; 0x50
 80055c8:	e001      	b.n	80055ce <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055ca:	7dfb      	ldrb	r3, [r7, #23]
 80055cc:	75bb      	strb	r3, [r7, #22]
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d04f      	beq.n	800567a <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    switch(PeriphClkInit->Sai2BClockSelection)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055de:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80055e2:	d036      	beq.n	8005652 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 80055e4:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80055e8:	d830      	bhi.n	800564c <HAL_RCCEx_PeriphCLKConfig+0x244>
 80055ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80055ee:	d032      	beq.n	8005656 <HAL_RCCEx_PeriphCLKConfig+0x24e>
 80055f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80055f4:	d82a      	bhi.n	800564c <HAL_RCCEx_PeriphCLKConfig+0x244>
 80055f6:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80055fa:	d02e      	beq.n	800565a <HAL_RCCEx_PeriphCLKConfig+0x252>
 80055fc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005600:	d824      	bhi.n	800564c <HAL_RCCEx_PeriphCLKConfig+0x244>
 8005602:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005606:	d018      	beq.n	800563a <HAL_RCCEx_PeriphCLKConfig+0x232>
 8005608:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800560c:	d81e      	bhi.n	800564c <HAL_RCCEx_PeriphCLKConfig+0x244>
 800560e:	2b00      	cmp	r3, #0
 8005610:	d003      	beq.n	800561a <HAL_RCCEx_PeriphCLKConfig+0x212>
 8005612:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005616:	d007      	beq.n	8005628 <HAL_RCCEx_PeriphCLKConfig+0x220>
 8005618:	e018      	b.n	800564c <HAL_RCCEx_PeriphCLKConfig+0x244>
    {
    case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800561a:	4b33      	ldr	r3, [pc, #204]	; (80056e8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800561c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800561e:	4a32      	ldr	r2, [pc, #200]	; (80056e8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005620:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005624:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8005626:	e019      	b.n	800565c <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	3304      	adds	r3, #4
 800562c:	2100      	movs	r1, #0
 800562e:	4618      	mov	r0, r3
 8005630:	f001 fe30 	bl	8007294 <RCCEx_PLL2_Config>
 8005634:	4603      	mov	r3, r0
 8005636:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8005638:	e010      	b.n	800565c <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	3324      	adds	r3, #36	; 0x24
 800563e:	2100      	movs	r1, #0
 8005640:	4618      	mov	r0, r3
 8005642:	f001 fed9 	bl	80073f8 <RCCEx_PLL3_Config>
 8005646:	4603      	mov	r3, r0
 8005648:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 800564a:	e007      	b.n	800565c <HAL_RCCEx_PeriphCLKConfig+0x254>
      /* SPDIF clock is used as source of SAI2B clock */
      /* SAI2B clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800564c:	2301      	movs	r3, #1
 800564e:	75fb      	strb	r3, [r7, #23]
      break;
 8005650:	e004      	b.n	800565c <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 8005652:	bf00      	nop
 8005654:	e002      	b.n	800565c <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 8005656:	bf00      	nop
 8005658:	e000      	b.n	800565c <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 800565a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800565c:	7dfb      	ldrb	r3, [r7, #23]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d109      	bne.n	8005676 <HAL_RCCEx_PeriphCLKConfig+0x26e>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8005662:	4b21      	ldr	r3, [pc, #132]	; (80056e8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005664:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005666:	f423 6260 	bic.w	r2, r3, #3584	; 0xe00
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800566e:	491e      	ldr	r1, [pc, #120]	; (80056e8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005670:	4313      	orrs	r3, r2
 8005672:	650b      	str	r3, [r1, #80]	; 0x50
 8005674:	e001      	b.n	800567a <HAL_RCCEx_PeriphCLKConfig+0x272>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005676:	7dfb      	ldrb	r3, [r7, #23]
 8005678:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005682:	2b00      	cmp	r3, #0
 8005684:	d034      	beq.n	80056f0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800568a:	2b30      	cmp	r3, #48	; 0x30
 800568c:	d01c      	beq.n	80056c8 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 800568e:	2b30      	cmp	r3, #48	; 0x30
 8005690:	d817      	bhi.n	80056c2 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8005692:	2b20      	cmp	r3, #32
 8005694:	d00c      	beq.n	80056b0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005696:	2b20      	cmp	r3, #32
 8005698:	d813      	bhi.n	80056c2 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 800569a:	2b00      	cmp	r3, #0
 800569c:	d016      	beq.n	80056cc <HAL_RCCEx_PeriphCLKConfig+0x2c4>
 800569e:	2b10      	cmp	r3, #16
 80056a0:	d10f      	bne.n	80056c2 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80056a2:	4b11      	ldr	r3, [pc, #68]	; (80056e8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80056a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056a6:	4a10      	ldr	r2, [pc, #64]	; (80056e8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80056a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80056ac:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 80056ae:	e00e      	b.n	80056ce <HAL_RCCEx_PeriphCLKConfig+0x2c6>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	3304      	adds	r3, #4
 80056b4:	2102      	movs	r1, #2
 80056b6:	4618      	mov	r0, r3
 80056b8:	f001 fdec 	bl	8007294 <RCCEx_PLL2_Config>
 80056bc:	4603      	mov	r3, r0
 80056be:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 80056c0:	e005      	b.n	80056ce <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80056c2:	2301      	movs	r3, #1
 80056c4:	75fb      	strb	r3, [r7, #23]
      break;
 80056c6:	e002      	b.n	80056ce <HAL_RCCEx_PeriphCLKConfig+0x2c6>
      break;
 80056c8:	bf00      	nop
 80056ca:	e000      	b.n	80056ce <HAL_RCCEx_PeriphCLKConfig+0x2c6>
      break;
 80056cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80056ce:	7dfb      	ldrb	r3, [r7, #23]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d10b      	bne.n	80056ec <HAL_RCCEx_PeriphCLKConfig+0x2e4>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80056d4:	4b04      	ldr	r3, [pc, #16]	; (80056e8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80056d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056d8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056e0:	4901      	ldr	r1, [pc, #4]	; (80056e8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80056e2:	4313      	orrs	r3, r2
 80056e4:	64cb      	str	r3, [r1, #76]	; 0x4c
 80056e6:	e003      	b.n	80056f0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 80056e8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056ec:	7dfb      	ldrb	r3, [r7, #23]
 80056ee:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d047      	beq.n	800578c <HAL_RCCEx_PeriphCLKConfig+0x384>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005700:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005704:	d030      	beq.n	8005768 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8005706:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800570a:	d82a      	bhi.n	8005762 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 800570c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005710:	d02c      	beq.n	800576c <HAL_RCCEx_PeriphCLKConfig+0x364>
 8005712:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005716:	d824      	bhi.n	8005762 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8005718:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800571c:	d018      	beq.n	8005750 <HAL_RCCEx_PeriphCLKConfig+0x348>
 800571e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005722:	d81e      	bhi.n	8005762 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8005724:	2b00      	cmp	r3, #0
 8005726:	d003      	beq.n	8005730 <HAL_RCCEx_PeriphCLKConfig+0x328>
 8005728:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800572c:	d007      	beq.n	800573e <HAL_RCCEx_PeriphCLKConfig+0x336>
 800572e:	e018      	b.n	8005762 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005730:	4bb0      	ldr	r3, [pc, #704]	; (80059f4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8005732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005734:	4aaf      	ldr	r2, [pc, #700]	; (80059f4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8005736:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800573a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800573c:	e017      	b.n	800576e <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	3304      	adds	r3, #4
 8005742:	2100      	movs	r1, #0
 8005744:	4618      	mov	r0, r3
 8005746:	f001 fda5 	bl	8007294 <RCCEx_PLL2_Config>
 800574a:	4603      	mov	r3, r0
 800574c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800574e:	e00e      	b.n	800576e <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	3324      	adds	r3, #36	; 0x24
 8005754:	2100      	movs	r1, #0
 8005756:	4618      	mov	r0, r3
 8005758:	f001 fe4e 	bl	80073f8 <RCCEx_PLL3_Config>
 800575c:	4603      	mov	r3, r0
 800575e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005760:	e005      	b.n	800576e <HAL_RCCEx_PeriphCLKConfig+0x366>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005762:	2301      	movs	r3, #1
 8005764:	75fb      	strb	r3, [r7, #23]
      break;
 8005766:	e002      	b.n	800576e <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 8005768:	bf00      	nop
 800576a:	e000      	b.n	800576e <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 800576c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800576e:	7dfb      	ldrb	r3, [r7, #23]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d109      	bne.n	8005788 <HAL_RCCEx_PeriphCLKConfig+0x380>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005774:	4b9f      	ldr	r3, [pc, #636]	; (80059f4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8005776:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005778:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005780:	499c      	ldr	r1, [pc, #624]	; (80059f4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8005782:	4313      	orrs	r3, r2
 8005784:	650b      	str	r3, [r1, #80]	; 0x50
 8005786:	e001      	b.n	800578c <HAL_RCCEx_PeriphCLKConfig+0x384>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005788:	7dfb      	ldrb	r3, [r7, #23]
 800578a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005794:	2b00      	cmp	r3, #0
 8005796:	d049      	beq.n	800582c <HAL_RCCEx_PeriphCLKConfig+0x424>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800579c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80057a0:	d02e      	beq.n	8005800 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80057a2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80057a6:	d828      	bhi.n	80057fa <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 80057a8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80057ac:	d02a      	beq.n	8005804 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 80057ae:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80057b2:	d822      	bhi.n	80057fa <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 80057b4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80057b8:	d026      	beq.n	8005808 <HAL_RCCEx_PeriphCLKConfig+0x400>
 80057ba:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80057be:	d81c      	bhi.n	80057fa <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 80057c0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80057c4:	d010      	beq.n	80057e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80057c6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80057ca:	d816      	bhi.n	80057fa <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d01d      	beq.n	800580c <HAL_RCCEx_PeriphCLKConfig+0x404>
 80057d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057d4:	d111      	bne.n	80057fa <HAL_RCCEx_PeriphCLKConfig+0x3f2>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	3304      	adds	r3, #4
 80057da:	2101      	movs	r1, #1
 80057dc:	4618      	mov	r0, r3
 80057de:	f001 fd59 	bl	8007294 <RCCEx_PLL2_Config>
 80057e2:	4603      	mov	r3, r0
 80057e4:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80057e6:	e012      	b.n	800580e <HAL_RCCEx_PeriphCLKConfig+0x406>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	3324      	adds	r3, #36	; 0x24
 80057ec:	2101      	movs	r1, #1
 80057ee:	4618      	mov	r0, r3
 80057f0:	f001 fe02 	bl	80073f8 <RCCEx_PLL3_Config>
 80057f4:	4603      	mov	r3, r0
 80057f6:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80057f8:	e009      	b.n	800580e <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80057fa:	2301      	movs	r3, #1
 80057fc:	75fb      	strb	r3, [r7, #23]
      break;
 80057fe:	e006      	b.n	800580e <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8005800:	bf00      	nop
 8005802:	e004      	b.n	800580e <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8005804:	bf00      	nop
 8005806:	e002      	b.n	800580e <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8005808:	bf00      	nop
 800580a:	e000      	b.n	800580e <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 800580c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800580e:	7dfb      	ldrb	r3, [r7, #23]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d109      	bne.n	8005828 <HAL_RCCEx_PeriphCLKConfig+0x420>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005814:	4b77      	ldr	r3, [pc, #476]	; (80059f4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8005816:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005818:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005820:	4974      	ldr	r1, [pc, #464]	; (80059f4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8005822:	4313      	orrs	r3, r2
 8005824:	650b      	str	r3, [r1, #80]	; 0x50
 8005826:	e001      	b.n	800582c <HAL_RCCEx_PeriphCLKConfig+0x424>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005828:	7dfb      	ldrb	r3, [r7, #23]
 800582a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005834:	2b00      	cmp	r3, #0
 8005836:	d053      	beq.n	80058e0 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800583e:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8005842:	d034      	beq.n	80058ae <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8005844:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8005848:	d82e      	bhi.n	80058a8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 800584a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800584e:	d030      	beq.n	80058b2 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 8005850:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005854:	d828      	bhi.n	80058a8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8005856:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800585a:	d02c      	beq.n	80058b6 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 800585c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005860:	d822      	bhi.n	80058a8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8005862:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005866:	d028      	beq.n	80058ba <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8005868:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800586c:	d81c      	bhi.n	80058a8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 800586e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005872:	d010      	beq.n	8005896 <HAL_RCCEx_PeriphCLKConfig+0x48e>
 8005874:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005878:	d816      	bhi.n	80058a8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 800587a:	2b00      	cmp	r3, #0
 800587c:	d01f      	beq.n	80058be <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 800587e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005882:	d111      	bne.n	80058a8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	3304      	adds	r3, #4
 8005888:	2101      	movs	r1, #1
 800588a:	4618      	mov	r0, r3
 800588c:	f001 fd02 	bl	8007294 <RCCEx_PLL2_Config>
 8005890:	4603      	mov	r3, r0
 8005892:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005894:	e014      	b.n	80058c0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	3324      	adds	r3, #36	; 0x24
 800589a:	2101      	movs	r1, #1
 800589c:	4618      	mov	r0, r3
 800589e:	f001 fdab 	bl	80073f8 <RCCEx_PLL3_Config>
 80058a2:	4603      	mov	r3, r0
 80058a4:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80058a6:	e00b      	b.n	80058c0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80058a8:	2301      	movs	r3, #1
 80058aa:	75fb      	strb	r3, [r7, #23]
      break;
 80058ac:	e008      	b.n	80058c0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 80058ae:	bf00      	nop
 80058b0:	e006      	b.n	80058c0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 80058b2:	bf00      	nop
 80058b4:	e004      	b.n	80058c0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 80058b6:	bf00      	nop
 80058b8:	e002      	b.n	80058c0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 80058ba:	bf00      	nop
 80058bc:	e000      	b.n	80058c0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 80058be:	bf00      	nop
    }

    if(ret == HAL_OK)
 80058c0:	7dfb      	ldrb	r3, [r7, #23]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d10a      	bne.n	80058dc <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80058c6:	4b4b      	ldr	r3, [pc, #300]	; (80059f4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80058c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058ca:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80058d4:	4947      	ldr	r1, [pc, #284]	; (80059f4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80058d6:	4313      	orrs	r3, r2
 80058d8:	658b      	str	r3, [r1, #88]	; 0x58
 80058da:	e001      	b.n	80058e0 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058dc:	7dfb      	ldrb	r3, [r7, #23]
 80058de:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d02f      	beq.n	800594c <HAL_RCCEx_PeriphCLKConfig+0x544>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80058f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80058f4:	d00e      	beq.n	8005914 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 80058f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80058fa:	d814      	bhi.n	8005926 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d015      	beq.n	800592c <HAL_RCCEx_PeriphCLKConfig+0x524>
 8005900:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005904:	d10f      	bne.n	8005926 <HAL_RCCEx_PeriphCLKConfig+0x51e>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005906:	4b3b      	ldr	r3, [pc, #236]	; (80059f4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8005908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800590a:	4a3a      	ldr	r2, [pc, #232]	; (80059f4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800590c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005910:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005912:	e00c      	b.n	800592e <HAL_RCCEx_PeriphCLKConfig+0x526>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	3304      	adds	r3, #4
 8005918:	2101      	movs	r1, #1
 800591a:	4618      	mov	r0, r3
 800591c:	f001 fcba 	bl	8007294 <RCCEx_PLL2_Config>
 8005920:	4603      	mov	r3, r0
 8005922:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005924:	e003      	b.n	800592e <HAL_RCCEx_PeriphCLKConfig+0x526>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005926:	2301      	movs	r3, #1
 8005928:	75fb      	strb	r3, [r7, #23]
      break;
 800592a:	e000      	b.n	800592e <HAL_RCCEx_PeriphCLKConfig+0x526>
      break;
 800592c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800592e:	7dfb      	ldrb	r3, [r7, #23]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d109      	bne.n	8005948 <HAL_RCCEx_PeriphCLKConfig+0x540>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005934:	4b2f      	ldr	r3, [pc, #188]	; (80059f4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8005936:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005938:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005940:	492c      	ldr	r1, [pc, #176]	; (80059f4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8005942:	4313      	orrs	r3, r2
 8005944:	650b      	str	r3, [r1, #80]	; 0x50
 8005946:	e001      	b.n	800594c <HAL_RCCEx_PeriphCLKConfig+0x544>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005948:	7dfb      	ldrb	r3, [r7, #23]
 800594a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005954:	2b00      	cmp	r3, #0
 8005956:	d032      	beq.n	80059be <HAL_RCCEx_PeriphCLKConfig+0x5b6>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800595c:	2b03      	cmp	r3, #3
 800595e:	d81b      	bhi.n	8005998 <HAL_RCCEx_PeriphCLKConfig+0x590>
 8005960:	a201      	add	r2, pc, #4	; (adr r2, 8005968 <HAL_RCCEx_PeriphCLKConfig+0x560>)
 8005962:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005966:	bf00      	nop
 8005968:	0800599f 	.word	0x0800599f
 800596c:	08005979 	.word	0x08005979
 8005970:	08005987 	.word	0x08005987
 8005974:	0800599f 	.word	0x0800599f
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005978:	4b1e      	ldr	r3, [pc, #120]	; (80059f4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800597a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800597c:	4a1d      	ldr	r2, [pc, #116]	; (80059f4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800597e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005982:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005984:	e00c      	b.n	80059a0 <HAL_RCCEx_PeriphCLKConfig+0x598>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	3304      	adds	r3, #4
 800598a:	2102      	movs	r1, #2
 800598c:	4618      	mov	r0, r3
 800598e:	f001 fc81 	bl	8007294 <RCCEx_PLL2_Config>
 8005992:	4603      	mov	r3, r0
 8005994:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005996:	e003      	b.n	80059a0 <HAL_RCCEx_PeriphCLKConfig+0x598>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005998:	2301      	movs	r3, #1
 800599a:	75fb      	strb	r3, [r7, #23]
      break;
 800599c:	e000      	b.n	80059a0 <HAL_RCCEx_PeriphCLKConfig+0x598>
      break;
 800599e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80059a0:	7dfb      	ldrb	r3, [r7, #23]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d109      	bne.n	80059ba <HAL_RCCEx_PeriphCLKConfig+0x5b2>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80059a6:	4b13      	ldr	r3, [pc, #76]	; (80059f4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80059a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059aa:	f023 0203 	bic.w	r2, r3, #3
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059b2:	4910      	ldr	r1, [pc, #64]	; (80059f4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80059b4:	4313      	orrs	r3, r2
 80059b6:	64cb      	str	r3, [r1, #76]	; 0x4c
 80059b8:	e001      	b.n	80059be <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059ba:	7dfb      	ldrb	r3, [r7, #23]
 80059bc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	f000 808a 	beq.w	8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80059cc:	4b0a      	ldr	r3, [pc, #40]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	4a09      	ldr	r2, [pc, #36]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80059d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80059d6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80059d8:	f7fb fe86 	bl	80016e8 <HAL_GetTick>
 80059dc:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80059de:	e00d      	b.n	80059fc <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80059e0:	f7fb fe82 	bl	80016e8 <HAL_GetTick>
 80059e4:	4602      	mov	r2, r0
 80059e6:	693b      	ldr	r3, [r7, #16]
 80059e8:	1ad3      	subs	r3, r2, r3
 80059ea:	2b64      	cmp	r3, #100	; 0x64
 80059ec:	d906      	bls.n	80059fc <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      {
        ret = HAL_TIMEOUT;
 80059ee:	2303      	movs	r3, #3
 80059f0:	75fb      	strb	r3, [r7, #23]
        break;
 80059f2:	e009      	b.n	8005a08 <HAL_RCCEx_PeriphCLKConfig+0x600>
 80059f4:	58024400 	.word	0x58024400
 80059f8:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80059fc:	4bba      	ldr	r3, [pc, #744]	; (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d0eb      	beq.n	80059e0 <HAL_RCCEx_PeriphCLKConfig+0x5d8>
      }
    }

    if(ret == HAL_OK)
 8005a08:	7dfb      	ldrb	r3, [r7, #23]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d166      	bne.n	8005adc <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005a0e:	4bb7      	ldr	r3, [pc, #732]	; (8005cec <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005a10:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005a18:	4053      	eors	r3, r2
 8005a1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d013      	beq.n	8005a4a <HAL_RCCEx_PeriphCLKConfig+0x642>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005a22:	4bb2      	ldr	r3, [pc, #712]	; (8005cec <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005a24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a2a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005a2c:	4baf      	ldr	r3, [pc, #700]	; (8005cec <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005a2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a30:	4aae      	ldr	r2, [pc, #696]	; (8005cec <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005a32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a36:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005a38:	4bac      	ldr	r3, [pc, #688]	; (8005cec <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005a3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a3c:	4aab      	ldr	r2, [pc, #684]	; (8005cec <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005a3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a42:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005a44:	4aa9      	ldr	r2, [pc, #676]	; (8005cec <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005a50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a54:	d115      	bne.n	8005a82 <HAL_RCCEx_PeriphCLKConfig+0x67a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a56:	f7fb fe47 	bl	80016e8 <HAL_GetTick>
 8005a5a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005a5c:	e00b      	b.n	8005a76 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a5e:	f7fb fe43 	bl	80016e8 <HAL_GetTick>
 8005a62:	4602      	mov	r2, r0
 8005a64:	693b      	ldr	r3, [r7, #16]
 8005a66:	1ad3      	subs	r3, r2, r3
 8005a68:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d902      	bls.n	8005a76 <HAL_RCCEx_PeriphCLKConfig+0x66e>
          {
            ret = HAL_TIMEOUT;
 8005a70:	2303      	movs	r3, #3
 8005a72:	75fb      	strb	r3, [r7, #23]
            break;
 8005a74:	e005      	b.n	8005a82 <HAL_RCCEx_PeriphCLKConfig+0x67a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005a76:	4b9d      	ldr	r3, [pc, #628]	; (8005cec <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005a78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a7a:	f003 0302 	and.w	r3, r3, #2
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d0ed      	beq.n	8005a5e <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if(ret == HAL_OK)
 8005a82:	7dfb      	ldrb	r3, [r7, #23]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d126      	bne.n	8005ad6 <HAL_RCCEx_PeriphCLKConfig+0x6ce>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005a8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a92:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a96:	d10d      	bne.n	8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x6ac>
 8005a98:	4b94      	ldr	r3, [pc, #592]	; (8005cec <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005a9a:	691b      	ldr	r3, [r3, #16]
 8005a9c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005aa6:	0919      	lsrs	r1, r3, #4
 8005aa8:	4b91      	ldr	r3, [pc, #580]	; (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005aaa:	400b      	ands	r3, r1
 8005aac:	498f      	ldr	r1, [pc, #572]	; (8005cec <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005aae:	4313      	orrs	r3, r2
 8005ab0:	610b      	str	r3, [r1, #16]
 8005ab2:	e005      	b.n	8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 8005ab4:	4b8d      	ldr	r3, [pc, #564]	; (8005cec <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005ab6:	691b      	ldr	r3, [r3, #16]
 8005ab8:	4a8c      	ldr	r2, [pc, #560]	; (8005cec <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005aba:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005abe:	6113      	str	r3, [r2, #16]
 8005ac0:	4b8a      	ldr	r3, [pc, #552]	; (8005cec <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005ac2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005aca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ace:	4987      	ldr	r1, [pc, #540]	; (8005cec <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005ad0:	4313      	orrs	r3, r2
 8005ad2:	670b      	str	r3, [r1, #112]	; 0x70
 8005ad4:	e004      	b.n	8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005ad6:	7dfb      	ldrb	r3, [r7, #23]
 8005ad8:	75bb      	strb	r3, [r7, #22]
 8005ada:	e001      	b.n	8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005adc:	7dfb      	ldrb	r3, [r7, #23]
 8005ade:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f003 0301 	and.w	r3, r3, #1
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d07f      	beq.n	8005bec <HAL_RCCEx_PeriphCLKConfig+0x7e4>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005af2:	2b28      	cmp	r3, #40	; 0x28
 8005af4:	d866      	bhi.n	8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 8005af6:	a201      	add	r2, pc, #4	; (adr r2, 8005afc <HAL_RCCEx_PeriphCLKConfig+0x6f4>)
 8005af8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005afc:	08005bcb 	.word	0x08005bcb
 8005b00:	08005bc5 	.word	0x08005bc5
 8005b04:	08005bc5 	.word	0x08005bc5
 8005b08:	08005bc5 	.word	0x08005bc5
 8005b0c:	08005bc5 	.word	0x08005bc5
 8005b10:	08005bc5 	.word	0x08005bc5
 8005b14:	08005bc5 	.word	0x08005bc5
 8005b18:	08005bc5 	.word	0x08005bc5
 8005b1c:	08005ba1 	.word	0x08005ba1
 8005b20:	08005bc5 	.word	0x08005bc5
 8005b24:	08005bc5 	.word	0x08005bc5
 8005b28:	08005bc5 	.word	0x08005bc5
 8005b2c:	08005bc5 	.word	0x08005bc5
 8005b30:	08005bc5 	.word	0x08005bc5
 8005b34:	08005bc5 	.word	0x08005bc5
 8005b38:	08005bc5 	.word	0x08005bc5
 8005b3c:	08005bb3 	.word	0x08005bb3
 8005b40:	08005bc5 	.word	0x08005bc5
 8005b44:	08005bc5 	.word	0x08005bc5
 8005b48:	08005bc5 	.word	0x08005bc5
 8005b4c:	08005bc5 	.word	0x08005bc5
 8005b50:	08005bc5 	.word	0x08005bc5
 8005b54:	08005bc5 	.word	0x08005bc5
 8005b58:	08005bc5 	.word	0x08005bc5
 8005b5c:	08005bcb 	.word	0x08005bcb
 8005b60:	08005bc5 	.word	0x08005bc5
 8005b64:	08005bc5 	.word	0x08005bc5
 8005b68:	08005bc5 	.word	0x08005bc5
 8005b6c:	08005bc5 	.word	0x08005bc5
 8005b70:	08005bc5 	.word	0x08005bc5
 8005b74:	08005bc5 	.word	0x08005bc5
 8005b78:	08005bc5 	.word	0x08005bc5
 8005b7c:	08005bcb 	.word	0x08005bcb
 8005b80:	08005bc5 	.word	0x08005bc5
 8005b84:	08005bc5 	.word	0x08005bc5
 8005b88:	08005bc5 	.word	0x08005bc5
 8005b8c:	08005bc5 	.word	0x08005bc5
 8005b90:	08005bc5 	.word	0x08005bc5
 8005b94:	08005bc5 	.word	0x08005bc5
 8005b98:	08005bc5 	.word	0x08005bc5
 8005b9c:	08005bcb 	.word	0x08005bcb
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	3304      	adds	r3, #4
 8005ba4:	2101      	movs	r1, #1
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	f001 fb74 	bl	8007294 <RCCEx_PLL2_Config>
 8005bac:	4603      	mov	r3, r0
 8005bae:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005bb0:	e00c      	b.n	8005bcc <HAL_RCCEx_PeriphCLKConfig+0x7c4>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	3324      	adds	r3, #36	; 0x24
 8005bb6:	2101      	movs	r1, #1
 8005bb8:	4618      	mov	r0, r3
 8005bba:	f001 fc1d 	bl	80073f8 <RCCEx_PLL3_Config>
 8005bbe:	4603      	mov	r3, r0
 8005bc0:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005bc2:	e003      	b.n	8005bcc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005bc4:	2301      	movs	r3, #1
 8005bc6:	75fb      	strb	r3, [r7, #23]
      break;
 8005bc8:	e000      	b.n	8005bcc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      break;
 8005bca:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005bcc:	7dfb      	ldrb	r3, [r7, #23]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d10a      	bne.n	8005be8 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005bd2:	4b46      	ldr	r3, [pc, #280]	; (8005cec <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005bd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bd6:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005be0:	4942      	ldr	r1, [pc, #264]	; (8005cec <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005be2:	4313      	orrs	r3, r2
 8005be4:	654b      	str	r3, [r1, #84]	; 0x54
 8005be6:	e001      	b.n	8005bec <HAL_RCCEx_PeriphCLKConfig+0x7e4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005be8:	7dfb      	ldrb	r3, [r7, #23]
 8005bea:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f003 0302 	and.w	r3, r3, #2
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d038      	beq.n	8005c6a <HAL_RCCEx_PeriphCLKConfig+0x862>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005bfc:	2b05      	cmp	r3, #5
 8005bfe:	d821      	bhi.n	8005c44 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8005c00:	a201      	add	r2, pc, #4	; (adr r2, 8005c08 <HAL_RCCEx_PeriphCLKConfig+0x800>)
 8005c02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c06:	bf00      	nop
 8005c08:	08005c4b 	.word	0x08005c4b
 8005c0c:	08005c21 	.word	0x08005c21
 8005c10:	08005c33 	.word	0x08005c33
 8005c14:	08005c4b 	.word	0x08005c4b
 8005c18:	08005c4b 	.word	0x08005c4b
 8005c1c:	08005c4b 	.word	0x08005c4b
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	3304      	adds	r3, #4
 8005c24:	2101      	movs	r1, #1
 8005c26:	4618      	mov	r0, r3
 8005c28:	f001 fb34 	bl	8007294 <RCCEx_PLL2_Config>
 8005c2c:	4603      	mov	r3, r0
 8005c2e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005c30:	e00c      	b.n	8005c4c <HAL_RCCEx_PeriphCLKConfig+0x844>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	3324      	adds	r3, #36	; 0x24
 8005c36:	2101      	movs	r1, #1
 8005c38:	4618      	mov	r0, r3
 8005c3a:	f001 fbdd 	bl	80073f8 <RCCEx_PLL3_Config>
 8005c3e:	4603      	mov	r3, r0
 8005c40:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005c42:	e003      	b.n	8005c4c <HAL_RCCEx_PeriphCLKConfig+0x844>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005c44:	2301      	movs	r3, #1
 8005c46:	75fb      	strb	r3, [r7, #23]
      break;
 8005c48:	e000      	b.n	8005c4c <HAL_RCCEx_PeriphCLKConfig+0x844>
      break;
 8005c4a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005c4c:	7dfb      	ldrb	r3, [r7, #23]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d109      	bne.n	8005c66 <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005c52:	4b26      	ldr	r3, [pc, #152]	; (8005cec <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005c54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c56:	f023 0207 	bic.w	r2, r3, #7
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005c5e:	4923      	ldr	r1, [pc, #140]	; (8005cec <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005c60:	4313      	orrs	r3, r2
 8005c62:	654b      	str	r3, [r1, #84]	; 0x54
 8005c64:	e001      	b.n	8005c6a <HAL_RCCEx_PeriphCLKConfig+0x862>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c66:	7dfb      	ldrb	r3, [r7, #23]
 8005c68:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f003 0304 	and.w	r3, r3, #4
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d040      	beq.n	8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005c7c:	2b05      	cmp	r3, #5
 8005c7e:	d821      	bhi.n	8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8005c80:	a201      	add	r2, pc, #4	; (adr r2, 8005c88 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 8005c82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c86:	bf00      	nop
 8005c88:	08005ccb 	.word	0x08005ccb
 8005c8c:	08005ca1 	.word	0x08005ca1
 8005c90:	08005cb3 	.word	0x08005cb3
 8005c94:	08005ccb 	.word	0x08005ccb
 8005c98:	08005ccb 	.word	0x08005ccb
 8005c9c:	08005ccb 	.word	0x08005ccb
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	3304      	adds	r3, #4
 8005ca4:	2101      	movs	r1, #1
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	f001 faf4 	bl	8007294 <RCCEx_PLL2_Config>
 8005cac:	4603      	mov	r3, r0
 8005cae:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005cb0:	e00c      	b.n	8005ccc <HAL_RCCEx_PeriphCLKConfig+0x8c4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	3324      	adds	r3, #36	; 0x24
 8005cb6:	2101      	movs	r1, #1
 8005cb8:	4618      	mov	r0, r3
 8005cba:	f001 fb9d 	bl	80073f8 <RCCEx_PLL3_Config>
 8005cbe:	4603      	mov	r3, r0
 8005cc0:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005cc2:	e003      	b.n	8005ccc <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005cc4:	2301      	movs	r3, #1
 8005cc6:	75fb      	strb	r3, [r7, #23]
      break;
 8005cc8:	e000      	b.n	8005ccc <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      break;
 8005cca:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005ccc:	7dfb      	ldrb	r3, [r7, #23]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d110      	bne.n	8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005cd2:	4b06      	ldr	r3, [pc, #24]	; (8005cec <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005cd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cd6:	f023 0207 	bic.w	r2, r3, #7
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005ce0:	4902      	ldr	r1, [pc, #8]	; (8005cec <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005ce2:	4313      	orrs	r3, r2
 8005ce4:	658b      	str	r3, [r1, #88]	; 0x58
 8005ce6:	e007      	b.n	8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 8005ce8:	58024800 	.word	0x58024800
 8005cec:	58024400 	.word	0x58024400
 8005cf0:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cf4:	7dfb      	ldrb	r3, [r7, #23]
 8005cf6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f003 0320 	and.w	r3, r3, #32
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d04b      	beq.n	8005d9c <HAL_RCCEx_PeriphCLKConfig+0x994>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005d0a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005d0e:	d02e      	beq.n	8005d6e <HAL_RCCEx_PeriphCLKConfig+0x966>
 8005d10:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005d14:	d828      	bhi.n	8005d68 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8005d16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d1a:	d02a      	beq.n	8005d72 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8005d1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d20:	d822      	bhi.n	8005d68 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8005d22:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005d26:	d026      	beq.n	8005d76 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8005d28:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005d2c:	d81c      	bhi.n	8005d68 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8005d2e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005d32:	d010      	beq.n	8005d56 <HAL_RCCEx_PeriphCLKConfig+0x94e>
 8005d34:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005d38:	d816      	bhi.n	8005d68 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d01d      	beq.n	8005d7a <HAL_RCCEx_PeriphCLKConfig+0x972>
 8005d3e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005d42:	d111      	bne.n	8005d68 <HAL_RCCEx_PeriphCLKConfig+0x960>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	3304      	adds	r3, #4
 8005d48:	2100      	movs	r1, #0
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	f001 faa2 	bl	8007294 <RCCEx_PLL2_Config>
 8005d50:	4603      	mov	r3, r0
 8005d52:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005d54:	e012      	b.n	8005d7c <HAL_RCCEx_PeriphCLKConfig+0x974>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	3324      	adds	r3, #36	; 0x24
 8005d5a:	2102      	movs	r1, #2
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	f001 fb4b 	bl	80073f8 <RCCEx_PLL3_Config>
 8005d62:	4603      	mov	r3, r0
 8005d64:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005d66:	e009      	b.n	8005d7c <HAL_RCCEx_PeriphCLKConfig+0x974>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005d68:	2301      	movs	r3, #1
 8005d6a:	75fb      	strb	r3, [r7, #23]
      break;
 8005d6c:	e006      	b.n	8005d7c <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8005d6e:	bf00      	nop
 8005d70:	e004      	b.n	8005d7c <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8005d72:	bf00      	nop
 8005d74:	e002      	b.n	8005d7c <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8005d76:	bf00      	nop
 8005d78:	e000      	b.n	8005d7c <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8005d7a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005d7c:	7dfb      	ldrb	r3, [r7, #23]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d10a      	bne.n	8005d98 <HAL_RCCEx_PeriphCLKConfig+0x990>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005d82:	4bb3      	ldr	r3, [pc, #716]	; (8006050 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8005d84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d86:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005d90:	49af      	ldr	r1, [pc, #700]	; (8006050 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8005d92:	4313      	orrs	r3, r2
 8005d94:	654b      	str	r3, [r1, #84]	; 0x54
 8005d96:	e001      	b.n	8005d9c <HAL_RCCEx_PeriphCLKConfig+0x994>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d98:	7dfb      	ldrb	r3, [r7, #23]
 8005d9a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d04b      	beq.n	8005e40 <HAL_RCCEx_PeriphCLKConfig+0xa38>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005dae:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005db2:	d02e      	beq.n	8005e12 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8005db4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005db8:	d828      	bhi.n	8005e0c <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8005dba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005dbe:	d02a      	beq.n	8005e16 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8005dc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005dc4:	d822      	bhi.n	8005e0c <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8005dc6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005dca:	d026      	beq.n	8005e1a <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8005dcc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005dd0:	d81c      	bhi.n	8005e0c <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8005dd2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005dd6:	d010      	beq.n	8005dfa <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 8005dd8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ddc:	d816      	bhi.n	8005e0c <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d01d      	beq.n	8005e1e <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8005de2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005de6:	d111      	bne.n	8005e0c <HAL_RCCEx_PeriphCLKConfig+0xa04>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	3304      	adds	r3, #4
 8005dec:	2100      	movs	r1, #0
 8005dee:	4618      	mov	r0, r3
 8005df0:	f001 fa50 	bl	8007294 <RCCEx_PLL2_Config>
 8005df4:	4603      	mov	r3, r0
 8005df6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005df8:	e012      	b.n	8005e20 <HAL_RCCEx_PeriphCLKConfig+0xa18>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	3324      	adds	r3, #36	; 0x24
 8005dfe:	2102      	movs	r1, #2
 8005e00:	4618      	mov	r0, r3
 8005e02:	f001 faf9 	bl	80073f8 <RCCEx_PLL3_Config>
 8005e06:	4603      	mov	r3, r0
 8005e08:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005e0a:	e009      	b.n	8005e20 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005e0c:	2301      	movs	r3, #1
 8005e0e:	75fb      	strb	r3, [r7, #23]
      break;
 8005e10:	e006      	b.n	8005e20 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8005e12:	bf00      	nop
 8005e14:	e004      	b.n	8005e20 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8005e16:	bf00      	nop
 8005e18:	e002      	b.n	8005e20 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8005e1a:	bf00      	nop
 8005e1c:	e000      	b.n	8005e20 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8005e1e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005e20:	7dfb      	ldrb	r3, [r7, #23]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d10a      	bne.n	8005e3c <HAL_RCCEx_PeriphCLKConfig+0xa34>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005e26:	4b8a      	ldr	r3, [pc, #552]	; (8006050 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8005e28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e2a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005e34:	4986      	ldr	r1, [pc, #536]	; (8006050 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8005e36:	4313      	orrs	r3, r2
 8005e38:	658b      	str	r3, [r1, #88]	; 0x58
 8005e3a:	e001      	b.n	8005e40 <HAL_RCCEx_PeriphCLKConfig+0xa38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e3c:	7dfb      	ldrb	r3, [r7, #23]
 8005e3e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d04b      	beq.n	8005ee4 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005e52:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005e56:	d02e      	beq.n	8005eb6 <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8005e58:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005e5c:	d828      	bhi.n	8005eb0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8005e5e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e62:	d02a      	beq.n	8005eba <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8005e64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e68:	d822      	bhi.n	8005eb0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8005e6a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005e6e:	d026      	beq.n	8005ebe <HAL_RCCEx_PeriphCLKConfig+0xab6>
 8005e70:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005e74:	d81c      	bhi.n	8005eb0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8005e76:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005e7a:	d010      	beq.n	8005e9e <HAL_RCCEx_PeriphCLKConfig+0xa96>
 8005e7c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005e80:	d816      	bhi.n	8005eb0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d01d      	beq.n	8005ec2 <HAL_RCCEx_PeriphCLKConfig+0xaba>
 8005e86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e8a:	d111      	bne.n	8005eb0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	3304      	adds	r3, #4
 8005e90:	2100      	movs	r1, #0
 8005e92:	4618      	mov	r0, r3
 8005e94:	f001 f9fe 	bl	8007294 <RCCEx_PLL2_Config>
 8005e98:	4603      	mov	r3, r0
 8005e9a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005e9c:	e012      	b.n	8005ec4 <HAL_RCCEx_PeriphCLKConfig+0xabc>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	3324      	adds	r3, #36	; 0x24
 8005ea2:	2102      	movs	r1, #2
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	f001 faa7 	bl	80073f8 <RCCEx_PLL3_Config>
 8005eaa:	4603      	mov	r3, r0
 8005eac:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005eae:	e009      	b.n	8005ec4 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005eb0:	2301      	movs	r3, #1
 8005eb2:	75fb      	strb	r3, [r7, #23]
      break;
 8005eb4:	e006      	b.n	8005ec4 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8005eb6:	bf00      	nop
 8005eb8:	e004      	b.n	8005ec4 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8005eba:	bf00      	nop
 8005ebc:	e002      	b.n	8005ec4 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8005ebe:	bf00      	nop
 8005ec0:	e000      	b.n	8005ec4 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8005ec2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005ec4:	7dfb      	ldrb	r3, [r7, #23]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d10a      	bne.n	8005ee0 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005eca:	4b61      	ldr	r3, [pc, #388]	; (8006050 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8005ecc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ece:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005ed8:	495d      	ldr	r1, [pc, #372]	; (8006050 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8005eda:	4313      	orrs	r3, r2
 8005edc:	658b      	str	r3, [r1, #88]	; 0x58
 8005ede:	e001      	b.n	8005ee4 <HAL_RCCEx_PeriphCLKConfig+0xadc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ee0:	7dfb      	ldrb	r3, [r7, #23]
 8005ee2:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f003 0308 	and.w	r3, r3, #8
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d01a      	beq.n	8005f26 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ef6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005efa:	d10a      	bne.n	8005f12 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	3324      	adds	r3, #36	; 0x24
 8005f00:	2102      	movs	r1, #2
 8005f02:	4618      	mov	r0, r3
 8005f04:	f001 fa78 	bl	80073f8 <RCCEx_PLL3_Config>
 8005f08:	4603      	mov	r3, r0
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d001      	beq.n	8005f12 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
        {
          status = HAL_ERROR;
 8005f0e:	2301      	movs	r3, #1
 8005f10:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005f12:	4b4f      	ldr	r3, [pc, #316]	; (8006050 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8005f14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f16:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f20:	494b      	ldr	r1, [pc, #300]	; (8006050 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8005f22:	4313      	orrs	r3, r2
 8005f24:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f003 0310 	and.w	r3, r3, #16
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d01a      	beq.n	8005f68 <HAL_RCCEx_PeriphCLKConfig+0xb60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005f38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f3c:	d10a      	bne.n	8005f54 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	3324      	adds	r3, #36	; 0x24
 8005f42:	2102      	movs	r1, #2
 8005f44:	4618      	mov	r0, r3
 8005f46:	f001 fa57 	bl	80073f8 <RCCEx_PLL3_Config>
 8005f4a:	4603      	mov	r3, r0
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d001      	beq.n	8005f54 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
      {
        status = HAL_ERROR;
 8005f50:	2301      	movs	r3, #1
 8005f52:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005f54:	4b3e      	ldr	r3, [pc, #248]	; (8006050 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8005f56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f58:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005f62:	493b      	ldr	r1, [pc, #236]	; (8006050 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8005f64:	4313      	orrs	r3, r2
 8005f66:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d034      	beq.n	8005fde <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005f7a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005f7e:	d01d      	beq.n	8005fbc <HAL_RCCEx_PeriphCLKConfig+0xbb4>
 8005f80:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005f84:	d817      	bhi.n	8005fb6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d003      	beq.n	8005f92 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
 8005f8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f8e:	d009      	beq.n	8005fa4 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8005f90:	e011      	b.n	8005fb6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	3304      	adds	r3, #4
 8005f96:	2100      	movs	r1, #0
 8005f98:	4618      	mov	r0, r3
 8005f9a:	f001 f97b 	bl	8007294 <RCCEx_PLL2_Config>
 8005f9e:	4603      	mov	r3, r0
 8005fa0:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005fa2:	e00c      	b.n	8005fbe <HAL_RCCEx_PeriphCLKConfig+0xbb6>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	3324      	adds	r3, #36	; 0x24
 8005fa8:	2102      	movs	r1, #2
 8005faa:	4618      	mov	r0, r3
 8005fac:	f001 fa24 	bl	80073f8 <RCCEx_PLL3_Config>
 8005fb0:	4603      	mov	r3, r0
 8005fb2:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005fb4:	e003      	b.n	8005fbe <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005fb6:	2301      	movs	r3, #1
 8005fb8:	75fb      	strb	r3, [r7, #23]
      break;
 8005fba:	e000      	b.n	8005fbe <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      break;
 8005fbc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005fbe:	7dfb      	ldrb	r3, [r7, #23]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d10a      	bne.n	8005fda <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005fc4:	4b22      	ldr	r3, [pc, #136]	; (8006050 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8005fc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fc8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005fd2:	491f      	ldr	r1, [pc, #124]	; (8006050 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8005fd4:	4313      	orrs	r3, r2
 8005fd6:	658b      	str	r3, [r1, #88]	; 0x58
 8005fd8:	e001      	b.n	8005fde <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fda:	7dfb      	ldrb	r3, [r7, #23]
 8005fdc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d036      	beq.n	8006058 <HAL_RCCEx_PeriphCLKConfig+0xc50>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ff0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005ff4:	d01c      	beq.n	8006030 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8005ff6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005ffa:	d816      	bhi.n	800602a <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8005ffc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006000:	d003      	beq.n	800600a <HAL_RCCEx_PeriphCLKConfig+0xc02>
 8006002:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006006:	d007      	beq.n	8006018 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8006008:	e00f      	b.n	800602a <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800600a:	4b11      	ldr	r3, [pc, #68]	; (8006050 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 800600c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800600e:	4a10      	ldr	r2, [pc, #64]	; (8006050 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8006010:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006014:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8006016:	e00c      	b.n	8006032 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	3324      	adds	r3, #36	; 0x24
 800601c:	2101      	movs	r1, #1
 800601e:	4618      	mov	r0, r3
 8006020:	f001 f9ea 	bl	80073f8 <RCCEx_PLL3_Config>
 8006024:	4603      	mov	r3, r0
 8006026:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8006028:	e003      	b.n	8006032 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800602a:	2301      	movs	r3, #1
 800602c:	75fb      	strb	r3, [r7, #23]
      break;
 800602e:	e000      	b.n	8006032 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8006030:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006032:	7dfb      	ldrb	r3, [r7, #23]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d10d      	bne.n	8006054 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006038:	4b05      	ldr	r3, [pc, #20]	; (8006050 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 800603a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800603c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006046:	4902      	ldr	r1, [pc, #8]	; (8006050 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8006048:	4313      	orrs	r3, r2
 800604a:	654b      	str	r3, [r1, #84]	; 0x54
 800604c:	e004      	b.n	8006058 <HAL_RCCEx_PeriphCLKConfig+0xc50>
 800604e:	bf00      	nop
 8006050:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006054:	7dfb      	ldrb	r3, [r7, #23]
 8006056:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006060:	2b00      	cmp	r3, #0
 8006062:	d029      	beq.n	80060b8 <HAL_RCCEx_PeriphCLKConfig+0xcb0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006068:	2b00      	cmp	r3, #0
 800606a:	d003      	beq.n	8006074 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800606c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006070:	d007      	beq.n	8006082 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
 8006072:	e00f      	b.n	8006094 <HAL_RCCEx_PeriphCLKConfig+0xc8c>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006074:	4b69      	ldr	r3, [pc, #420]	; (800621c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8006076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006078:	4a68      	ldr	r2, [pc, #416]	; (800621c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800607a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800607e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006080:	e00b      	b.n	800609a <HAL_RCCEx_PeriphCLKConfig+0xc92>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	3304      	adds	r3, #4
 8006086:	2102      	movs	r1, #2
 8006088:	4618      	mov	r0, r3
 800608a:	f001 f903 	bl	8007294 <RCCEx_PLL2_Config>
 800608e:	4603      	mov	r3, r0
 8006090:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006092:	e002      	b.n	800609a <HAL_RCCEx_PeriphCLKConfig+0xc92>

    default:
      ret = HAL_ERROR;
 8006094:	2301      	movs	r3, #1
 8006096:	75fb      	strb	r3, [r7, #23]
      break;
 8006098:	bf00      	nop
    }

    if(ret == HAL_OK)
 800609a:	7dfb      	ldrb	r3, [r7, #23]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d109      	bne.n	80060b4 <HAL_RCCEx_PeriphCLKConfig+0xcac>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80060a0:	4b5e      	ldr	r3, [pc, #376]	; (800621c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80060a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80060a4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80060ac:	495b      	ldr	r1, [pc, #364]	; (800621c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80060ae:	4313      	orrs	r3, r2
 80060b0:	64cb      	str	r3, [r1, #76]	; 0x4c
 80060b2:	e001      	b.n	80060b8 <HAL_RCCEx_PeriphCLKConfig+0xcb0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060b4:	7dfb      	ldrb	r3, [r7, #23]
 80060b6:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d00a      	beq.n	80060da <HAL_RCCEx_PeriphCLKConfig+0xcd2>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	3324      	adds	r3, #36	; 0x24
 80060c8:	2102      	movs	r1, #2
 80060ca:	4618      	mov	r0, r3
 80060cc:	f001 f994 	bl	80073f8 <RCCEx_PLL3_Config>
 80060d0:	4603      	mov	r3, r0
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d001      	beq.n	80060da <HAL_RCCEx_PeriphCLKConfig+0xcd2>
    {
      status=HAL_ERROR;
 80060d6:	2301      	movs	r3, #1
 80060d8:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d032      	beq.n	800614c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {

    switch(PeriphClkInit->RngClockSelection)
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80060ec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80060f0:	d017      	beq.n	8006122 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
 80060f2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80060f6:	d811      	bhi.n	800611c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80060f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80060fc:	d013      	beq.n	8006126 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
 80060fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006102:	d80b      	bhi.n	800611c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8006104:	2b00      	cmp	r3, #0
 8006106:	d010      	beq.n	800612a <HAL_RCCEx_PeriphCLKConfig+0xd22>
 8006108:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800610c:	d106      	bne.n	800611c <HAL_RCCEx_PeriphCLKConfig+0xd14>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800610e:	4b43      	ldr	r3, [pc, #268]	; (800621c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8006110:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006112:	4a42      	ldr	r2, [pc, #264]	; (800621c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8006114:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006118:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800611a:	e007      	b.n	800612c <HAL_RCCEx_PeriphCLKConfig+0xd24>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800611c:	2301      	movs	r3, #1
 800611e:	75fb      	strb	r3, [r7, #23]
      break;
 8006120:	e004      	b.n	800612c <HAL_RCCEx_PeriphCLKConfig+0xd24>
      break;
 8006122:	bf00      	nop
 8006124:	e002      	b.n	800612c <HAL_RCCEx_PeriphCLKConfig+0xd24>
      break;
 8006126:	bf00      	nop
 8006128:	e000      	b.n	800612c <HAL_RCCEx_PeriphCLKConfig+0xd24>
      break;
 800612a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800612c:	7dfb      	ldrb	r3, [r7, #23]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d10a      	bne.n	8006148 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006132:	4b3a      	ldr	r3, [pc, #232]	; (800621c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8006134:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006136:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006140:	4936      	ldr	r1, [pc, #216]	; (800621c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8006142:	4313      	orrs	r3, r2
 8006144:	654b      	str	r3, [r1, #84]	; 0x54
 8006146:	e001      	b.n	800614c <HAL_RCCEx_PeriphCLKConfig+0xd44>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006148:	7dfb      	ldrb	r3, [r7, #23]
 800614a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006154:	2b00      	cmp	r3, #0
 8006156:	d008      	beq.n	800616a <HAL_RCCEx_PeriphCLKConfig+0xd62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006158:	4b30      	ldr	r3, [pc, #192]	; (800621c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800615a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800615c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006164:	492d      	ldr	r1, [pc, #180]	; (800621c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8006166:	4313      	orrs	r3, r2
 8006168:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006172:	2b00      	cmp	r3, #0
 8006174:	d008      	beq.n	8006188 <HAL_RCCEx_PeriphCLKConfig+0xd80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006176:	4b29      	ldr	r3, [pc, #164]	; (800621c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8006178:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800617a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006182:	4926      	ldr	r1, [pc, #152]	; (800621c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8006184:	4313      	orrs	r3, r2
 8006186:	650b      	str	r3, [r1, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006190:	2b00      	cmp	r3, #0
 8006192:	d008      	beq.n	80061a6 <HAL_RCCEx_PeriphCLKConfig+0xd9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8006194:	4b21      	ldr	r3, [pc, #132]	; (800621c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8006196:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006198:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061a0:	491e      	ldr	r1, [pc, #120]	; (800621c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80061a2:	4313      	orrs	r3, r2
 80061a4:	658b      	str	r3, [r1, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d00d      	beq.n	80061ce <HAL_RCCEx_PeriphCLKConfig+0xdc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80061b2:	4b1a      	ldr	r3, [pc, #104]	; (800621c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80061b4:	691b      	ldr	r3, [r3, #16]
 80061b6:	4a19      	ldr	r2, [pc, #100]	; (800621c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80061b8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80061bc:	6113      	str	r3, [r2, #16]
 80061be:	4b17      	ldr	r3, [pc, #92]	; (800621c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80061c0:	691a      	ldr	r2, [r3, #16]
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80061c8:	4914      	ldr	r1, [pc, #80]	; (800621c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80061ca:	4313      	orrs	r3, r2
 80061cc:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	da08      	bge.n	80061e8 <HAL_RCCEx_PeriphCLKConfig+0xde0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80061d6:	4b11      	ldr	r3, [pc, #68]	; (800621c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80061d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061da:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061e2:	490e      	ldr	r1, [pc, #56]	; (800621c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80061e4:	4313      	orrs	r3, r2
 80061e6:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d009      	beq.n	8006208 <HAL_RCCEx_PeriphCLKConfig+0xe00>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80061f4:	4b09      	ldr	r3, [pc, #36]	; (800621c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80061f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061f8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006202:	4906      	ldr	r1, [pc, #24]	; (800621c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8006204:	4313      	orrs	r3, r2
 8006206:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8006208:	7dbb      	ldrb	r3, [r7, #22]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d101      	bne.n	8006212 <HAL_RCCEx_PeriphCLKConfig+0xe0a>
  {
    return HAL_OK;
 800620e:	2300      	movs	r3, #0
 8006210:	e000      	b.n	8006214 <HAL_RCCEx_PeriphCLKConfig+0xe0c>
  }
  return HAL_ERROR;
 8006212:	2301      	movs	r3, #1
}
 8006214:	4618      	mov	r0, r3
 8006216:	3718      	adds	r7, #24
 8006218:	46bd      	mov	sp, r7
 800621a:	bd80      	pop	{r7, pc}
 800621c:	58024400 	.word	0x58024400

08006220 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006220:	b580      	push	{r7, lr}
 8006222:	b090      	sub	sp, #64	; 0x40
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800622e:	f040 8089 	bne.w	8006344 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8006232:	4ba8      	ldr	r3, [pc, #672]	; (80064d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006234:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006236:	f003 0307 	and.w	r3, r3, #7
 800623a:	633b      	str	r3, [r7, #48]	; 0x30
 800623c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800623e:	2b04      	cmp	r3, #4
 8006240:	d87d      	bhi.n	800633e <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
 8006242:	a201      	add	r2, pc, #4	; (adr r2, 8006248 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 8006244:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006248:	0800625d 	.word	0x0800625d
 800624c:	08006281 	.word	0x08006281
 8006250:	080062a5 	.word	0x080062a5
 8006254:	08006339 	.word	0x08006339
 8006258:	080062c9 	.word	0x080062c9

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800625c:	4b9d      	ldr	r3, [pc, #628]	; (80064d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006264:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006268:	d107      	bne.n	800627a <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800626a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800626e:	4618      	mov	r0, r3
 8006270:	f000 febe 	bl	8006ff0 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8006274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006276:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006278:	e3f5      	b.n	8006a66 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 800627a:	2300      	movs	r3, #0
 800627c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800627e:	e3f2      	b.n	8006a66 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006280:	4b94      	ldr	r3, [pc, #592]	; (80064d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006288:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800628c:	d107      	bne.n	800629e <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800628e:	f107 0318 	add.w	r3, r7, #24
 8006292:	4618      	mov	r0, r3
 8006294:	f000 fc04 	bl	8006aa0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006298:	69bb      	ldr	r3, [r7, #24]
 800629a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800629c:	e3e3      	b.n	8006a66 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 800629e:	2300      	movs	r3, #0
 80062a0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80062a2:	e3e0      	b.n	8006a66 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80062a4:	4b8b      	ldr	r3, [pc, #556]	; (80064d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80062ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80062b0:	d107      	bne.n	80062c2 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80062b2:	f107 030c 	add.w	r3, r7, #12
 80062b6:	4618      	mov	r0, r3
 80062b8:	f000 fd46 	bl	8006d48 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80062c0:	e3d1      	b.n	8006a66 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 80062c2:	2300      	movs	r3, #0
 80062c4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80062c6:	e3ce      	b.n	8006a66 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80062c8:	4b82      	ldr	r3, [pc, #520]	; (80064d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80062ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80062cc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80062d0:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80062d2:	4b80      	ldr	r3, [pc, #512]	; (80064d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f003 0304 	and.w	r3, r3, #4
 80062da:	2b04      	cmp	r3, #4
 80062dc:	d10c      	bne.n	80062f8 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 80062de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d109      	bne.n	80062f8 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80062e4:	4b7b      	ldr	r3, [pc, #492]	; (80064d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	08db      	lsrs	r3, r3, #3
 80062ea:	f003 0303 	and.w	r3, r3, #3
 80062ee:	4a7a      	ldr	r2, [pc, #488]	; (80064d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80062f0:	fa22 f303 	lsr.w	r3, r2, r3
 80062f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80062f6:	e01e      	b.n	8006336 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80062f8:	4b76      	ldr	r3, [pc, #472]	; (80064d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006300:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006304:	d106      	bne.n	8006314 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8006306:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006308:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800630c:	d102      	bne.n	8006314 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800630e:	4b73      	ldr	r3, [pc, #460]	; (80064dc <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8006310:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006312:	e010      	b.n	8006336 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006314:	4b6f      	ldr	r3, [pc, #444]	; (80064d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800631c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006320:	d106      	bne.n	8006330 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8006322:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006324:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006328:	d102      	bne.n	8006330 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800632a:	4b6d      	ldr	r3, [pc, #436]	; (80064e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800632c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800632e:	e002      	b.n	8006336 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8006330:	2300      	movs	r3, #0
 8006332:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8006334:	e397      	b.n	8006a66 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
 8006336:	e396      	b.n	8006a66 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006338:	4b6a      	ldr	r3, [pc, #424]	; (80064e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800633a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800633c:	e393      	b.n	8006a66 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      default :
        {
          frequency = 0;
 800633e:	2300      	movs	r3, #0
 8006340:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006342:	e390      	b.n	8006a66 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
    }
#endif /* SAI3 */

#if  defined(RCC_CDCCIP1R_SAI2ASEL)

    else if (PeriphClk == RCC_PERIPHCLK_SAI2A)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800634a:	f040 8095 	bne.w	8006478 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
    {
      saiclocksource= __HAL_RCC_GET_SAI2A_SOURCE();
 800634e:	4b61      	ldr	r3, [pc, #388]	; (80064d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006350:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006352:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8006356:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8006358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800635a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800635e:	d04d      	beq.n	80063fc <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>
 8006360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006362:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006366:	f200 8084 	bhi.w	8006472 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 800636a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800636c:	2bc0      	cmp	r3, #192	; 0xc0
 800636e:	d07d      	beq.n	800646c <HAL_RCCEx_GetPeriphCLKFreq+0x24c>
 8006370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006372:	2bc0      	cmp	r3, #192	; 0xc0
 8006374:	d87d      	bhi.n	8006472 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 8006376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006378:	2b80      	cmp	r3, #128	; 0x80
 800637a:	d02d      	beq.n	80063d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>
 800637c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800637e:	2b80      	cmp	r3, #128	; 0x80
 8006380:	d877      	bhi.n	8006472 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 8006382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006384:	2b00      	cmp	r3, #0
 8006386:	d003      	beq.n	8006390 <HAL_RCCEx_GetPeriphCLKFreq+0x170>
 8006388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800638a:	2b40      	cmp	r3, #64	; 0x40
 800638c:	d012      	beq.n	80063b4 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 800638e:	e070      	b.n	8006472 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
      {
      case RCC_SAI2ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI2A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006390:	4b50      	ldr	r3, [pc, #320]	; (80064d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006398:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800639c:	d107      	bne.n	80063ae <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800639e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80063a2:	4618      	mov	r0, r3
 80063a4:	f000 fe24 	bl	8006ff0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80063a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063aa:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80063ac:	e35b      	b.n	8006a66 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 80063ae:	2300      	movs	r3, #0
 80063b0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80063b2:	e358      	b.n	8006a66 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SAI2ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80063b4:	4b47      	ldr	r3, [pc, #284]	; (80064d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80063bc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80063c0:	d107      	bne.n	80063d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1b2>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80063c2:	f107 0318 	add.w	r3, r7, #24
 80063c6:	4618      	mov	r0, r3
 80063c8:	f000 fb6a 	bl	8006aa0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80063cc:	69bb      	ldr	r3, [r7, #24]
 80063ce:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80063d0:	e349      	b.n	8006a66 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 80063d2:	2300      	movs	r3, #0
 80063d4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80063d6:	e346      	b.n	8006a66 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case RCC_SAI2ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2A  */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80063d8:	4b3e      	ldr	r3, [pc, #248]	; (80064d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80063e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80063e4:	d107      	bne.n	80063f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1d6>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80063e6:	f107 030c 	add.w	r3, r7, #12
 80063ea:	4618      	mov	r0, r3
 80063ec:	f000 fcac 	bl	8006d48 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80063f4:	e337      	b.n	8006a66 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 80063f6:	2300      	movs	r3, #0
 80063f8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80063fa:	e334      	b.n	8006a66 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case RCC_SAI2ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI2A  */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80063fc:	4b35      	ldr	r3, [pc, #212]	; (80064d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80063fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006400:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006404:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006406:	4b33      	ldr	r3, [pc, #204]	; (80064d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f003 0304 	and.w	r3, r3, #4
 800640e:	2b04      	cmp	r3, #4
 8006410:	d10c      	bne.n	800642c <HAL_RCCEx_GetPeriphCLKFreq+0x20c>
 8006412:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006414:	2b00      	cmp	r3, #0
 8006416:	d109      	bne.n	800642c <HAL_RCCEx_GetPeriphCLKFreq+0x20c>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006418:	4b2e      	ldr	r3, [pc, #184]	; (80064d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	08db      	lsrs	r3, r3, #3
 800641e:	f003 0303 	and.w	r3, r3, #3
 8006422:	4a2d      	ldr	r2, [pc, #180]	; (80064d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8006424:	fa22 f303 	lsr.w	r3, r2, r3
 8006428:	63fb      	str	r3, [r7, #60]	; 0x3c
 800642a:	e01e      	b.n	800646a <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800642c:	4b29      	ldr	r3, [pc, #164]	; (80064d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006434:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006438:	d106      	bne.n	8006448 <HAL_RCCEx_GetPeriphCLKFreq+0x228>
 800643a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800643c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006440:	d102      	bne.n	8006448 <HAL_RCCEx_GetPeriphCLKFreq+0x228>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8006442:	4b26      	ldr	r3, [pc, #152]	; (80064dc <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8006444:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006446:	e010      	b.n	800646a <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006448:	4b22      	ldr	r3, [pc, #136]	; (80064d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006450:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006454:	d106      	bne.n	8006464 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8006456:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006458:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800645c:	d102      	bne.n	8006464 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800645e:	4b20      	ldr	r3, [pc, #128]	; (80064e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8006460:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006462:	e002      	b.n	800646a <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8006464:	2300      	movs	r3, #0
 8006466:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8006468:	e2fd      	b.n	8006a66 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
 800646a:	e2fc      	b.n	8006a66 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case (RCC_SAI2ACLKSOURCE_PIN): /* External clock is the clock source for SAI2A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800646c:	4b1d      	ldr	r3, [pc, #116]	; (80064e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800646e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006470:	e2f9      	b.n	8006a66 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      default :
        {
          frequency = 0;
 8006472:	2300      	movs	r3, #0
 8006474:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006476:	e2f6      	b.n	8006a66 <HAL_RCCEx_GetPeriphCLKFreq+0x846>

    }
#endif

#if  defined(RCC_CDCCIP1R_SAI2BSEL_0)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2B)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800647e:	f040 80a7 	bne.w	80065d0 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
    {

      saiclocksource= __HAL_RCC_GET_SAI2B_SOURCE();
 8006482:	4b14      	ldr	r3, [pc, #80]	; (80064d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006484:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006486:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 800648a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800648c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800648e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006492:	d05f      	beq.n	8006554 <HAL_RCCEx_GetPeriphCLKFreq+0x334>
 8006494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006496:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800649a:	f200 8096 	bhi.w	80065ca <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 800649e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064a0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80064a4:	f000 808e 	beq.w	80065c4 <HAL_RCCEx_GetPeriphCLKFreq+0x3a4>
 80064a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064aa:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80064ae:	f200 808c 	bhi.w	80065ca <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 80064b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80064b8:	d03a      	beq.n	8006530 <HAL_RCCEx_GetPeriphCLKFreq+0x310>
 80064ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80064c0:	f200 8083 	bhi.w	80065ca <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 80064c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d00e      	beq.n	80064e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>
 80064ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80064d0:	d01c      	beq.n	800650c <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>
 80064d2:	e07a      	b.n	80065ca <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 80064d4:	58024400 	.word	0x58024400
 80064d8:	03d09000 	.word	0x03d09000
 80064dc:	003d0900 	.word	0x003d0900
 80064e0:	016e3600 	.word	0x016e3600
 80064e4:	00bb8000 	.word	0x00bb8000
      {
      case RCC_SAI2BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI2B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80064e8:	4ba8      	ldr	r3, [pc, #672]	; (800678c <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064f0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80064f4:	d107      	bne.n	8006506 <HAL_RCCEx_GetPeriphCLKFreq+0x2e6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80064f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80064fa:	4618      	mov	r0, r3
 80064fc:	f000 fd78 	bl	8006ff0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006502:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006504:	e2af      	b.n	8006a66 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8006506:	2300      	movs	r3, #0
 8006508:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800650a:	e2ac      	b.n	8006a66 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SAI2BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800650c:	4b9f      	ldr	r3, [pc, #636]	; (800678c <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006514:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006518:	d107      	bne.n	800652a <HAL_RCCEx_GetPeriphCLKFreq+0x30a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800651a:	f107 0318 	add.w	r3, r7, #24
 800651e:	4618      	mov	r0, r3
 8006520:	f000 fabe 	bl	8006aa0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006524:	69bb      	ldr	r3, [r7, #24]
 8006526:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006528:	e29d      	b.n	8006a66 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 800652a:	2300      	movs	r3, #0
 800652c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800652e:	e29a      	b.n	8006a66 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case RCC_SAI2BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006530:	4b96      	ldr	r3, [pc, #600]	; (800678c <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006538:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800653c:	d107      	bne.n	800654e <HAL_RCCEx_GetPeriphCLKFreq+0x32e>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800653e:	f107 030c 	add.w	r3, r7, #12
 8006542:	4618      	mov	r0, r3
 8006544:	f000 fc00 	bl	8006d48 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800654c:	e28b      	b.n	8006a66 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 800654e:	2300      	movs	r3, #0
 8006550:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006552:	e288      	b.n	8006a66 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case RCC_SAI2BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI2B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006554:	4b8d      	ldr	r3, [pc, #564]	; (800678c <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8006556:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006558:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800655c:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800655e:	4b8b      	ldr	r3, [pc, #556]	; (800678c <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f003 0304 	and.w	r3, r3, #4
 8006566:	2b04      	cmp	r3, #4
 8006568:	d10c      	bne.n	8006584 <HAL_RCCEx_GetPeriphCLKFreq+0x364>
 800656a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800656c:	2b00      	cmp	r3, #0
 800656e:	d109      	bne.n	8006584 <HAL_RCCEx_GetPeriphCLKFreq+0x364>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006570:	4b86      	ldr	r3, [pc, #536]	; (800678c <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	08db      	lsrs	r3, r3, #3
 8006576:	f003 0303 	and.w	r3, r3, #3
 800657a:	4a85      	ldr	r2, [pc, #532]	; (8006790 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800657c:	fa22 f303 	lsr.w	r3, r2, r3
 8006580:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006582:	e01e      	b.n	80065c2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006584:	4b81      	ldr	r3, [pc, #516]	; (800678c <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800658c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006590:	d106      	bne.n	80065a0 <HAL_RCCEx_GetPeriphCLKFreq+0x380>
 8006592:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006594:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006598:	d102      	bne.n	80065a0 <HAL_RCCEx_GetPeriphCLKFreq+0x380>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800659a:	4b7e      	ldr	r3, [pc, #504]	; (8006794 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 800659c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800659e:	e010      	b.n	80065c2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80065a0:	4b7a      	ldr	r3, [pc, #488]	; (800678c <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065a8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80065ac:	d106      	bne.n	80065bc <HAL_RCCEx_GetPeriphCLKFreq+0x39c>
 80065ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80065b4:	d102      	bne.n	80065bc <HAL_RCCEx_GetPeriphCLKFreq+0x39c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80065b6:	4b78      	ldr	r3, [pc, #480]	; (8006798 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 80065b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80065ba:	e002      	b.n	80065c2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80065bc:	2300      	movs	r3, #0
 80065be:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
          break;
 80065c0:	e251      	b.n	8006a66 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
 80065c2:	e250      	b.n	8006a66 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case (RCC_SAI2BCLKSOURCE_PIN): /* External clock is the clock source for SAI2B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80065c4:	4b75      	ldr	r3, [pc, #468]	; (800679c <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 80065c6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80065c8:	e24d      	b.n	8006a66 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      default :
        {
          frequency = 0;
 80065ca:	2300      	movs	r3, #0
 80065cc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80065ce:	e24a      	b.n	8006a66 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          break;
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065d6:	f040 809c 	bne.w	8006712 <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 80065da:	4b6c      	ldr	r3, [pc, #432]	; (800678c <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 80065dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065de:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80065e2:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80065e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065e6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80065ea:	d054      	beq.n	8006696 <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 80065ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065ee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80065f2:	f200 808b 	bhi.w	800670c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 80065f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065f8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80065fc:	f000 8083 	beq.w	8006706 <HAL_RCCEx_GetPeriphCLKFreq+0x4e6>
 8006600:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006602:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006606:	f200 8081 	bhi.w	800670c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 800660a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800660c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006610:	d02f      	beq.n	8006672 <HAL_RCCEx_GetPeriphCLKFreq+0x452>
 8006612:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006614:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006618:	d878      	bhi.n	800670c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 800661a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800661c:	2b00      	cmp	r3, #0
 800661e:	d004      	beq.n	800662a <HAL_RCCEx_GetPeriphCLKFreq+0x40a>
 8006620:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006622:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006626:	d012      	beq.n	800664e <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
 8006628:	e070      	b.n	800670c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800662a:	4b58      	ldr	r3, [pc, #352]	; (800678c <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006632:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006636:	d107      	bne.n	8006648 <HAL_RCCEx_GetPeriphCLKFreq+0x428>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006638:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800663c:	4618      	mov	r0, r3
 800663e:	f000 fcd7 	bl	8006ff0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006644:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006646:	e20e      	b.n	8006a66 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8006648:	2300      	movs	r3, #0
 800664a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800664c:	e20b      	b.n	8006a66 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800664e:	4b4f      	ldr	r3, [pc, #316]	; (800678c <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006656:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800665a:	d107      	bne.n	800666c <HAL_RCCEx_GetPeriphCLKFreq+0x44c>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800665c:	f107 0318 	add.w	r3, r7, #24
 8006660:	4618      	mov	r0, r3
 8006662:	f000 fa1d 	bl	8006aa0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006666:	69bb      	ldr	r3, [r7, #24]
 8006668:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800666a:	e1fc      	b.n	8006a66 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 800666c:	2300      	movs	r3, #0
 800666e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006670:	e1f9      	b.n	8006a66 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006672:	4b46      	ldr	r3, [pc, #280]	; (800678c <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800667a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800667e:	d107      	bne.n	8006690 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006680:	f107 030c 	add.w	r3, r7, #12
 8006684:	4618      	mov	r0, r3
 8006686:	f000 fb5f 	bl	8006d48 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800668e:	e1ea      	b.n	8006a66 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8006690:	2300      	movs	r3, #0
 8006692:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006694:	e1e7      	b.n	8006a66 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006696:	4b3d      	ldr	r3, [pc, #244]	; (800678c <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8006698:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800669a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800669e:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80066a0:	4b3a      	ldr	r3, [pc, #232]	; (800678c <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f003 0304 	and.w	r3, r3, #4
 80066a8:	2b04      	cmp	r3, #4
 80066aa:	d10c      	bne.n	80066c6 <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
 80066ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d109      	bne.n	80066c6 <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80066b2:	4b36      	ldr	r3, [pc, #216]	; (800678c <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	08db      	lsrs	r3, r3, #3
 80066b8:	f003 0303 	and.w	r3, r3, #3
 80066bc:	4a34      	ldr	r2, [pc, #208]	; (8006790 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80066be:	fa22 f303 	lsr.w	r3, r2, r3
 80066c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80066c4:	e01e      	b.n	8006704 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80066c6:	4b31      	ldr	r3, [pc, #196]	; (800678c <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80066d2:	d106      	bne.n	80066e2 <HAL_RCCEx_GetPeriphCLKFreq+0x4c2>
 80066d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80066da:	d102      	bne.n	80066e2 <HAL_RCCEx_GetPeriphCLKFreq+0x4c2>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80066dc:	4b2d      	ldr	r3, [pc, #180]	; (8006794 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 80066de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80066e0:	e010      	b.n	8006704 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80066e2:	4b2a      	ldr	r3, [pc, #168]	; (800678c <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066ea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80066ee:	d106      	bne.n	80066fe <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 80066f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80066f6:	d102      	bne.n	80066fe <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80066f8:	4b27      	ldr	r3, [pc, #156]	; (8006798 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 80066fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80066fc:	e002      	b.n	8006704 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80066fe:	2300      	movs	r3, #0
 8006700:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8006702:	e1b0      	b.n	8006a66 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
 8006704:	e1af      	b.n	8006a66 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006706:	4b25      	ldr	r3, [pc, #148]	; (800679c <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8006708:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800670a:	e1ac      	b.n	8006a66 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      default :
        {
          frequency = 0;
 800670c:	2300      	movs	r3, #0
 800670e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006710:	e1a9      	b.n	8006a66 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006718:	d17d      	bne.n	8006816 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800671a:	4b1c      	ldr	r3, [pc, #112]	; (800678c <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 800671c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800671e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006722:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8006724:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006726:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800672a:	d039      	beq.n	80067a0 <HAL_RCCEx_GetPeriphCLKFreq+0x580>
 800672c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800672e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006732:	d86d      	bhi.n	8006810 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8006734:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006736:	2b00      	cmp	r3, #0
 8006738:	d004      	beq.n	8006744 <HAL_RCCEx_GetPeriphCLKFreq+0x524>
 800673a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800673c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006740:	d012      	beq.n	8006768 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 8006742:	e065      	b.n	8006810 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006744:	4b11      	ldr	r3, [pc, #68]	; (800678c <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800674c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006750:	d107      	bne.n	8006762 <HAL_RCCEx_GetPeriphCLKFreq+0x542>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006752:	f107 0318 	add.w	r3, r7, #24
 8006756:	4618      	mov	r0, r3
 8006758:	f000 f9a2 	bl	8006aa0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800675c:	69bb      	ldr	r3, [r7, #24]
 800675e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006760:	e181      	b.n	8006a66 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8006762:	2300      	movs	r3, #0
 8006764:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006766:	e17e      	b.n	8006a66 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006768:	4b08      	ldr	r3, [pc, #32]	; (800678c <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006770:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006774:	d107      	bne.n	8006786 <HAL_RCCEx_GetPeriphCLKFreq+0x566>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006776:	f107 030c 	add.w	r3, r7, #12
 800677a:	4618      	mov	r0, r3
 800677c:	f000 fae4 	bl	8006d48 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006780:	697b      	ldr	r3, [r7, #20]
 8006782:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006784:	e16f      	b.n	8006a66 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8006786:	2300      	movs	r3, #0
 8006788:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800678a:	e16c      	b.n	8006a66 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
 800678c:	58024400 	.word	0x58024400
 8006790:	03d09000 	.word	0x03d09000
 8006794:	003d0900 	.word	0x003d0900
 8006798:	016e3600 	.word	0x016e3600
 800679c:	00bb8000 	.word	0x00bb8000
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80067a0:	4ba0      	ldr	r3, [pc, #640]	; (8006a24 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 80067a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067a4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80067a8:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80067aa:	4b9e      	ldr	r3, [pc, #632]	; (8006a24 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f003 0304 	and.w	r3, r3, #4
 80067b2:	2b04      	cmp	r3, #4
 80067b4:	d10c      	bne.n	80067d0 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
 80067b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d109      	bne.n	80067d0 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80067bc:	4b99      	ldr	r3, [pc, #612]	; (8006a24 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	08db      	lsrs	r3, r3, #3
 80067c2:	f003 0303 	and.w	r3, r3, #3
 80067c6:	4a98      	ldr	r2, [pc, #608]	; (8006a28 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80067c8:	fa22 f303 	lsr.w	r3, r2, r3
 80067cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80067ce:	e01e      	b.n	800680e <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80067d0:	4b94      	ldr	r3, [pc, #592]	; (8006a24 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80067dc:	d106      	bne.n	80067ec <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 80067de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067e0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80067e4:	d102      	bne.n	80067ec <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80067e6:	4b91      	ldr	r3, [pc, #580]	; (8006a2c <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 80067e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80067ea:	e010      	b.n	800680e <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80067ec:	4b8d      	ldr	r3, [pc, #564]	; (8006a24 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067f4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80067f8:	d106      	bne.n	8006808 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 80067fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006800:	d102      	bne.n	8006808 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8006802:	4b8b      	ldr	r3, [pc, #556]	; (8006a30 <HAL_RCCEx_GetPeriphCLKFreq+0x810>)
 8006804:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006806:	e002      	b.n	800680e <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8006808:	2300      	movs	r3, #0
 800680a:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800680c:	e12b      	b.n	8006a66 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
 800680e:	e12a      	b.n	8006a66 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      default :
        {
          frequency = 0;
 8006810:	2300      	movs	r3, #0
 8006812:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006814:	e127      	b.n	8006a66 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800681c:	d133      	bne.n	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0x666>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 800681e:	4b81      	ldr	r3, [pc, #516]	; (8006a24 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8006820:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006822:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006826:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8006828:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800682a:	2b00      	cmp	r3, #0
 800682c:	d004      	beq.n	8006838 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
 800682e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006830:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006834:	d012      	beq.n	800685c <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
 8006836:	e023      	b.n	8006880 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006838:	4b7a      	ldr	r3, [pc, #488]	; (8006a24 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006840:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006844:	d107      	bne.n	8006856 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006846:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800684a:	4618      	mov	r0, r3
 800684c:	f000 fbd0 	bl	8006ff0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006852:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006854:	e107      	b.n	8006a66 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 8006856:	2300      	movs	r3, #0
 8006858:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800685a:	e104      	b.n	8006a66 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800685c:	4b71      	ldr	r3, [pc, #452]	; (8006a24 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006864:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006868:	d107      	bne.n	800687a <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800686a:	f107 0318 	add.w	r3, r7, #24
 800686e:	4618      	mov	r0, r3
 8006870:	f000 f916 	bl	8006aa0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8006874:	6a3b      	ldr	r3, [r7, #32]
 8006876:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006878:	e0f5      	b.n	8006a66 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 800687a:	2300      	movs	r3, #0
 800687c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800687e:	e0f2      	b.n	8006a66 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      default :
        {
          frequency = 0;
 8006880:	2300      	movs	r3, #0
 8006882:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006884:	e0ef      	b.n	8006a66 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800688c:	f040 8091 	bne.w	80069b2 <HAL_RCCEx_GetPeriphCLKFreq+0x792>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8006890:	4b64      	ldr	r3, [pc, #400]	; (8006a24 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8006892:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006894:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8006898:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800689a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800689c:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 80068a0:	f000 8081 	beq.w	80069a6 <HAL_RCCEx_GetPeriphCLKFreq+0x786>
 80068a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068a6:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 80068aa:	d87f      	bhi.n	80069ac <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
 80068ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80068b2:	d06b      	beq.n	800698c <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
 80068b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80068ba:	d877      	bhi.n	80069ac <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
 80068bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068c2:	d056      	beq.n	8006972 <HAL_RCCEx_GetPeriphCLKFreq+0x752>
 80068c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068ca:	d86f      	bhi.n	80069ac <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
 80068cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068ce:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80068d2:	d03b      	beq.n	800694c <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 80068d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068d6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80068da:	d867      	bhi.n	80069ac <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
 80068dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80068e2:	d021      	beq.n	8006928 <HAL_RCCEx_GetPeriphCLKFreq+0x708>
 80068e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80068ea:	d85f      	bhi.n	80069ac <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
 80068ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d004      	beq.n	80068fc <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>
 80068f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068f4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80068f8:	d004      	beq.n	8006904 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
 80068fa:	e057      	b.n	80069ac <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80068fc:	f000 f8ba 	bl	8006a74 <HAL_RCCEx_GetD3PCLK1Freq>
 8006900:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8006902:	e0b0      	b.n	8006a66 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006904:	4b47      	ldr	r3, [pc, #284]	; (8006a24 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800690c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006910:	d107      	bne.n	8006922 <HAL_RCCEx_GetPeriphCLKFreq+0x702>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006912:	f107 0318 	add.w	r3, r7, #24
 8006916:	4618      	mov	r0, r3
 8006918:	f000 f8c2 	bl	8006aa0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800691c:	69fb      	ldr	r3, [r7, #28]
 800691e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006920:	e0a1      	b.n	8006a66 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 8006922:	2300      	movs	r3, #0
 8006924:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006926:	e09e      	b.n	8006a66 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006928:	4b3e      	ldr	r3, [pc, #248]	; (8006a24 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006930:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006934:	d107      	bne.n	8006946 <HAL_RCCEx_GetPeriphCLKFreq+0x726>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006936:	f107 030c 	add.w	r3, r7, #12
 800693a:	4618      	mov	r0, r3
 800693c:	f000 fa04 	bl	8006d48 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006940:	693b      	ldr	r3, [r7, #16]
 8006942:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006944:	e08f      	b.n	8006a66 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 8006946:	2300      	movs	r3, #0
 8006948:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800694a:	e08c      	b.n	8006a66 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800694c:	4b35      	ldr	r3, [pc, #212]	; (8006a24 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f003 0304 	and.w	r3, r3, #4
 8006954:	2b04      	cmp	r3, #4
 8006956:	d109      	bne.n	800696c <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006958:	4b32      	ldr	r3, [pc, #200]	; (8006a24 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	08db      	lsrs	r3, r3, #3
 800695e:	f003 0303 	and.w	r3, r3, #3
 8006962:	4a31      	ldr	r2, [pc, #196]	; (8006a28 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8006964:	fa22 f303 	lsr.w	r3, r2, r3
 8006968:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800696a:	e07c      	b.n	8006a66 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 800696c:	2300      	movs	r3, #0
 800696e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006970:	e079      	b.n	8006a66 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8006972:	4b2c      	ldr	r3, [pc, #176]	; (8006a24 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800697a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800697e:	d102      	bne.n	8006986 <HAL_RCCEx_GetPeriphCLKFreq+0x766>
         {
          frequency = CSI_VALUE;
 8006980:	4b2a      	ldr	r3, [pc, #168]	; (8006a2c <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 8006982:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006984:	e06f      	b.n	8006a66 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8006986:	2300      	movs	r3, #0
 8006988:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800698a:	e06c      	b.n	8006a66 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800698c:	4b25      	ldr	r3, [pc, #148]	; (8006a24 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006994:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006998:	d102      	bne.n	80069a0 <HAL_RCCEx_GetPeriphCLKFreq+0x780>
         {
          frequency = HSE_VALUE;
 800699a:	4b25      	ldr	r3, [pc, #148]	; (8006a30 <HAL_RCCEx_GetPeriphCLKFreq+0x810>)
 800699c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800699e:	e062      	b.n	8006a66 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 80069a0:	2300      	movs	r3, #0
 80069a2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80069a4:	e05f      	b.n	8006a66 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
#if defined(RCC_SPI6CLKSOURCE_PIN)
      case RCC_SPI6CLKSOURCE_PIN: /* External clock is the clock source for SPI6 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80069a6:	4b23      	ldr	r3, [pc, #140]	; (8006a34 <HAL_RCCEx_GetPeriphCLKFreq+0x814>)
 80069a8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80069aa:	e05c      	b.n	8006a66 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 80069ac:	2300      	movs	r3, #0
 80069ae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80069b0:	e059      	b.n	8006a66 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80069b8:	d153      	bne.n	8006a62 <HAL_RCCEx_GetPeriphCLKFreq+0x842>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 80069ba:	4b1a      	ldr	r3, [pc, #104]	; (8006a24 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 80069bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069be:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80069c2:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80069c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80069ca:	d035      	beq.n	8006a38 <HAL_RCCEx_GetPeriphCLKFreq+0x818>
 80069cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80069d2:	d843      	bhi.n	8006a5c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>
 80069d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d004      	beq.n	80069e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
 80069da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069dc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80069e0:	d00d      	beq.n	80069fe <HAL_RCCEx_GetPeriphCLKFreq+0x7de>
 80069e2:	e03b      	b.n	8006a5c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80069e4:	4b0f      	ldr	r3, [pc, #60]	; (8006a24 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069ec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80069f0:	d102      	bne.n	80069f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7d8>
         {
          frequency = HSE_VALUE;
 80069f2:	4b0f      	ldr	r3, [pc, #60]	; (8006a30 <HAL_RCCEx_GetPeriphCLKFreq+0x810>)
 80069f4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80069f6:	e036      	b.n	8006a66 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 80069f8:	2300      	movs	r3, #0
 80069fa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80069fc:	e033      	b.n	8006a66 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80069fe:	4b09      	ldr	r3, [pc, #36]	; (8006a24 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a06:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006a0a:	d107      	bne.n	8006a1c <HAL_RCCEx_GetPeriphCLKFreq+0x7fc>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006a0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006a10:	4618      	mov	r0, r3
 8006a12:	f000 faed 	bl	8006ff0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006a16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a18:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006a1a:	e024      	b.n	8006a66 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006a20:	e021      	b.n	8006a66 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
 8006a22:	bf00      	nop
 8006a24:	58024400 	.word	0x58024400
 8006a28:	03d09000 	.word	0x03d09000
 8006a2c:	003d0900 	.word	0x003d0900
 8006a30:	016e3600 	.word	0x016e3600
 8006a34:	00bb8000 	.word	0x00bb8000
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006a38:	4b0d      	ldr	r3, [pc, #52]	; (8006a70 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006a40:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006a44:	d107      	bne.n	8006a56 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006a46:	f107 0318 	add.w	r3, r7, #24
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	f000 f828 	bl	8006aa0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006a50:	69fb      	ldr	r3, [r7, #28]
 8006a52:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006a54:	e007      	b.n	8006a66 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 8006a56:	2300      	movs	r3, #0
 8006a58:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006a5a:	e004      	b.n	8006a66 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      default :
        {
          frequency = 0;
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006a60:	e001      	b.n	8006a66 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      }
    }
  else
    {
      frequency = 0;
 8006a62:	2300      	movs	r3, #0
 8006a64:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8006a66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006a68:	4618      	mov	r0, r3
 8006a6a:	3740      	adds	r7, #64	; 0x40
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	bd80      	pop	{r7, pc}
 8006a70:	58024400 	.word	0x58024400

08006a74 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006a74:	b580      	push	{r7, lr}
 8006a76:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8006a78:	f7fe fc3e 	bl	80052f8 <HAL_RCC_GetHCLKFreq>
 8006a7c:	4602      	mov	r2, r0
 8006a7e:	4b06      	ldr	r3, [pc, #24]	; (8006a98 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006a80:	6a1b      	ldr	r3, [r3, #32]
 8006a82:	091b      	lsrs	r3, r3, #4
 8006a84:	f003 0307 	and.w	r3, r3, #7
 8006a88:	4904      	ldr	r1, [pc, #16]	; (8006a9c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006a8a:	5ccb      	ldrb	r3, [r1, r3]
 8006a8c:	f003 031f 	and.w	r3, r3, #31
 8006a90:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8006a94:	4618      	mov	r0, r3
 8006a96:	bd80      	pop	{r7, pc}
 8006a98:	58024400 	.word	0x58024400
 8006a9c:	0800948c 	.word	0x0800948c

08006aa0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8006aa0:	b480      	push	{r7}
 8006aa2:	b089      	sub	sp, #36	; 0x24
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006aa8:	4ba1      	ldr	r3, [pc, #644]	; (8006d30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006aaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006aac:	f003 0303 	and.w	r3, r3, #3
 8006ab0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8006ab2:	4b9f      	ldr	r3, [pc, #636]	; (8006d30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ab4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ab6:	0b1b      	lsrs	r3, r3, #12
 8006ab8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006abc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006abe:	4b9c      	ldr	r3, [pc, #624]	; (8006d30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ac2:	091b      	lsrs	r3, r3, #4
 8006ac4:	f003 0301 	and.w	r3, r3, #1
 8006ac8:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8006aca:	4b99      	ldr	r3, [pc, #612]	; (8006d30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006acc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ace:	08db      	lsrs	r3, r3, #3
 8006ad0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006ad4:	693a      	ldr	r2, [r7, #16]
 8006ad6:	fb02 f303 	mul.w	r3, r2, r3
 8006ada:	ee07 3a90 	vmov	s15, r3
 8006ade:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ae2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006ae6:	697b      	ldr	r3, [r7, #20]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	f000 8111 	beq.w	8006d10 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006aee:	69bb      	ldr	r3, [r7, #24]
 8006af0:	2b02      	cmp	r3, #2
 8006af2:	f000 8083 	beq.w	8006bfc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006af6:	69bb      	ldr	r3, [r7, #24]
 8006af8:	2b02      	cmp	r3, #2
 8006afa:	f200 80a1 	bhi.w	8006c40 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006afe:	69bb      	ldr	r3, [r7, #24]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d003      	beq.n	8006b0c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006b04:	69bb      	ldr	r3, [r7, #24]
 8006b06:	2b01      	cmp	r3, #1
 8006b08:	d056      	beq.n	8006bb8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006b0a:	e099      	b.n	8006c40 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006b0c:	4b88      	ldr	r3, [pc, #544]	; (8006d30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f003 0320 	and.w	r3, r3, #32
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d02d      	beq.n	8006b74 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006b18:	4b85      	ldr	r3, [pc, #532]	; (8006d30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	08db      	lsrs	r3, r3, #3
 8006b1e:	f003 0303 	and.w	r3, r3, #3
 8006b22:	4a84      	ldr	r2, [pc, #528]	; (8006d34 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006b24:	fa22 f303 	lsr.w	r3, r2, r3
 8006b28:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006b2a:	68bb      	ldr	r3, [r7, #8]
 8006b2c:	ee07 3a90 	vmov	s15, r3
 8006b30:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b34:	697b      	ldr	r3, [r7, #20]
 8006b36:	ee07 3a90 	vmov	s15, r3
 8006b3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b42:	4b7b      	ldr	r3, [pc, #492]	; (8006d30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b4a:	ee07 3a90 	vmov	s15, r3
 8006b4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b52:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b56:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006d38 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006b5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b6e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006b72:	e087      	b.n	8006c84 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006b74:	697b      	ldr	r3, [r7, #20]
 8006b76:	ee07 3a90 	vmov	s15, r3
 8006b7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b7e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006d3c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006b82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b86:	4b6a      	ldr	r3, [pc, #424]	; (8006d30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b8e:	ee07 3a90 	vmov	s15, r3
 8006b92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b96:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b9a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006d38 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006b9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ba2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ba6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006baa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006bae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006bb2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006bb6:	e065      	b.n	8006c84 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006bb8:	697b      	ldr	r3, [r7, #20]
 8006bba:	ee07 3a90 	vmov	s15, r3
 8006bbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bc2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006d40 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006bc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006bca:	4b59      	ldr	r3, [pc, #356]	; (8006d30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006bcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bd2:	ee07 3a90 	vmov	s15, r3
 8006bd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bda:	ed97 6a03 	vldr	s12, [r7, #12]
 8006bde:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006d38 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006be2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006be6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006bea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006bee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006bf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006bf6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006bfa:	e043      	b.n	8006c84 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006bfc:	697b      	ldr	r3, [r7, #20]
 8006bfe:	ee07 3a90 	vmov	s15, r3
 8006c02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c06:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006d44 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006c0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c0e:	4b48      	ldr	r3, [pc, #288]	; (8006d30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c16:	ee07 3a90 	vmov	s15, r3
 8006c1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c1e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006c22:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006d38 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006c26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006c32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c3a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006c3e:	e021      	b.n	8006c84 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006c40:	697b      	ldr	r3, [r7, #20]
 8006c42:	ee07 3a90 	vmov	s15, r3
 8006c46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c4a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006d40 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006c4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c52:	4b37      	ldr	r3, [pc, #220]	; (8006d30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c5a:	ee07 3a90 	vmov	s15, r3
 8006c5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c62:	ed97 6a03 	vldr	s12, [r7, #12]
 8006c66:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006d38 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006c6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006c76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c7e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006c82:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8006c84:	4b2a      	ldr	r3, [pc, #168]	; (8006d30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c88:	0a5b      	lsrs	r3, r3, #9
 8006c8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c8e:	ee07 3a90 	vmov	s15, r3
 8006c92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c96:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006c9a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006c9e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006ca2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006ca6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006caa:	ee17 2a90 	vmov	r2, s15
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8006cb2:	4b1f      	ldr	r3, [pc, #124]	; (8006d30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006cb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cb6:	0c1b      	lsrs	r3, r3, #16
 8006cb8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006cbc:	ee07 3a90 	vmov	s15, r3
 8006cc0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cc4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006cc8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006ccc:	edd7 6a07 	vldr	s13, [r7, #28]
 8006cd0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006cd4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006cd8:	ee17 2a90 	vmov	r2, s15
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8006ce0:	4b13      	ldr	r3, [pc, #76]	; (8006d30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ce2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ce4:	0e1b      	lsrs	r3, r3, #24
 8006ce6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006cea:	ee07 3a90 	vmov	s15, r3
 8006cee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cf2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006cf6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006cfa:	edd7 6a07 	vldr	s13, [r7, #28]
 8006cfe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006d02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006d06:	ee17 2a90 	vmov	r2, s15
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006d0e:	e008      	b.n	8006d22 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2200      	movs	r2, #0
 8006d14:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	2200      	movs	r2, #0
 8006d1a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2200      	movs	r2, #0
 8006d20:	609a      	str	r2, [r3, #8]
}
 8006d22:	bf00      	nop
 8006d24:	3724      	adds	r7, #36	; 0x24
 8006d26:	46bd      	mov	sp, r7
 8006d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2c:	4770      	bx	lr
 8006d2e:	bf00      	nop
 8006d30:	58024400 	.word	0x58024400
 8006d34:	03d09000 	.word	0x03d09000
 8006d38:	46000000 	.word	0x46000000
 8006d3c:	4c742400 	.word	0x4c742400
 8006d40:	4a742400 	.word	0x4a742400
 8006d44:	4bb71b00 	.word	0x4bb71b00

08006d48 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8006d48:	b480      	push	{r7}
 8006d4a:	b089      	sub	sp, #36	; 0x24
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006d50:	4ba1      	ldr	r3, [pc, #644]	; (8006fd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d54:	f003 0303 	and.w	r3, r3, #3
 8006d58:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8006d5a:	4b9f      	ldr	r3, [pc, #636]	; (8006fd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d5e:	0d1b      	lsrs	r3, r3, #20
 8006d60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006d64:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006d66:	4b9c      	ldr	r3, [pc, #624]	; (8006fd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d6a:	0a1b      	lsrs	r3, r3, #8
 8006d6c:	f003 0301 	and.w	r3, r3, #1
 8006d70:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8006d72:	4b99      	ldr	r3, [pc, #612]	; (8006fd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d76:	08db      	lsrs	r3, r3, #3
 8006d78:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006d7c:	693a      	ldr	r2, [r7, #16]
 8006d7e:	fb02 f303 	mul.w	r3, r2, r3
 8006d82:	ee07 3a90 	vmov	s15, r3
 8006d86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d8a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006d8e:	697b      	ldr	r3, [r7, #20]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	f000 8111 	beq.w	8006fb8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006d96:	69bb      	ldr	r3, [r7, #24]
 8006d98:	2b02      	cmp	r3, #2
 8006d9a:	f000 8083 	beq.w	8006ea4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006d9e:	69bb      	ldr	r3, [r7, #24]
 8006da0:	2b02      	cmp	r3, #2
 8006da2:	f200 80a1 	bhi.w	8006ee8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8006da6:	69bb      	ldr	r3, [r7, #24]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d003      	beq.n	8006db4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006dac:	69bb      	ldr	r3, [r7, #24]
 8006dae:	2b01      	cmp	r3, #1
 8006db0:	d056      	beq.n	8006e60 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006db2:	e099      	b.n	8006ee8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006db4:	4b88      	ldr	r3, [pc, #544]	; (8006fd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f003 0320 	and.w	r3, r3, #32
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d02d      	beq.n	8006e1c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006dc0:	4b85      	ldr	r3, [pc, #532]	; (8006fd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	08db      	lsrs	r3, r3, #3
 8006dc6:	f003 0303 	and.w	r3, r3, #3
 8006dca:	4a84      	ldr	r2, [pc, #528]	; (8006fdc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006dcc:	fa22 f303 	lsr.w	r3, r2, r3
 8006dd0:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006dd2:	68bb      	ldr	r3, [r7, #8]
 8006dd4:	ee07 3a90 	vmov	s15, r3
 8006dd8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ddc:	697b      	ldr	r3, [r7, #20]
 8006dde:	ee07 3a90 	vmov	s15, r3
 8006de2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006de6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006dea:	4b7b      	ldr	r3, [pc, #492]	; (8006fd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006df2:	ee07 3a90 	vmov	s15, r3
 8006df6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006dfa:	ed97 6a03 	vldr	s12, [r7, #12]
 8006dfe:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006fe0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006e02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006e0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e16:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006e1a:	e087      	b.n	8006f2c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006e1c:	697b      	ldr	r3, [r7, #20]
 8006e1e:	ee07 3a90 	vmov	s15, r3
 8006e22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e26:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006fe4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006e2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e2e:	4b6a      	ldr	r3, [pc, #424]	; (8006fd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e36:	ee07 3a90 	vmov	s15, r3
 8006e3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e3e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e42:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006fe0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006e46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006e52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e5a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006e5e:	e065      	b.n	8006f2c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006e60:	697b      	ldr	r3, [r7, #20]
 8006e62:	ee07 3a90 	vmov	s15, r3
 8006e66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e6a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006fe8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006e6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e72:	4b59      	ldr	r3, [pc, #356]	; (8006fd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e7a:	ee07 3a90 	vmov	s15, r3
 8006e7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e82:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e86:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006fe0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006e8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006e96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e9e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006ea2:	e043      	b.n	8006f2c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006ea4:	697b      	ldr	r3, [r7, #20]
 8006ea6:	ee07 3a90 	vmov	s15, r3
 8006eaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006eae:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006fec <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006eb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006eb6:	4b48      	ldr	r3, [pc, #288]	; (8006fd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ebe:	ee07 3a90 	vmov	s15, r3
 8006ec2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ec6:	ed97 6a03 	vldr	s12, [r7, #12]
 8006eca:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006fe0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006ece:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ed2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ed6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006eda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ede:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ee2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006ee6:	e021      	b.n	8006f2c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006ee8:	697b      	ldr	r3, [r7, #20]
 8006eea:	ee07 3a90 	vmov	s15, r3
 8006eee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ef2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006fe8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006ef6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006efa:	4b37      	ldr	r3, [pc, #220]	; (8006fd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006efe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f02:	ee07 3a90 	vmov	s15, r3
 8006f06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f0a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f0e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006fe0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006f12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006f1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f26:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006f2a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8006f2c:	4b2a      	ldr	r3, [pc, #168]	; (8006fd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f30:	0a5b      	lsrs	r3, r3, #9
 8006f32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f36:	ee07 3a90 	vmov	s15, r3
 8006f3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f3e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006f42:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006f46:	edd7 6a07 	vldr	s13, [r7, #28]
 8006f4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006f52:	ee17 2a90 	vmov	r2, s15
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8006f5a:	4b1f      	ldr	r3, [pc, #124]	; (8006fd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f5e:	0c1b      	lsrs	r3, r3, #16
 8006f60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f64:	ee07 3a90 	vmov	s15, r3
 8006f68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f6c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006f70:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006f74:	edd7 6a07 	vldr	s13, [r7, #28]
 8006f78:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f7c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006f80:	ee17 2a90 	vmov	r2, s15
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8006f88:	4b13      	ldr	r3, [pc, #76]	; (8006fd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f8c:	0e1b      	lsrs	r3, r3, #24
 8006f8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f92:	ee07 3a90 	vmov	s15, r3
 8006f96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f9a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006f9e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006fa2:	edd7 6a07 	vldr	s13, [r7, #28]
 8006fa6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006faa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006fae:	ee17 2a90 	vmov	r2, s15
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006fb6:	e008      	b.n	8006fca <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2200      	movs	r2, #0
 8006fbc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	609a      	str	r2, [r3, #8]
}
 8006fca:	bf00      	nop
 8006fcc:	3724      	adds	r7, #36	; 0x24
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd4:	4770      	bx	lr
 8006fd6:	bf00      	nop
 8006fd8:	58024400 	.word	0x58024400
 8006fdc:	03d09000 	.word	0x03d09000
 8006fe0:	46000000 	.word	0x46000000
 8006fe4:	4c742400 	.word	0x4c742400
 8006fe8:	4a742400 	.word	0x4a742400
 8006fec:	4bb71b00 	.word	0x4bb71b00

08006ff0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8006ff0:	b480      	push	{r7}
 8006ff2:	b089      	sub	sp, #36	; 0x24
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006ff8:	4ba0      	ldr	r3, [pc, #640]	; (800727c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006ffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ffc:	f003 0303 	and.w	r3, r3, #3
 8007000:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8007002:	4b9e      	ldr	r3, [pc, #632]	; (800727c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007004:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007006:	091b      	lsrs	r3, r3, #4
 8007008:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800700c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800700e:	4b9b      	ldr	r3, [pc, #620]	; (800727c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007012:	f003 0301 	and.w	r3, r3, #1
 8007016:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8007018:	4b98      	ldr	r3, [pc, #608]	; (800727c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800701a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800701c:	08db      	lsrs	r3, r3, #3
 800701e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007022:	693a      	ldr	r2, [r7, #16]
 8007024:	fb02 f303 	mul.w	r3, r2, r3
 8007028:	ee07 3a90 	vmov	s15, r3
 800702c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007030:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8007034:	697b      	ldr	r3, [r7, #20]
 8007036:	2b00      	cmp	r3, #0
 8007038:	f000 8111 	beq.w	800725e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800703c:	69bb      	ldr	r3, [r7, #24]
 800703e:	2b02      	cmp	r3, #2
 8007040:	f000 8083 	beq.w	800714a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8007044:	69bb      	ldr	r3, [r7, #24]
 8007046:	2b02      	cmp	r3, #2
 8007048:	f200 80a1 	bhi.w	800718e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800704c:	69bb      	ldr	r3, [r7, #24]
 800704e:	2b00      	cmp	r3, #0
 8007050:	d003      	beq.n	800705a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8007052:	69bb      	ldr	r3, [r7, #24]
 8007054:	2b01      	cmp	r3, #1
 8007056:	d056      	beq.n	8007106 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8007058:	e099      	b.n	800718e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800705a:	4b88      	ldr	r3, [pc, #544]	; (800727c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	f003 0320 	and.w	r3, r3, #32
 8007062:	2b00      	cmp	r3, #0
 8007064:	d02d      	beq.n	80070c2 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007066:	4b85      	ldr	r3, [pc, #532]	; (800727c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	08db      	lsrs	r3, r3, #3
 800706c:	f003 0303 	and.w	r3, r3, #3
 8007070:	4a83      	ldr	r2, [pc, #524]	; (8007280 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8007072:	fa22 f303 	lsr.w	r3, r2, r3
 8007076:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007078:	68bb      	ldr	r3, [r7, #8]
 800707a:	ee07 3a90 	vmov	s15, r3
 800707e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007082:	697b      	ldr	r3, [r7, #20]
 8007084:	ee07 3a90 	vmov	s15, r3
 8007088:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800708c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007090:	4b7a      	ldr	r3, [pc, #488]	; (800727c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007094:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007098:	ee07 3a90 	vmov	s15, r3
 800709c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070a0:	ed97 6a03 	vldr	s12, [r7, #12]
 80070a4:	eddf 5a77 	vldr	s11, [pc, #476]	; 8007284 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80070a8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070ac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070b0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80070b4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070bc:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80070c0:	e087      	b.n	80071d2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80070c2:	697b      	ldr	r3, [r7, #20]
 80070c4:	ee07 3a90 	vmov	s15, r3
 80070c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070cc:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8007288 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80070d0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80070d4:	4b69      	ldr	r3, [pc, #420]	; (800727c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80070d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070dc:	ee07 3a90 	vmov	s15, r3
 80070e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070e4:	ed97 6a03 	vldr	s12, [r7, #12]
 80070e8:	eddf 5a66 	vldr	s11, [pc, #408]	; 8007284 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80070ec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070f0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070f4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80070f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007100:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007104:	e065      	b.n	80071d2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007106:	697b      	ldr	r3, [r7, #20]
 8007108:	ee07 3a90 	vmov	s15, r3
 800710c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007110:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800728c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8007114:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007118:	4b58      	ldr	r3, [pc, #352]	; (800727c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800711a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800711c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007120:	ee07 3a90 	vmov	s15, r3
 8007124:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007128:	ed97 6a03 	vldr	s12, [r7, #12]
 800712c:	eddf 5a55 	vldr	s11, [pc, #340]	; 8007284 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007130:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007134:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007138:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800713c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007140:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007144:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007148:	e043      	b.n	80071d2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800714a:	697b      	ldr	r3, [r7, #20]
 800714c:	ee07 3a90 	vmov	s15, r3
 8007150:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007154:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8007290 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8007158:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800715c:	4b47      	ldr	r3, [pc, #284]	; (800727c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800715e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007160:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007164:	ee07 3a90 	vmov	s15, r3
 8007168:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800716c:	ed97 6a03 	vldr	s12, [r7, #12]
 8007170:	eddf 5a44 	vldr	s11, [pc, #272]	; 8007284 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007174:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007178:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800717c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007180:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007184:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007188:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800718c:	e021      	b.n	80071d2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800718e:	697b      	ldr	r3, [r7, #20]
 8007190:	ee07 3a90 	vmov	s15, r3
 8007194:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007198:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8007288 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800719c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071a0:	4b36      	ldr	r3, [pc, #216]	; (800727c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80071a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071a8:	ee07 3a90 	vmov	s15, r3
 80071ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071b0:	ed97 6a03 	vldr	s12, [r7, #12]
 80071b4:	eddf 5a33 	vldr	s11, [pc, #204]	; 8007284 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80071b8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071bc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071c0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80071c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071cc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80071d0:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 80071d2:	4b2a      	ldr	r3, [pc, #168]	; (800727c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80071d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071d6:	0a5b      	lsrs	r3, r3, #9
 80071d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80071dc:	ee07 3a90 	vmov	s15, r3
 80071e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071e4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80071e8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80071ec:	edd7 6a07 	vldr	s13, [r7, #28]
 80071f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80071f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80071f8:	ee17 2a90 	vmov	r2, s15
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8007200:	4b1e      	ldr	r3, [pc, #120]	; (800727c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007202:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007204:	0c1b      	lsrs	r3, r3, #16
 8007206:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800720a:	ee07 3a90 	vmov	s15, r3
 800720e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007212:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007216:	ee37 7a87 	vadd.f32	s14, s15, s14
 800721a:	edd7 6a07 	vldr	s13, [r7, #28]
 800721e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007222:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007226:	ee17 2a90 	vmov	r2, s15
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800722e:	4b13      	ldr	r3, [pc, #76]	; (800727c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007232:	0e1b      	lsrs	r3, r3, #24
 8007234:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007238:	ee07 3a90 	vmov	s15, r3
 800723c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007240:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007244:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007248:	edd7 6a07 	vldr	s13, [r7, #28]
 800724c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007250:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007254:	ee17 2a90 	vmov	r2, s15
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800725c:	e008      	b.n	8007270 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2200      	movs	r2, #0
 8007262:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2200      	movs	r2, #0
 8007268:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	2200      	movs	r2, #0
 800726e:	609a      	str	r2, [r3, #8]
}
 8007270:	bf00      	nop
 8007272:	3724      	adds	r7, #36	; 0x24
 8007274:	46bd      	mov	sp, r7
 8007276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727a:	4770      	bx	lr
 800727c:	58024400 	.word	0x58024400
 8007280:	03d09000 	.word	0x03d09000
 8007284:	46000000 	.word	0x46000000
 8007288:	4c742400 	.word	0x4c742400
 800728c:	4a742400 	.word	0x4a742400
 8007290:	4bb71b00 	.word	0x4bb71b00

08007294 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007294:	b580      	push	{r7, lr}
 8007296:	b084      	sub	sp, #16
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
 800729c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800729e:	2300      	movs	r3, #0
 80072a0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80072a2:	4b53      	ldr	r3, [pc, #332]	; (80073f0 <RCCEx_PLL2_Config+0x15c>)
 80072a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072a6:	f003 0303 	and.w	r3, r3, #3
 80072aa:	2b03      	cmp	r3, #3
 80072ac:	d101      	bne.n	80072b2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80072ae:	2301      	movs	r3, #1
 80072b0:	e099      	b.n	80073e6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80072b2:	4b4f      	ldr	r3, [pc, #316]	; (80073f0 <RCCEx_PLL2_Config+0x15c>)
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	4a4e      	ldr	r2, [pc, #312]	; (80073f0 <RCCEx_PLL2_Config+0x15c>)
 80072b8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80072bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80072be:	f7fa fa13 	bl	80016e8 <HAL_GetTick>
 80072c2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80072c4:	e008      	b.n	80072d8 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80072c6:	f7fa fa0f 	bl	80016e8 <HAL_GetTick>
 80072ca:	4602      	mov	r2, r0
 80072cc:	68bb      	ldr	r3, [r7, #8]
 80072ce:	1ad3      	subs	r3, r2, r3
 80072d0:	2b02      	cmp	r3, #2
 80072d2:	d901      	bls.n	80072d8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80072d4:	2303      	movs	r3, #3
 80072d6:	e086      	b.n	80073e6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80072d8:	4b45      	ldr	r3, [pc, #276]	; (80073f0 <RCCEx_PLL2_Config+0x15c>)
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d1f0      	bne.n	80072c6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80072e4:	4b42      	ldr	r3, [pc, #264]	; (80073f0 <RCCEx_PLL2_Config+0x15c>)
 80072e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072e8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	031b      	lsls	r3, r3, #12
 80072f2:	493f      	ldr	r1, [pc, #252]	; (80073f0 <RCCEx_PLL2_Config+0x15c>)
 80072f4:	4313      	orrs	r3, r2
 80072f6:	628b      	str	r3, [r1, #40]	; 0x28
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	685b      	ldr	r3, [r3, #4]
 80072fc:	3b01      	subs	r3, #1
 80072fe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	689b      	ldr	r3, [r3, #8]
 8007306:	3b01      	subs	r3, #1
 8007308:	025b      	lsls	r3, r3, #9
 800730a:	b29b      	uxth	r3, r3
 800730c:	431a      	orrs	r2, r3
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	68db      	ldr	r3, [r3, #12]
 8007312:	3b01      	subs	r3, #1
 8007314:	041b      	lsls	r3, r3, #16
 8007316:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800731a:	431a      	orrs	r2, r3
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	691b      	ldr	r3, [r3, #16]
 8007320:	3b01      	subs	r3, #1
 8007322:	061b      	lsls	r3, r3, #24
 8007324:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007328:	4931      	ldr	r1, [pc, #196]	; (80073f0 <RCCEx_PLL2_Config+0x15c>)
 800732a:	4313      	orrs	r3, r2
 800732c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800732e:	4b30      	ldr	r3, [pc, #192]	; (80073f0 <RCCEx_PLL2_Config+0x15c>)
 8007330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007332:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	695b      	ldr	r3, [r3, #20]
 800733a:	492d      	ldr	r1, [pc, #180]	; (80073f0 <RCCEx_PLL2_Config+0x15c>)
 800733c:	4313      	orrs	r3, r2
 800733e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007340:	4b2b      	ldr	r3, [pc, #172]	; (80073f0 <RCCEx_PLL2_Config+0x15c>)
 8007342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007344:	f023 0220 	bic.w	r2, r3, #32
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	699b      	ldr	r3, [r3, #24]
 800734c:	4928      	ldr	r1, [pc, #160]	; (80073f0 <RCCEx_PLL2_Config+0x15c>)
 800734e:	4313      	orrs	r3, r2
 8007350:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007352:	4b27      	ldr	r3, [pc, #156]	; (80073f0 <RCCEx_PLL2_Config+0x15c>)
 8007354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007356:	4a26      	ldr	r2, [pc, #152]	; (80073f0 <RCCEx_PLL2_Config+0x15c>)
 8007358:	f023 0310 	bic.w	r3, r3, #16
 800735c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800735e:	4b24      	ldr	r3, [pc, #144]	; (80073f0 <RCCEx_PLL2_Config+0x15c>)
 8007360:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007362:	4b24      	ldr	r3, [pc, #144]	; (80073f4 <RCCEx_PLL2_Config+0x160>)
 8007364:	4013      	ands	r3, r2
 8007366:	687a      	ldr	r2, [r7, #4]
 8007368:	69d2      	ldr	r2, [r2, #28]
 800736a:	00d2      	lsls	r2, r2, #3
 800736c:	4920      	ldr	r1, [pc, #128]	; (80073f0 <RCCEx_PLL2_Config+0x15c>)
 800736e:	4313      	orrs	r3, r2
 8007370:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007372:	4b1f      	ldr	r3, [pc, #124]	; (80073f0 <RCCEx_PLL2_Config+0x15c>)
 8007374:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007376:	4a1e      	ldr	r2, [pc, #120]	; (80073f0 <RCCEx_PLL2_Config+0x15c>)
 8007378:	f043 0310 	orr.w	r3, r3, #16
 800737c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800737e:	683b      	ldr	r3, [r7, #0]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d106      	bne.n	8007392 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007384:	4b1a      	ldr	r3, [pc, #104]	; (80073f0 <RCCEx_PLL2_Config+0x15c>)
 8007386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007388:	4a19      	ldr	r2, [pc, #100]	; (80073f0 <RCCEx_PLL2_Config+0x15c>)
 800738a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800738e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007390:	e00f      	b.n	80073b2 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007392:	683b      	ldr	r3, [r7, #0]
 8007394:	2b01      	cmp	r3, #1
 8007396:	d106      	bne.n	80073a6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007398:	4b15      	ldr	r3, [pc, #84]	; (80073f0 <RCCEx_PLL2_Config+0x15c>)
 800739a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800739c:	4a14      	ldr	r2, [pc, #80]	; (80073f0 <RCCEx_PLL2_Config+0x15c>)
 800739e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80073a2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80073a4:	e005      	b.n	80073b2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80073a6:	4b12      	ldr	r3, [pc, #72]	; (80073f0 <RCCEx_PLL2_Config+0x15c>)
 80073a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073aa:	4a11      	ldr	r2, [pc, #68]	; (80073f0 <RCCEx_PLL2_Config+0x15c>)
 80073ac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80073b0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80073b2:	4b0f      	ldr	r3, [pc, #60]	; (80073f0 <RCCEx_PLL2_Config+0x15c>)
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	4a0e      	ldr	r2, [pc, #56]	; (80073f0 <RCCEx_PLL2_Config+0x15c>)
 80073b8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80073bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80073be:	f7fa f993 	bl	80016e8 <HAL_GetTick>
 80073c2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80073c4:	e008      	b.n	80073d8 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80073c6:	f7fa f98f 	bl	80016e8 <HAL_GetTick>
 80073ca:	4602      	mov	r2, r0
 80073cc:	68bb      	ldr	r3, [r7, #8]
 80073ce:	1ad3      	subs	r3, r2, r3
 80073d0:	2b02      	cmp	r3, #2
 80073d2:	d901      	bls.n	80073d8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80073d4:	2303      	movs	r3, #3
 80073d6:	e006      	b.n	80073e6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80073d8:	4b05      	ldr	r3, [pc, #20]	; (80073f0 <RCCEx_PLL2_Config+0x15c>)
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d0f0      	beq.n	80073c6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80073e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80073e6:	4618      	mov	r0, r3
 80073e8:	3710      	adds	r7, #16
 80073ea:	46bd      	mov	sp, r7
 80073ec:	bd80      	pop	{r7, pc}
 80073ee:	bf00      	nop
 80073f0:	58024400 	.word	0x58024400
 80073f4:	ffff0007 	.word	0xffff0007

080073f8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b084      	sub	sp, #16
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]
 8007400:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007402:	2300      	movs	r3, #0
 8007404:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007406:	4b53      	ldr	r3, [pc, #332]	; (8007554 <RCCEx_PLL3_Config+0x15c>)
 8007408:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800740a:	f003 0303 	and.w	r3, r3, #3
 800740e:	2b03      	cmp	r3, #3
 8007410:	d101      	bne.n	8007416 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007412:	2301      	movs	r3, #1
 8007414:	e099      	b.n	800754a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007416:	4b4f      	ldr	r3, [pc, #316]	; (8007554 <RCCEx_PLL3_Config+0x15c>)
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	4a4e      	ldr	r2, [pc, #312]	; (8007554 <RCCEx_PLL3_Config+0x15c>)
 800741c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007420:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007422:	f7fa f961 	bl	80016e8 <HAL_GetTick>
 8007426:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007428:	e008      	b.n	800743c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800742a:	f7fa f95d 	bl	80016e8 <HAL_GetTick>
 800742e:	4602      	mov	r2, r0
 8007430:	68bb      	ldr	r3, [r7, #8]
 8007432:	1ad3      	subs	r3, r2, r3
 8007434:	2b02      	cmp	r3, #2
 8007436:	d901      	bls.n	800743c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007438:	2303      	movs	r3, #3
 800743a:	e086      	b.n	800754a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800743c:	4b45      	ldr	r3, [pc, #276]	; (8007554 <RCCEx_PLL3_Config+0x15c>)
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007444:	2b00      	cmp	r3, #0
 8007446:	d1f0      	bne.n	800742a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007448:	4b42      	ldr	r3, [pc, #264]	; (8007554 <RCCEx_PLL3_Config+0x15c>)
 800744a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800744c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	051b      	lsls	r3, r3, #20
 8007456:	493f      	ldr	r1, [pc, #252]	; (8007554 <RCCEx_PLL3_Config+0x15c>)
 8007458:	4313      	orrs	r3, r2
 800745a:	628b      	str	r3, [r1, #40]	; 0x28
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	685b      	ldr	r3, [r3, #4]
 8007460:	3b01      	subs	r3, #1
 8007462:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	689b      	ldr	r3, [r3, #8]
 800746a:	3b01      	subs	r3, #1
 800746c:	025b      	lsls	r3, r3, #9
 800746e:	b29b      	uxth	r3, r3
 8007470:	431a      	orrs	r2, r3
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	68db      	ldr	r3, [r3, #12]
 8007476:	3b01      	subs	r3, #1
 8007478:	041b      	lsls	r3, r3, #16
 800747a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800747e:	431a      	orrs	r2, r3
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	691b      	ldr	r3, [r3, #16]
 8007484:	3b01      	subs	r3, #1
 8007486:	061b      	lsls	r3, r3, #24
 8007488:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800748c:	4931      	ldr	r1, [pc, #196]	; (8007554 <RCCEx_PLL3_Config+0x15c>)
 800748e:	4313      	orrs	r3, r2
 8007490:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007492:	4b30      	ldr	r3, [pc, #192]	; (8007554 <RCCEx_PLL3_Config+0x15c>)
 8007494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007496:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	695b      	ldr	r3, [r3, #20]
 800749e:	492d      	ldr	r1, [pc, #180]	; (8007554 <RCCEx_PLL3_Config+0x15c>)
 80074a0:	4313      	orrs	r3, r2
 80074a2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80074a4:	4b2b      	ldr	r3, [pc, #172]	; (8007554 <RCCEx_PLL3_Config+0x15c>)
 80074a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074a8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	699b      	ldr	r3, [r3, #24]
 80074b0:	4928      	ldr	r1, [pc, #160]	; (8007554 <RCCEx_PLL3_Config+0x15c>)
 80074b2:	4313      	orrs	r3, r2
 80074b4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80074b6:	4b27      	ldr	r3, [pc, #156]	; (8007554 <RCCEx_PLL3_Config+0x15c>)
 80074b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074ba:	4a26      	ldr	r2, [pc, #152]	; (8007554 <RCCEx_PLL3_Config+0x15c>)
 80074bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80074c0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80074c2:	4b24      	ldr	r3, [pc, #144]	; (8007554 <RCCEx_PLL3_Config+0x15c>)
 80074c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80074c6:	4b24      	ldr	r3, [pc, #144]	; (8007558 <RCCEx_PLL3_Config+0x160>)
 80074c8:	4013      	ands	r3, r2
 80074ca:	687a      	ldr	r2, [r7, #4]
 80074cc:	69d2      	ldr	r2, [r2, #28]
 80074ce:	00d2      	lsls	r2, r2, #3
 80074d0:	4920      	ldr	r1, [pc, #128]	; (8007554 <RCCEx_PLL3_Config+0x15c>)
 80074d2:	4313      	orrs	r3, r2
 80074d4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80074d6:	4b1f      	ldr	r3, [pc, #124]	; (8007554 <RCCEx_PLL3_Config+0x15c>)
 80074d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074da:	4a1e      	ldr	r2, [pc, #120]	; (8007554 <RCCEx_PLL3_Config+0x15c>)
 80074dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80074e0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80074e2:	683b      	ldr	r3, [r7, #0]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d106      	bne.n	80074f6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80074e8:	4b1a      	ldr	r3, [pc, #104]	; (8007554 <RCCEx_PLL3_Config+0x15c>)
 80074ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074ec:	4a19      	ldr	r2, [pc, #100]	; (8007554 <RCCEx_PLL3_Config+0x15c>)
 80074ee:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80074f2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80074f4:	e00f      	b.n	8007516 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80074f6:	683b      	ldr	r3, [r7, #0]
 80074f8:	2b01      	cmp	r3, #1
 80074fa:	d106      	bne.n	800750a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80074fc:	4b15      	ldr	r3, [pc, #84]	; (8007554 <RCCEx_PLL3_Config+0x15c>)
 80074fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007500:	4a14      	ldr	r2, [pc, #80]	; (8007554 <RCCEx_PLL3_Config+0x15c>)
 8007502:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007506:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007508:	e005      	b.n	8007516 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800750a:	4b12      	ldr	r3, [pc, #72]	; (8007554 <RCCEx_PLL3_Config+0x15c>)
 800750c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800750e:	4a11      	ldr	r2, [pc, #68]	; (8007554 <RCCEx_PLL3_Config+0x15c>)
 8007510:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007514:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007516:	4b0f      	ldr	r3, [pc, #60]	; (8007554 <RCCEx_PLL3_Config+0x15c>)
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	4a0e      	ldr	r2, [pc, #56]	; (8007554 <RCCEx_PLL3_Config+0x15c>)
 800751c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007520:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007522:	f7fa f8e1 	bl	80016e8 <HAL_GetTick>
 8007526:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007528:	e008      	b.n	800753c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800752a:	f7fa f8dd 	bl	80016e8 <HAL_GetTick>
 800752e:	4602      	mov	r2, r0
 8007530:	68bb      	ldr	r3, [r7, #8]
 8007532:	1ad3      	subs	r3, r2, r3
 8007534:	2b02      	cmp	r3, #2
 8007536:	d901      	bls.n	800753c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007538:	2303      	movs	r3, #3
 800753a:	e006      	b.n	800754a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800753c:	4b05      	ldr	r3, [pc, #20]	; (8007554 <RCCEx_PLL3_Config+0x15c>)
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007544:	2b00      	cmp	r3, #0
 8007546:	d0f0      	beq.n	800752a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007548:	7bfb      	ldrb	r3, [r7, #15]
}
 800754a:	4618      	mov	r0, r3
 800754c:	3710      	adds	r7, #16
 800754e:	46bd      	mov	sp, r7
 8007550:	bd80      	pop	{r7, pc}
 8007552:	bf00      	nop
 8007554:	58024400 	.word	0x58024400
 8007558:	ffff0007 	.word	0xffff0007

0800755c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800755c:	b580      	push	{r7, lr}
 800755e:	b082      	sub	sp, #8
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2b00      	cmp	r3, #0
 8007568:	d101      	bne.n	800756e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800756a:	2301      	movs	r3, #1
 800756c:	e049      	b.n	8007602 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007574:	b2db      	uxtb	r3, r3
 8007576:	2b00      	cmp	r3, #0
 8007578:	d106      	bne.n	8007588 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	2200      	movs	r2, #0
 800757e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007582:	6878      	ldr	r0, [r7, #4]
 8007584:	f7f9 ffc4 	bl	8001510 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2202      	movs	r2, #2
 800758c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681a      	ldr	r2, [r3, #0]
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	3304      	adds	r3, #4
 8007598:	4619      	mov	r1, r3
 800759a:	4610      	mov	r0, r2
 800759c:	f000 fd76 	bl	800808c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	2201      	movs	r2, #1
 80075a4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2201      	movs	r2, #1
 80075ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2201      	movs	r2, #1
 80075b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2201      	movs	r2, #1
 80075bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2201      	movs	r2, #1
 80075c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2201      	movs	r2, #1
 80075cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2201      	movs	r2, #1
 80075d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2201      	movs	r2, #1
 80075dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2201      	movs	r2, #1
 80075e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2201      	movs	r2, #1
 80075ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	2201      	movs	r2, #1
 80075f4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2201      	movs	r2, #1
 80075fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007600:	2300      	movs	r3, #0
}
 8007602:	4618      	mov	r0, r3
 8007604:	3708      	adds	r7, #8
 8007606:	46bd      	mov	sp, r7
 8007608:	bd80      	pop	{r7, pc}
	...

0800760c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800760c:	b480      	push	{r7}
 800760e:	b085      	sub	sp, #20
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800761a:	b2db      	uxtb	r3, r3
 800761c:	2b01      	cmp	r3, #1
 800761e:	d001      	beq.n	8007624 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007620:	2301      	movs	r3, #1
 8007622:	e054      	b.n	80076ce <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	2202      	movs	r2, #2
 8007628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	68da      	ldr	r2, [r3, #12]
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	f042 0201 	orr.w	r2, r2, #1
 800763a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	4a26      	ldr	r2, [pc, #152]	; (80076dc <HAL_TIM_Base_Start_IT+0xd0>)
 8007642:	4293      	cmp	r3, r2
 8007644:	d022      	beq.n	800768c <HAL_TIM_Base_Start_IT+0x80>
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800764e:	d01d      	beq.n	800768c <HAL_TIM_Base_Start_IT+0x80>
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	4a22      	ldr	r2, [pc, #136]	; (80076e0 <HAL_TIM_Base_Start_IT+0xd4>)
 8007656:	4293      	cmp	r3, r2
 8007658:	d018      	beq.n	800768c <HAL_TIM_Base_Start_IT+0x80>
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	4a21      	ldr	r2, [pc, #132]	; (80076e4 <HAL_TIM_Base_Start_IT+0xd8>)
 8007660:	4293      	cmp	r3, r2
 8007662:	d013      	beq.n	800768c <HAL_TIM_Base_Start_IT+0x80>
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	4a1f      	ldr	r2, [pc, #124]	; (80076e8 <HAL_TIM_Base_Start_IT+0xdc>)
 800766a:	4293      	cmp	r3, r2
 800766c:	d00e      	beq.n	800768c <HAL_TIM_Base_Start_IT+0x80>
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	4a1e      	ldr	r2, [pc, #120]	; (80076ec <HAL_TIM_Base_Start_IT+0xe0>)
 8007674:	4293      	cmp	r3, r2
 8007676:	d009      	beq.n	800768c <HAL_TIM_Base_Start_IT+0x80>
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	4a1c      	ldr	r2, [pc, #112]	; (80076f0 <HAL_TIM_Base_Start_IT+0xe4>)
 800767e:	4293      	cmp	r3, r2
 8007680:	d004      	beq.n	800768c <HAL_TIM_Base_Start_IT+0x80>
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	4a1b      	ldr	r2, [pc, #108]	; (80076f4 <HAL_TIM_Base_Start_IT+0xe8>)
 8007688:	4293      	cmp	r3, r2
 800768a:	d115      	bne.n	80076b8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	689a      	ldr	r2, [r3, #8]
 8007692:	4b19      	ldr	r3, [pc, #100]	; (80076f8 <HAL_TIM_Base_Start_IT+0xec>)
 8007694:	4013      	ands	r3, r2
 8007696:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	2b06      	cmp	r3, #6
 800769c:	d015      	beq.n	80076ca <HAL_TIM_Base_Start_IT+0xbe>
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80076a4:	d011      	beq.n	80076ca <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	681a      	ldr	r2, [r3, #0]
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	f042 0201 	orr.w	r2, r2, #1
 80076b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80076b6:	e008      	b.n	80076ca <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	681a      	ldr	r2, [r3, #0]
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	f042 0201 	orr.w	r2, r2, #1
 80076c6:	601a      	str	r2, [r3, #0]
 80076c8:	e000      	b.n	80076cc <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80076ca:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80076cc:	2300      	movs	r3, #0
}
 80076ce:	4618      	mov	r0, r3
 80076d0:	3714      	adds	r7, #20
 80076d2:	46bd      	mov	sp, r7
 80076d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d8:	4770      	bx	lr
 80076da:	bf00      	nop
 80076dc:	40010000 	.word	0x40010000
 80076e0:	40000400 	.word	0x40000400
 80076e4:	40000800 	.word	0x40000800
 80076e8:	40000c00 	.word	0x40000c00
 80076ec:	40010400 	.word	0x40010400
 80076f0:	40001800 	.word	0x40001800
 80076f4:	40014000 	.word	0x40014000
 80076f8:	00010007 	.word	0x00010007

080076fc <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80076fc:	b580      	push	{r7, lr}
 80076fe:	b082      	sub	sp, #8
 8007700:	af00      	add	r7, sp, #0
 8007702:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d101      	bne.n	800770e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800770a:	2301      	movs	r3, #1
 800770c:	e049      	b.n	80077a2 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007714:	b2db      	uxtb	r3, r3
 8007716:	2b00      	cmp	r3, #0
 8007718:	d106      	bne.n	8007728 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	2200      	movs	r2, #0
 800771e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8007722:	6878      	ldr	r0, [r7, #4]
 8007724:	f000 f841 	bl	80077aa <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2202      	movs	r2, #2
 800772c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681a      	ldr	r2, [r3, #0]
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	3304      	adds	r3, #4
 8007738:	4619      	mov	r1, r3
 800773a:	4610      	mov	r0, r2
 800773c:	f000 fca6 	bl	800808c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2201      	movs	r2, #1
 8007744:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	2201      	movs	r2, #1
 800774c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	2201      	movs	r2, #1
 8007754:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	2201      	movs	r2, #1
 800775c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	2201      	movs	r2, #1
 8007764:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	2201      	movs	r2, #1
 800776c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	2201      	movs	r2, #1
 8007774:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2201      	movs	r2, #1
 800777c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2201      	movs	r2, #1
 8007784:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	2201      	movs	r2, #1
 800778c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2201      	movs	r2, #1
 8007794:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2201      	movs	r2, #1
 800779c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80077a0:	2300      	movs	r3, #0
}
 80077a2:	4618      	mov	r0, r3
 80077a4:	3708      	adds	r7, #8
 80077a6:	46bd      	mov	sp, r7
 80077a8:	bd80      	pop	{r7, pc}

080077aa <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80077aa:	b480      	push	{r7}
 80077ac:	b083      	sub	sp, #12
 80077ae:	af00      	add	r7, sp, #0
 80077b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80077b2:	bf00      	nop
 80077b4:	370c      	adds	r7, #12
 80077b6:	46bd      	mov	sp, r7
 80077b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077bc:	4770      	bx	lr
	...

080077c0 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80077c0:	b580      	push	{r7, lr}
 80077c2:	b084      	sub	sp, #16
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	6078      	str	r0, [r7, #4]
 80077c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80077ca:	2300      	movs	r3, #0
 80077cc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80077ce:	683b      	ldr	r3, [r7, #0]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d104      	bne.n	80077de <HAL_TIM_IC_Start_IT+0x1e>
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80077da:	b2db      	uxtb	r3, r3
 80077dc:	e023      	b.n	8007826 <HAL_TIM_IC_Start_IT+0x66>
 80077de:	683b      	ldr	r3, [r7, #0]
 80077e0:	2b04      	cmp	r3, #4
 80077e2:	d104      	bne.n	80077ee <HAL_TIM_IC_Start_IT+0x2e>
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80077ea:	b2db      	uxtb	r3, r3
 80077ec:	e01b      	b.n	8007826 <HAL_TIM_IC_Start_IT+0x66>
 80077ee:	683b      	ldr	r3, [r7, #0]
 80077f0:	2b08      	cmp	r3, #8
 80077f2:	d104      	bne.n	80077fe <HAL_TIM_IC_Start_IT+0x3e>
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80077fa:	b2db      	uxtb	r3, r3
 80077fc:	e013      	b.n	8007826 <HAL_TIM_IC_Start_IT+0x66>
 80077fe:	683b      	ldr	r3, [r7, #0]
 8007800:	2b0c      	cmp	r3, #12
 8007802:	d104      	bne.n	800780e <HAL_TIM_IC_Start_IT+0x4e>
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800780a:	b2db      	uxtb	r3, r3
 800780c:	e00b      	b.n	8007826 <HAL_TIM_IC_Start_IT+0x66>
 800780e:	683b      	ldr	r3, [r7, #0]
 8007810:	2b10      	cmp	r3, #16
 8007812:	d104      	bne.n	800781e <HAL_TIM_IC_Start_IT+0x5e>
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800781a:	b2db      	uxtb	r3, r3
 800781c:	e003      	b.n	8007826 <HAL_TIM_IC_Start_IT+0x66>
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007824:	b2db      	uxtb	r3, r3
 8007826:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8007828:	683b      	ldr	r3, [r7, #0]
 800782a:	2b00      	cmp	r3, #0
 800782c:	d104      	bne.n	8007838 <HAL_TIM_IC_Start_IT+0x78>
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007834:	b2db      	uxtb	r3, r3
 8007836:	e013      	b.n	8007860 <HAL_TIM_IC_Start_IT+0xa0>
 8007838:	683b      	ldr	r3, [r7, #0]
 800783a:	2b04      	cmp	r3, #4
 800783c:	d104      	bne.n	8007848 <HAL_TIM_IC_Start_IT+0x88>
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007844:	b2db      	uxtb	r3, r3
 8007846:	e00b      	b.n	8007860 <HAL_TIM_IC_Start_IT+0xa0>
 8007848:	683b      	ldr	r3, [r7, #0]
 800784a:	2b08      	cmp	r3, #8
 800784c:	d104      	bne.n	8007858 <HAL_TIM_IC_Start_IT+0x98>
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8007854:	b2db      	uxtb	r3, r3
 8007856:	e003      	b.n	8007860 <HAL_TIM_IC_Start_IT+0xa0>
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800785e:	b2db      	uxtb	r3, r3
 8007860:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8007862:	7bbb      	ldrb	r3, [r7, #14]
 8007864:	2b01      	cmp	r3, #1
 8007866:	d102      	bne.n	800786e <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8007868:	7b7b      	ldrb	r3, [r7, #13]
 800786a:	2b01      	cmp	r3, #1
 800786c:	d001      	beq.n	8007872 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 800786e:	2301      	movs	r3, #1
 8007870:	e0e2      	b.n	8007a38 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007872:	683b      	ldr	r3, [r7, #0]
 8007874:	2b00      	cmp	r3, #0
 8007876:	d104      	bne.n	8007882 <HAL_TIM_IC_Start_IT+0xc2>
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	2202      	movs	r2, #2
 800787c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007880:	e023      	b.n	80078ca <HAL_TIM_IC_Start_IT+0x10a>
 8007882:	683b      	ldr	r3, [r7, #0]
 8007884:	2b04      	cmp	r3, #4
 8007886:	d104      	bne.n	8007892 <HAL_TIM_IC_Start_IT+0xd2>
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	2202      	movs	r2, #2
 800788c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007890:	e01b      	b.n	80078ca <HAL_TIM_IC_Start_IT+0x10a>
 8007892:	683b      	ldr	r3, [r7, #0]
 8007894:	2b08      	cmp	r3, #8
 8007896:	d104      	bne.n	80078a2 <HAL_TIM_IC_Start_IT+0xe2>
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	2202      	movs	r2, #2
 800789c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80078a0:	e013      	b.n	80078ca <HAL_TIM_IC_Start_IT+0x10a>
 80078a2:	683b      	ldr	r3, [r7, #0]
 80078a4:	2b0c      	cmp	r3, #12
 80078a6:	d104      	bne.n	80078b2 <HAL_TIM_IC_Start_IT+0xf2>
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	2202      	movs	r2, #2
 80078ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80078b0:	e00b      	b.n	80078ca <HAL_TIM_IC_Start_IT+0x10a>
 80078b2:	683b      	ldr	r3, [r7, #0]
 80078b4:	2b10      	cmp	r3, #16
 80078b6:	d104      	bne.n	80078c2 <HAL_TIM_IC_Start_IT+0x102>
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2202      	movs	r2, #2
 80078bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80078c0:	e003      	b.n	80078ca <HAL_TIM_IC_Start_IT+0x10a>
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	2202      	movs	r2, #2
 80078c6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80078ca:	683b      	ldr	r3, [r7, #0]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d104      	bne.n	80078da <HAL_TIM_IC_Start_IT+0x11a>
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	2202      	movs	r2, #2
 80078d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80078d8:	e013      	b.n	8007902 <HAL_TIM_IC_Start_IT+0x142>
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	2b04      	cmp	r3, #4
 80078de:	d104      	bne.n	80078ea <HAL_TIM_IC_Start_IT+0x12a>
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	2202      	movs	r2, #2
 80078e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80078e8:	e00b      	b.n	8007902 <HAL_TIM_IC_Start_IT+0x142>
 80078ea:	683b      	ldr	r3, [r7, #0]
 80078ec:	2b08      	cmp	r3, #8
 80078ee:	d104      	bne.n	80078fa <HAL_TIM_IC_Start_IT+0x13a>
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	2202      	movs	r2, #2
 80078f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80078f8:	e003      	b.n	8007902 <HAL_TIM_IC_Start_IT+0x142>
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	2202      	movs	r2, #2
 80078fe:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 8007902:	683b      	ldr	r3, [r7, #0]
 8007904:	2b0c      	cmp	r3, #12
 8007906:	d841      	bhi.n	800798c <HAL_TIM_IC_Start_IT+0x1cc>
 8007908:	a201      	add	r2, pc, #4	; (adr r2, 8007910 <HAL_TIM_IC_Start_IT+0x150>)
 800790a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800790e:	bf00      	nop
 8007910:	08007945 	.word	0x08007945
 8007914:	0800798d 	.word	0x0800798d
 8007918:	0800798d 	.word	0x0800798d
 800791c:	0800798d 	.word	0x0800798d
 8007920:	08007957 	.word	0x08007957
 8007924:	0800798d 	.word	0x0800798d
 8007928:	0800798d 	.word	0x0800798d
 800792c:	0800798d 	.word	0x0800798d
 8007930:	08007969 	.word	0x08007969
 8007934:	0800798d 	.word	0x0800798d
 8007938:	0800798d 	.word	0x0800798d
 800793c:	0800798d 	.word	0x0800798d
 8007940:	0800797b 	.word	0x0800797b
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	68da      	ldr	r2, [r3, #12]
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	f042 0202 	orr.w	r2, r2, #2
 8007952:	60da      	str	r2, [r3, #12]
      break;
 8007954:	e01d      	b.n	8007992 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	68da      	ldr	r2, [r3, #12]
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	f042 0204 	orr.w	r2, r2, #4
 8007964:	60da      	str	r2, [r3, #12]
      break;
 8007966:	e014      	b.n	8007992 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	68da      	ldr	r2, [r3, #12]
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	f042 0208 	orr.w	r2, r2, #8
 8007976:	60da      	str	r2, [r3, #12]
      break;
 8007978:	e00b      	b.n	8007992 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	68da      	ldr	r2, [r3, #12]
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	f042 0210 	orr.w	r2, r2, #16
 8007988:	60da      	str	r2, [r3, #12]
      break;
 800798a:	e002      	b.n	8007992 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 800798c:	2301      	movs	r3, #1
 800798e:	73fb      	strb	r3, [r7, #15]
      break;
 8007990:	bf00      	nop
  }

  if (status == HAL_OK)
 8007992:	7bfb      	ldrb	r3, [r7, #15]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d14e      	bne.n	8007a36 <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	2201      	movs	r2, #1
 800799e:	6839      	ldr	r1, [r7, #0]
 80079a0:	4618      	mov	r0, r3
 80079a2:	f000 fdd5 	bl	8008550 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	4a25      	ldr	r2, [pc, #148]	; (8007a40 <HAL_TIM_IC_Start_IT+0x280>)
 80079ac:	4293      	cmp	r3, r2
 80079ae:	d022      	beq.n	80079f6 <HAL_TIM_IC_Start_IT+0x236>
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80079b8:	d01d      	beq.n	80079f6 <HAL_TIM_IC_Start_IT+0x236>
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	4a21      	ldr	r2, [pc, #132]	; (8007a44 <HAL_TIM_IC_Start_IT+0x284>)
 80079c0:	4293      	cmp	r3, r2
 80079c2:	d018      	beq.n	80079f6 <HAL_TIM_IC_Start_IT+0x236>
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	4a1f      	ldr	r2, [pc, #124]	; (8007a48 <HAL_TIM_IC_Start_IT+0x288>)
 80079ca:	4293      	cmp	r3, r2
 80079cc:	d013      	beq.n	80079f6 <HAL_TIM_IC_Start_IT+0x236>
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	4a1e      	ldr	r2, [pc, #120]	; (8007a4c <HAL_TIM_IC_Start_IT+0x28c>)
 80079d4:	4293      	cmp	r3, r2
 80079d6:	d00e      	beq.n	80079f6 <HAL_TIM_IC_Start_IT+0x236>
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	4a1c      	ldr	r2, [pc, #112]	; (8007a50 <HAL_TIM_IC_Start_IT+0x290>)
 80079de:	4293      	cmp	r3, r2
 80079e0:	d009      	beq.n	80079f6 <HAL_TIM_IC_Start_IT+0x236>
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	4a1b      	ldr	r2, [pc, #108]	; (8007a54 <HAL_TIM_IC_Start_IT+0x294>)
 80079e8:	4293      	cmp	r3, r2
 80079ea:	d004      	beq.n	80079f6 <HAL_TIM_IC_Start_IT+0x236>
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	4a19      	ldr	r2, [pc, #100]	; (8007a58 <HAL_TIM_IC_Start_IT+0x298>)
 80079f2:	4293      	cmp	r3, r2
 80079f4:	d115      	bne.n	8007a22 <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	689a      	ldr	r2, [r3, #8]
 80079fc:	4b17      	ldr	r3, [pc, #92]	; (8007a5c <HAL_TIM_IC_Start_IT+0x29c>)
 80079fe:	4013      	ands	r3, r2
 8007a00:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a02:	68bb      	ldr	r3, [r7, #8]
 8007a04:	2b06      	cmp	r3, #6
 8007a06:	d015      	beq.n	8007a34 <HAL_TIM_IC_Start_IT+0x274>
 8007a08:	68bb      	ldr	r3, [r7, #8]
 8007a0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a0e:	d011      	beq.n	8007a34 <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	681a      	ldr	r2, [r3, #0]
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	f042 0201 	orr.w	r2, r2, #1
 8007a1e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a20:	e008      	b.n	8007a34 <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	681a      	ldr	r2, [r3, #0]
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	f042 0201 	orr.w	r2, r2, #1
 8007a30:	601a      	str	r2, [r3, #0]
 8007a32:	e000      	b.n	8007a36 <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a34:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8007a36:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a38:	4618      	mov	r0, r3
 8007a3a:	3710      	adds	r7, #16
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	bd80      	pop	{r7, pc}
 8007a40:	40010000 	.word	0x40010000
 8007a44:	40000400 	.word	0x40000400
 8007a48:	40000800 	.word	0x40000800
 8007a4c:	40000c00 	.word	0x40000c00
 8007a50:	40010400 	.word	0x40010400
 8007a54:	40001800 	.word	0x40001800
 8007a58:	40014000 	.word	0x40014000
 8007a5c:	00010007 	.word	0x00010007

08007a60 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007a60:	b580      	push	{r7, lr}
 8007a62:	b082      	sub	sp, #8
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	691b      	ldr	r3, [r3, #16]
 8007a6e:	f003 0302 	and.w	r3, r3, #2
 8007a72:	2b02      	cmp	r3, #2
 8007a74:	d122      	bne.n	8007abc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	68db      	ldr	r3, [r3, #12]
 8007a7c:	f003 0302 	and.w	r3, r3, #2
 8007a80:	2b02      	cmp	r3, #2
 8007a82:	d11b      	bne.n	8007abc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	f06f 0202 	mvn.w	r2, #2
 8007a8c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	2201      	movs	r2, #1
 8007a92:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	699b      	ldr	r3, [r3, #24]
 8007a9a:	f003 0303 	and.w	r3, r3, #3
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d003      	beq.n	8007aaa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007aa2:	6878      	ldr	r0, [r7, #4]
 8007aa4:	f7f8 ff60 	bl	8000968 <HAL_TIM_IC_CaptureCallback>
 8007aa8:	e005      	b.n	8007ab6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007aaa:	6878      	ldr	r0, [r7, #4]
 8007aac:	f000 fad0 	bl	8008050 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ab0:	6878      	ldr	r0, [r7, #4]
 8007ab2:	f000 fad7 	bl	8008064 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	2200      	movs	r2, #0
 8007aba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	691b      	ldr	r3, [r3, #16]
 8007ac2:	f003 0304 	and.w	r3, r3, #4
 8007ac6:	2b04      	cmp	r3, #4
 8007ac8:	d122      	bne.n	8007b10 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	68db      	ldr	r3, [r3, #12]
 8007ad0:	f003 0304 	and.w	r3, r3, #4
 8007ad4:	2b04      	cmp	r3, #4
 8007ad6:	d11b      	bne.n	8007b10 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	f06f 0204 	mvn.w	r2, #4
 8007ae0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	2202      	movs	r2, #2
 8007ae6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	699b      	ldr	r3, [r3, #24]
 8007aee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d003      	beq.n	8007afe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007af6:	6878      	ldr	r0, [r7, #4]
 8007af8:	f7f8 ff36 	bl	8000968 <HAL_TIM_IC_CaptureCallback>
 8007afc:	e005      	b.n	8007b0a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007afe:	6878      	ldr	r0, [r7, #4]
 8007b00:	f000 faa6 	bl	8008050 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b04:	6878      	ldr	r0, [r7, #4]
 8007b06:	f000 faad 	bl	8008064 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	2200      	movs	r2, #0
 8007b0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	691b      	ldr	r3, [r3, #16]
 8007b16:	f003 0308 	and.w	r3, r3, #8
 8007b1a:	2b08      	cmp	r3, #8
 8007b1c:	d122      	bne.n	8007b64 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	68db      	ldr	r3, [r3, #12]
 8007b24:	f003 0308 	and.w	r3, r3, #8
 8007b28:	2b08      	cmp	r3, #8
 8007b2a:	d11b      	bne.n	8007b64 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	f06f 0208 	mvn.w	r2, #8
 8007b34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	2204      	movs	r2, #4
 8007b3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	69db      	ldr	r3, [r3, #28]
 8007b42:	f003 0303 	and.w	r3, r3, #3
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d003      	beq.n	8007b52 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007b4a:	6878      	ldr	r0, [r7, #4]
 8007b4c:	f7f8 ff0c 	bl	8000968 <HAL_TIM_IC_CaptureCallback>
 8007b50:	e005      	b.n	8007b5e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b52:	6878      	ldr	r0, [r7, #4]
 8007b54:	f000 fa7c 	bl	8008050 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b58:	6878      	ldr	r0, [r7, #4]
 8007b5a:	f000 fa83 	bl	8008064 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	2200      	movs	r2, #0
 8007b62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	691b      	ldr	r3, [r3, #16]
 8007b6a:	f003 0310 	and.w	r3, r3, #16
 8007b6e:	2b10      	cmp	r3, #16
 8007b70:	d122      	bne.n	8007bb8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	68db      	ldr	r3, [r3, #12]
 8007b78:	f003 0310 	and.w	r3, r3, #16
 8007b7c:	2b10      	cmp	r3, #16
 8007b7e:	d11b      	bne.n	8007bb8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	f06f 0210 	mvn.w	r2, #16
 8007b88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	2208      	movs	r2, #8
 8007b8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	69db      	ldr	r3, [r3, #28]
 8007b96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d003      	beq.n	8007ba6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007b9e:	6878      	ldr	r0, [r7, #4]
 8007ba0:	f7f8 fee2 	bl	8000968 <HAL_TIM_IC_CaptureCallback>
 8007ba4:	e005      	b.n	8007bb2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ba6:	6878      	ldr	r0, [r7, #4]
 8007ba8:	f000 fa52 	bl	8008050 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007bac:	6878      	ldr	r0, [r7, #4]
 8007bae:	f000 fa59 	bl	8008064 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	2200      	movs	r2, #0
 8007bb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	691b      	ldr	r3, [r3, #16]
 8007bbe:	f003 0301 	and.w	r3, r3, #1
 8007bc2:	2b01      	cmp	r3, #1
 8007bc4:	d10e      	bne.n	8007be4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	68db      	ldr	r3, [r3, #12]
 8007bcc:	f003 0301 	and.w	r3, r3, #1
 8007bd0:	2b01      	cmp	r3, #1
 8007bd2:	d107      	bne.n	8007be4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	f06f 0201 	mvn.w	r2, #1
 8007bdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007bde:	6878      	ldr	r0, [r7, #4]
 8007be0:	f7f9 fa8a 	bl	80010f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	691b      	ldr	r3, [r3, #16]
 8007bea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007bee:	2b80      	cmp	r3, #128	; 0x80
 8007bf0:	d10e      	bne.n	8007c10 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	68db      	ldr	r3, [r3, #12]
 8007bf8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007bfc:	2b80      	cmp	r3, #128	; 0x80
 8007bfe:	d107      	bne.n	8007c10 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007c08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007c0a:	6878      	ldr	r0, [r7, #4]
 8007c0c:	f000 fd5e 	bl	80086cc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	691b      	ldr	r3, [r3, #16]
 8007c16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c1e:	d10e      	bne.n	8007c3e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	68db      	ldr	r3, [r3, #12]
 8007c26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c2a:	2b80      	cmp	r3, #128	; 0x80
 8007c2c:	d107      	bne.n	8007c3e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007c36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007c38:	6878      	ldr	r0, [r7, #4]
 8007c3a:	f000 fd51 	bl	80086e0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	691b      	ldr	r3, [r3, #16]
 8007c44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c48:	2b40      	cmp	r3, #64	; 0x40
 8007c4a:	d10e      	bne.n	8007c6a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	68db      	ldr	r3, [r3, #12]
 8007c52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c56:	2b40      	cmp	r3, #64	; 0x40
 8007c58:	d107      	bne.n	8007c6a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007c62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007c64:	6878      	ldr	r0, [r7, #4]
 8007c66:	f000 fa07 	bl	8008078 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	691b      	ldr	r3, [r3, #16]
 8007c70:	f003 0320 	and.w	r3, r3, #32
 8007c74:	2b20      	cmp	r3, #32
 8007c76:	d10e      	bne.n	8007c96 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	68db      	ldr	r3, [r3, #12]
 8007c7e:	f003 0320 	and.w	r3, r3, #32
 8007c82:	2b20      	cmp	r3, #32
 8007c84:	d107      	bne.n	8007c96 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	f06f 0220 	mvn.w	r2, #32
 8007c8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007c90:	6878      	ldr	r0, [r7, #4]
 8007c92:	f000 fd11 	bl	80086b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007c96:	bf00      	nop
 8007c98:	3708      	adds	r7, #8
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	bd80      	pop	{r7, pc}

08007c9e <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8007c9e:	b580      	push	{r7, lr}
 8007ca0:	b086      	sub	sp, #24
 8007ca2:	af00      	add	r7, sp, #0
 8007ca4:	60f8      	str	r0, [r7, #12]
 8007ca6:	60b9      	str	r1, [r7, #8]
 8007ca8:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007caa:	2300      	movs	r3, #0
 8007cac:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007cb4:	2b01      	cmp	r3, #1
 8007cb6:	d101      	bne.n	8007cbc <HAL_TIM_IC_ConfigChannel+0x1e>
 8007cb8:	2302      	movs	r3, #2
 8007cba:	e088      	b.n	8007dce <HAL_TIM_IC_ConfigChannel+0x130>
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	2201      	movs	r2, #1
 8007cc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d11b      	bne.n	8007d02 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	6818      	ldr	r0, [r3, #0]
 8007cce:	68bb      	ldr	r3, [r7, #8]
 8007cd0:	6819      	ldr	r1, [r3, #0]
 8007cd2:	68bb      	ldr	r3, [r7, #8]
 8007cd4:	685a      	ldr	r2, [r3, #4]
 8007cd6:	68bb      	ldr	r3, [r7, #8]
 8007cd8:	68db      	ldr	r3, [r3, #12]
 8007cda:	f000 fa71 	bl	80081c0 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	699a      	ldr	r2, [r3, #24]
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	f022 020c 	bic.w	r2, r2, #12
 8007cec:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	6999      	ldr	r1, [r3, #24]
 8007cf4:	68bb      	ldr	r3, [r7, #8]
 8007cf6:	689a      	ldr	r2, [r3, #8]
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	430a      	orrs	r2, r1
 8007cfe:	619a      	str	r2, [r3, #24]
 8007d00:	e060      	b.n	8007dc4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	2b04      	cmp	r3, #4
 8007d06:	d11c      	bne.n	8007d42 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	6818      	ldr	r0, [r3, #0]
 8007d0c:	68bb      	ldr	r3, [r7, #8]
 8007d0e:	6819      	ldr	r1, [r3, #0]
 8007d10:	68bb      	ldr	r3, [r7, #8]
 8007d12:	685a      	ldr	r2, [r3, #4]
 8007d14:	68bb      	ldr	r3, [r7, #8]
 8007d16:	68db      	ldr	r3, [r3, #12]
 8007d18:	f000 faf5 	bl	8008306 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	699a      	ldr	r2, [r3, #24]
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007d2a:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	6999      	ldr	r1, [r3, #24]
 8007d32:	68bb      	ldr	r3, [r7, #8]
 8007d34:	689b      	ldr	r3, [r3, #8]
 8007d36:	021a      	lsls	r2, r3, #8
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	430a      	orrs	r2, r1
 8007d3e:	619a      	str	r2, [r3, #24]
 8007d40:	e040      	b.n	8007dc4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	2b08      	cmp	r3, #8
 8007d46:	d11b      	bne.n	8007d80 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	6818      	ldr	r0, [r3, #0]
 8007d4c:	68bb      	ldr	r3, [r7, #8]
 8007d4e:	6819      	ldr	r1, [r3, #0]
 8007d50:	68bb      	ldr	r3, [r7, #8]
 8007d52:	685a      	ldr	r2, [r3, #4]
 8007d54:	68bb      	ldr	r3, [r7, #8]
 8007d56:	68db      	ldr	r3, [r3, #12]
 8007d58:	f000 fb42 	bl	80083e0 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	69da      	ldr	r2, [r3, #28]
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	f022 020c 	bic.w	r2, r2, #12
 8007d6a:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	69d9      	ldr	r1, [r3, #28]
 8007d72:	68bb      	ldr	r3, [r7, #8]
 8007d74:	689a      	ldr	r2, [r3, #8]
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	430a      	orrs	r2, r1
 8007d7c:	61da      	str	r2, [r3, #28]
 8007d7e:	e021      	b.n	8007dc4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	2b0c      	cmp	r3, #12
 8007d84:	d11c      	bne.n	8007dc0 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	6818      	ldr	r0, [r3, #0]
 8007d8a:	68bb      	ldr	r3, [r7, #8]
 8007d8c:	6819      	ldr	r1, [r3, #0]
 8007d8e:	68bb      	ldr	r3, [r7, #8]
 8007d90:	685a      	ldr	r2, [r3, #4]
 8007d92:	68bb      	ldr	r3, [r7, #8]
 8007d94:	68db      	ldr	r3, [r3, #12]
 8007d96:	f000 fb5f 	bl	8008458 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	69da      	ldr	r2, [r3, #28]
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007da8:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	69d9      	ldr	r1, [r3, #28]
 8007db0:	68bb      	ldr	r3, [r7, #8]
 8007db2:	689b      	ldr	r3, [r3, #8]
 8007db4:	021a      	lsls	r2, r3, #8
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	430a      	orrs	r2, r1
 8007dbc:	61da      	str	r2, [r3, #28]
 8007dbe:	e001      	b.n	8007dc4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8007dc0:	2301      	movs	r3, #1
 8007dc2:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	2200      	movs	r2, #0
 8007dc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007dcc:	7dfb      	ldrb	r3, [r7, #23]
}
 8007dce:	4618      	mov	r0, r3
 8007dd0:	3718      	adds	r7, #24
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	bd80      	pop	{r7, pc}
	...

08007dd8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007dd8:	b580      	push	{r7, lr}
 8007dda:	b084      	sub	sp, #16
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	6078      	str	r0, [r7, #4]
 8007de0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007de2:	2300      	movs	r3, #0
 8007de4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007dec:	2b01      	cmp	r3, #1
 8007dee:	d101      	bne.n	8007df4 <HAL_TIM_ConfigClockSource+0x1c>
 8007df0:	2302      	movs	r3, #2
 8007df2:	e0dc      	b.n	8007fae <HAL_TIM_ConfigClockSource+0x1d6>
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	2201      	movs	r2, #1
 8007df8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	2202      	movs	r2, #2
 8007e00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	689b      	ldr	r3, [r3, #8]
 8007e0a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007e0c:	68ba      	ldr	r2, [r7, #8]
 8007e0e:	4b6a      	ldr	r3, [pc, #424]	; (8007fb8 <HAL_TIM_ConfigClockSource+0x1e0>)
 8007e10:	4013      	ands	r3, r2
 8007e12:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007e14:	68bb      	ldr	r3, [r7, #8]
 8007e16:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007e1a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	68ba      	ldr	r2, [r7, #8]
 8007e22:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007e24:	683b      	ldr	r3, [r7, #0]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	4a64      	ldr	r2, [pc, #400]	; (8007fbc <HAL_TIM_ConfigClockSource+0x1e4>)
 8007e2a:	4293      	cmp	r3, r2
 8007e2c:	f000 80a9 	beq.w	8007f82 <HAL_TIM_ConfigClockSource+0x1aa>
 8007e30:	4a62      	ldr	r2, [pc, #392]	; (8007fbc <HAL_TIM_ConfigClockSource+0x1e4>)
 8007e32:	4293      	cmp	r3, r2
 8007e34:	f200 80ae 	bhi.w	8007f94 <HAL_TIM_ConfigClockSource+0x1bc>
 8007e38:	4a61      	ldr	r2, [pc, #388]	; (8007fc0 <HAL_TIM_ConfigClockSource+0x1e8>)
 8007e3a:	4293      	cmp	r3, r2
 8007e3c:	f000 80a1 	beq.w	8007f82 <HAL_TIM_ConfigClockSource+0x1aa>
 8007e40:	4a5f      	ldr	r2, [pc, #380]	; (8007fc0 <HAL_TIM_ConfigClockSource+0x1e8>)
 8007e42:	4293      	cmp	r3, r2
 8007e44:	f200 80a6 	bhi.w	8007f94 <HAL_TIM_ConfigClockSource+0x1bc>
 8007e48:	4a5e      	ldr	r2, [pc, #376]	; (8007fc4 <HAL_TIM_ConfigClockSource+0x1ec>)
 8007e4a:	4293      	cmp	r3, r2
 8007e4c:	f000 8099 	beq.w	8007f82 <HAL_TIM_ConfigClockSource+0x1aa>
 8007e50:	4a5c      	ldr	r2, [pc, #368]	; (8007fc4 <HAL_TIM_ConfigClockSource+0x1ec>)
 8007e52:	4293      	cmp	r3, r2
 8007e54:	f200 809e 	bhi.w	8007f94 <HAL_TIM_ConfigClockSource+0x1bc>
 8007e58:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8007e5c:	f000 8091 	beq.w	8007f82 <HAL_TIM_ConfigClockSource+0x1aa>
 8007e60:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8007e64:	f200 8096 	bhi.w	8007f94 <HAL_TIM_ConfigClockSource+0x1bc>
 8007e68:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007e6c:	f000 8089 	beq.w	8007f82 <HAL_TIM_ConfigClockSource+0x1aa>
 8007e70:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007e74:	f200 808e 	bhi.w	8007f94 <HAL_TIM_ConfigClockSource+0x1bc>
 8007e78:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007e7c:	d03e      	beq.n	8007efc <HAL_TIM_ConfigClockSource+0x124>
 8007e7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007e82:	f200 8087 	bhi.w	8007f94 <HAL_TIM_ConfigClockSource+0x1bc>
 8007e86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e8a:	f000 8086 	beq.w	8007f9a <HAL_TIM_ConfigClockSource+0x1c2>
 8007e8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e92:	d87f      	bhi.n	8007f94 <HAL_TIM_ConfigClockSource+0x1bc>
 8007e94:	2b70      	cmp	r3, #112	; 0x70
 8007e96:	d01a      	beq.n	8007ece <HAL_TIM_ConfigClockSource+0xf6>
 8007e98:	2b70      	cmp	r3, #112	; 0x70
 8007e9a:	d87b      	bhi.n	8007f94 <HAL_TIM_ConfigClockSource+0x1bc>
 8007e9c:	2b60      	cmp	r3, #96	; 0x60
 8007e9e:	d050      	beq.n	8007f42 <HAL_TIM_ConfigClockSource+0x16a>
 8007ea0:	2b60      	cmp	r3, #96	; 0x60
 8007ea2:	d877      	bhi.n	8007f94 <HAL_TIM_ConfigClockSource+0x1bc>
 8007ea4:	2b50      	cmp	r3, #80	; 0x50
 8007ea6:	d03c      	beq.n	8007f22 <HAL_TIM_ConfigClockSource+0x14a>
 8007ea8:	2b50      	cmp	r3, #80	; 0x50
 8007eaa:	d873      	bhi.n	8007f94 <HAL_TIM_ConfigClockSource+0x1bc>
 8007eac:	2b40      	cmp	r3, #64	; 0x40
 8007eae:	d058      	beq.n	8007f62 <HAL_TIM_ConfigClockSource+0x18a>
 8007eb0:	2b40      	cmp	r3, #64	; 0x40
 8007eb2:	d86f      	bhi.n	8007f94 <HAL_TIM_ConfigClockSource+0x1bc>
 8007eb4:	2b30      	cmp	r3, #48	; 0x30
 8007eb6:	d064      	beq.n	8007f82 <HAL_TIM_ConfigClockSource+0x1aa>
 8007eb8:	2b30      	cmp	r3, #48	; 0x30
 8007eba:	d86b      	bhi.n	8007f94 <HAL_TIM_ConfigClockSource+0x1bc>
 8007ebc:	2b20      	cmp	r3, #32
 8007ebe:	d060      	beq.n	8007f82 <HAL_TIM_ConfigClockSource+0x1aa>
 8007ec0:	2b20      	cmp	r3, #32
 8007ec2:	d867      	bhi.n	8007f94 <HAL_TIM_ConfigClockSource+0x1bc>
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d05c      	beq.n	8007f82 <HAL_TIM_ConfigClockSource+0x1aa>
 8007ec8:	2b10      	cmp	r3, #16
 8007eca:	d05a      	beq.n	8007f82 <HAL_TIM_ConfigClockSource+0x1aa>
 8007ecc:	e062      	b.n	8007f94 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	6818      	ldr	r0, [r3, #0]
 8007ed2:	683b      	ldr	r3, [r7, #0]
 8007ed4:	6899      	ldr	r1, [r3, #8]
 8007ed6:	683b      	ldr	r3, [r7, #0]
 8007ed8:	685a      	ldr	r2, [r3, #4]
 8007eda:	683b      	ldr	r3, [r7, #0]
 8007edc:	68db      	ldr	r3, [r3, #12]
 8007ede:	f000 fb17 	bl	8008510 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	689b      	ldr	r3, [r3, #8]
 8007ee8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007eea:	68bb      	ldr	r3, [r7, #8]
 8007eec:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007ef0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	68ba      	ldr	r2, [r7, #8]
 8007ef8:	609a      	str	r2, [r3, #8]
      break;
 8007efa:	e04f      	b.n	8007f9c <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	6818      	ldr	r0, [r3, #0]
 8007f00:	683b      	ldr	r3, [r7, #0]
 8007f02:	6899      	ldr	r1, [r3, #8]
 8007f04:	683b      	ldr	r3, [r7, #0]
 8007f06:	685a      	ldr	r2, [r3, #4]
 8007f08:	683b      	ldr	r3, [r7, #0]
 8007f0a:	68db      	ldr	r3, [r3, #12]
 8007f0c:	f000 fb00 	bl	8008510 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	689a      	ldr	r2, [r3, #8]
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007f1e:	609a      	str	r2, [r3, #8]
      break;
 8007f20:	e03c      	b.n	8007f9c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	6818      	ldr	r0, [r3, #0]
 8007f26:	683b      	ldr	r3, [r7, #0]
 8007f28:	6859      	ldr	r1, [r3, #4]
 8007f2a:	683b      	ldr	r3, [r7, #0]
 8007f2c:	68db      	ldr	r3, [r3, #12]
 8007f2e:	461a      	mov	r2, r3
 8007f30:	f000 f9ba 	bl	80082a8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	2150      	movs	r1, #80	; 0x50
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	f000 faca 	bl	80084d4 <TIM_ITRx_SetConfig>
      break;
 8007f40:	e02c      	b.n	8007f9c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	6818      	ldr	r0, [r3, #0]
 8007f46:	683b      	ldr	r3, [r7, #0]
 8007f48:	6859      	ldr	r1, [r3, #4]
 8007f4a:	683b      	ldr	r3, [r7, #0]
 8007f4c:	68db      	ldr	r3, [r3, #12]
 8007f4e:	461a      	mov	r2, r3
 8007f50:	f000 fa16 	bl	8008380 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	2160      	movs	r1, #96	; 0x60
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	f000 faba 	bl	80084d4 <TIM_ITRx_SetConfig>
      break;
 8007f60:	e01c      	b.n	8007f9c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	6818      	ldr	r0, [r3, #0]
 8007f66:	683b      	ldr	r3, [r7, #0]
 8007f68:	6859      	ldr	r1, [r3, #4]
 8007f6a:	683b      	ldr	r3, [r7, #0]
 8007f6c:	68db      	ldr	r3, [r3, #12]
 8007f6e:	461a      	mov	r2, r3
 8007f70:	f000 f99a 	bl	80082a8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	2140      	movs	r1, #64	; 0x40
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	f000 faaa 	bl	80084d4 <TIM_ITRx_SetConfig>
      break;
 8007f80:	e00c      	b.n	8007f9c <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681a      	ldr	r2, [r3, #0]
 8007f86:	683b      	ldr	r3, [r7, #0]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	4619      	mov	r1, r3
 8007f8c:	4610      	mov	r0, r2
 8007f8e:	f000 faa1 	bl	80084d4 <TIM_ITRx_SetConfig>
      break;
 8007f92:	e003      	b.n	8007f9c <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8007f94:	2301      	movs	r3, #1
 8007f96:	73fb      	strb	r3, [r7, #15]
      break;
 8007f98:	e000      	b.n	8007f9c <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8007f9a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	2201      	movs	r2, #1
 8007fa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	2200      	movs	r2, #0
 8007fa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007fac:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fae:	4618      	mov	r0, r3
 8007fb0:	3710      	adds	r7, #16
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	bd80      	pop	{r7, pc}
 8007fb6:	bf00      	nop
 8007fb8:	ffceff88 	.word	0xffceff88
 8007fbc:	00100040 	.word	0x00100040
 8007fc0:	00100030 	.word	0x00100030
 8007fc4:	00100020 	.word	0x00100020

08007fc8 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007fc8:	b480      	push	{r7}
 8007fca:	b085      	sub	sp, #20
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
 8007fd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	60fb      	str	r3, [r7, #12]
 8007fd6:	683b      	ldr	r3, [r7, #0]
 8007fd8:	2b0c      	cmp	r3, #12
 8007fda:	d831      	bhi.n	8008040 <HAL_TIM_ReadCapturedValue+0x78>
 8007fdc:	a201      	add	r2, pc, #4	; (adr r2, 8007fe4 <HAL_TIM_ReadCapturedValue+0x1c>)
 8007fde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fe2:	bf00      	nop
 8007fe4:	08008019 	.word	0x08008019
 8007fe8:	08008041 	.word	0x08008041
 8007fec:	08008041 	.word	0x08008041
 8007ff0:	08008041 	.word	0x08008041
 8007ff4:	08008023 	.word	0x08008023
 8007ff8:	08008041 	.word	0x08008041
 8007ffc:	08008041 	.word	0x08008041
 8008000:	08008041 	.word	0x08008041
 8008004:	0800802d 	.word	0x0800802d
 8008008:	08008041 	.word	0x08008041
 800800c:	08008041 	.word	0x08008041
 8008010:	08008041 	.word	0x08008041
 8008014:	08008037 	.word	0x08008037
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800801e:	60fb      	str	r3, [r7, #12]

      break;
 8008020:	e00f      	b.n	8008042 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008028:	60fb      	str	r3, [r7, #12]

      break;
 800802a:	e00a      	b.n	8008042 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008032:	60fb      	str	r3, [r7, #12]

      break;
 8008034:	e005      	b.n	8008042 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800803c:	60fb      	str	r3, [r7, #12]

      break;
 800803e:	e000      	b.n	8008042 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8008040:	bf00      	nop
  }

  return tmpreg;
 8008042:	68fb      	ldr	r3, [r7, #12]
}
 8008044:	4618      	mov	r0, r3
 8008046:	3714      	adds	r7, #20
 8008048:	46bd      	mov	sp, r7
 800804a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804e:	4770      	bx	lr

08008050 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008050:	b480      	push	{r7}
 8008052:	b083      	sub	sp, #12
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008058:	bf00      	nop
 800805a:	370c      	adds	r7, #12
 800805c:	46bd      	mov	sp, r7
 800805e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008062:	4770      	bx	lr

08008064 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008064:	b480      	push	{r7}
 8008066:	b083      	sub	sp, #12
 8008068:	af00      	add	r7, sp, #0
 800806a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800806c:	bf00      	nop
 800806e:	370c      	adds	r7, #12
 8008070:	46bd      	mov	sp, r7
 8008072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008076:	4770      	bx	lr

08008078 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008078:	b480      	push	{r7}
 800807a:	b083      	sub	sp, #12
 800807c:	af00      	add	r7, sp, #0
 800807e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008080:	bf00      	nop
 8008082:	370c      	adds	r7, #12
 8008084:	46bd      	mov	sp, r7
 8008086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808a:	4770      	bx	lr

0800808c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800808c:	b480      	push	{r7}
 800808e:	b085      	sub	sp, #20
 8008090:	af00      	add	r7, sp, #0
 8008092:	6078      	str	r0, [r7, #4]
 8008094:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	4a40      	ldr	r2, [pc, #256]	; (80081a0 <TIM_Base_SetConfig+0x114>)
 80080a0:	4293      	cmp	r3, r2
 80080a2:	d013      	beq.n	80080cc <TIM_Base_SetConfig+0x40>
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80080aa:	d00f      	beq.n	80080cc <TIM_Base_SetConfig+0x40>
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	4a3d      	ldr	r2, [pc, #244]	; (80081a4 <TIM_Base_SetConfig+0x118>)
 80080b0:	4293      	cmp	r3, r2
 80080b2:	d00b      	beq.n	80080cc <TIM_Base_SetConfig+0x40>
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	4a3c      	ldr	r2, [pc, #240]	; (80081a8 <TIM_Base_SetConfig+0x11c>)
 80080b8:	4293      	cmp	r3, r2
 80080ba:	d007      	beq.n	80080cc <TIM_Base_SetConfig+0x40>
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	4a3b      	ldr	r2, [pc, #236]	; (80081ac <TIM_Base_SetConfig+0x120>)
 80080c0:	4293      	cmp	r3, r2
 80080c2:	d003      	beq.n	80080cc <TIM_Base_SetConfig+0x40>
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	4a3a      	ldr	r2, [pc, #232]	; (80081b0 <TIM_Base_SetConfig+0x124>)
 80080c8:	4293      	cmp	r3, r2
 80080ca:	d108      	bne.n	80080de <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80080d4:	683b      	ldr	r3, [r7, #0]
 80080d6:	685b      	ldr	r3, [r3, #4]
 80080d8:	68fa      	ldr	r2, [r7, #12]
 80080da:	4313      	orrs	r3, r2
 80080dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	4a2f      	ldr	r2, [pc, #188]	; (80081a0 <TIM_Base_SetConfig+0x114>)
 80080e2:	4293      	cmp	r3, r2
 80080e4:	d01f      	beq.n	8008126 <TIM_Base_SetConfig+0x9a>
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80080ec:	d01b      	beq.n	8008126 <TIM_Base_SetConfig+0x9a>
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	4a2c      	ldr	r2, [pc, #176]	; (80081a4 <TIM_Base_SetConfig+0x118>)
 80080f2:	4293      	cmp	r3, r2
 80080f4:	d017      	beq.n	8008126 <TIM_Base_SetConfig+0x9a>
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	4a2b      	ldr	r2, [pc, #172]	; (80081a8 <TIM_Base_SetConfig+0x11c>)
 80080fa:	4293      	cmp	r3, r2
 80080fc:	d013      	beq.n	8008126 <TIM_Base_SetConfig+0x9a>
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	4a2a      	ldr	r2, [pc, #168]	; (80081ac <TIM_Base_SetConfig+0x120>)
 8008102:	4293      	cmp	r3, r2
 8008104:	d00f      	beq.n	8008126 <TIM_Base_SetConfig+0x9a>
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	4a29      	ldr	r2, [pc, #164]	; (80081b0 <TIM_Base_SetConfig+0x124>)
 800810a:	4293      	cmp	r3, r2
 800810c:	d00b      	beq.n	8008126 <TIM_Base_SetConfig+0x9a>
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	4a28      	ldr	r2, [pc, #160]	; (80081b4 <TIM_Base_SetConfig+0x128>)
 8008112:	4293      	cmp	r3, r2
 8008114:	d007      	beq.n	8008126 <TIM_Base_SetConfig+0x9a>
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	4a27      	ldr	r2, [pc, #156]	; (80081b8 <TIM_Base_SetConfig+0x12c>)
 800811a:	4293      	cmp	r3, r2
 800811c:	d003      	beq.n	8008126 <TIM_Base_SetConfig+0x9a>
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	4a26      	ldr	r2, [pc, #152]	; (80081bc <TIM_Base_SetConfig+0x130>)
 8008122:	4293      	cmp	r3, r2
 8008124:	d108      	bne.n	8008138 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800812c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800812e:	683b      	ldr	r3, [r7, #0]
 8008130:	68db      	ldr	r3, [r3, #12]
 8008132:	68fa      	ldr	r2, [r7, #12]
 8008134:	4313      	orrs	r3, r2
 8008136:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800813e:	683b      	ldr	r3, [r7, #0]
 8008140:	695b      	ldr	r3, [r3, #20]
 8008142:	4313      	orrs	r3, r2
 8008144:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	68fa      	ldr	r2, [r7, #12]
 800814a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800814c:	683b      	ldr	r3, [r7, #0]
 800814e:	689a      	ldr	r2, [r3, #8]
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008154:	683b      	ldr	r3, [r7, #0]
 8008156:	681a      	ldr	r2, [r3, #0]
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	4a10      	ldr	r2, [pc, #64]	; (80081a0 <TIM_Base_SetConfig+0x114>)
 8008160:	4293      	cmp	r3, r2
 8008162:	d00f      	beq.n	8008184 <TIM_Base_SetConfig+0xf8>
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	4a12      	ldr	r2, [pc, #72]	; (80081b0 <TIM_Base_SetConfig+0x124>)
 8008168:	4293      	cmp	r3, r2
 800816a:	d00b      	beq.n	8008184 <TIM_Base_SetConfig+0xf8>
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	4a11      	ldr	r2, [pc, #68]	; (80081b4 <TIM_Base_SetConfig+0x128>)
 8008170:	4293      	cmp	r3, r2
 8008172:	d007      	beq.n	8008184 <TIM_Base_SetConfig+0xf8>
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	4a10      	ldr	r2, [pc, #64]	; (80081b8 <TIM_Base_SetConfig+0x12c>)
 8008178:	4293      	cmp	r3, r2
 800817a:	d003      	beq.n	8008184 <TIM_Base_SetConfig+0xf8>
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	4a0f      	ldr	r2, [pc, #60]	; (80081bc <TIM_Base_SetConfig+0x130>)
 8008180:	4293      	cmp	r3, r2
 8008182:	d103      	bne.n	800818c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008184:	683b      	ldr	r3, [r7, #0]
 8008186:	691a      	ldr	r2, [r3, #16]
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	2201      	movs	r2, #1
 8008190:	615a      	str	r2, [r3, #20]
}
 8008192:	bf00      	nop
 8008194:	3714      	adds	r7, #20
 8008196:	46bd      	mov	sp, r7
 8008198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819c:	4770      	bx	lr
 800819e:	bf00      	nop
 80081a0:	40010000 	.word	0x40010000
 80081a4:	40000400 	.word	0x40000400
 80081a8:	40000800 	.word	0x40000800
 80081ac:	40000c00 	.word	0x40000c00
 80081b0:	40010400 	.word	0x40010400
 80081b4:	40014000 	.word	0x40014000
 80081b8:	40014400 	.word	0x40014400
 80081bc:	40014800 	.word	0x40014800

080081c0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80081c0:	b480      	push	{r7}
 80081c2:	b087      	sub	sp, #28
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	60f8      	str	r0, [r7, #12]
 80081c8:	60b9      	str	r1, [r7, #8]
 80081ca:	607a      	str	r2, [r7, #4]
 80081cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	6a1b      	ldr	r3, [r3, #32]
 80081d2:	f023 0201 	bic.w	r2, r3, #1
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	699b      	ldr	r3, [r3, #24]
 80081de:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	6a1b      	ldr	r3, [r3, #32]
 80081e4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	4a28      	ldr	r2, [pc, #160]	; (800828c <TIM_TI1_SetConfig+0xcc>)
 80081ea:	4293      	cmp	r3, r2
 80081ec:	d01b      	beq.n	8008226 <TIM_TI1_SetConfig+0x66>
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80081f4:	d017      	beq.n	8008226 <TIM_TI1_SetConfig+0x66>
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	4a25      	ldr	r2, [pc, #148]	; (8008290 <TIM_TI1_SetConfig+0xd0>)
 80081fa:	4293      	cmp	r3, r2
 80081fc:	d013      	beq.n	8008226 <TIM_TI1_SetConfig+0x66>
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	4a24      	ldr	r2, [pc, #144]	; (8008294 <TIM_TI1_SetConfig+0xd4>)
 8008202:	4293      	cmp	r3, r2
 8008204:	d00f      	beq.n	8008226 <TIM_TI1_SetConfig+0x66>
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	4a23      	ldr	r2, [pc, #140]	; (8008298 <TIM_TI1_SetConfig+0xd8>)
 800820a:	4293      	cmp	r3, r2
 800820c:	d00b      	beq.n	8008226 <TIM_TI1_SetConfig+0x66>
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	4a22      	ldr	r2, [pc, #136]	; (800829c <TIM_TI1_SetConfig+0xdc>)
 8008212:	4293      	cmp	r3, r2
 8008214:	d007      	beq.n	8008226 <TIM_TI1_SetConfig+0x66>
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	4a21      	ldr	r2, [pc, #132]	; (80082a0 <TIM_TI1_SetConfig+0xe0>)
 800821a:	4293      	cmp	r3, r2
 800821c:	d003      	beq.n	8008226 <TIM_TI1_SetConfig+0x66>
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	4a20      	ldr	r2, [pc, #128]	; (80082a4 <TIM_TI1_SetConfig+0xe4>)
 8008222:	4293      	cmp	r3, r2
 8008224:	d101      	bne.n	800822a <TIM_TI1_SetConfig+0x6a>
 8008226:	2301      	movs	r3, #1
 8008228:	e000      	b.n	800822c <TIM_TI1_SetConfig+0x6c>
 800822a:	2300      	movs	r3, #0
 800822c:	2b00      	cmp	r3, #0
 800822e:	d008      	beq.n	8008242 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8008230:	697b      	ldr	r3, [r7, #20]
 8008232:	f023 0303 	bic.w	r3, r3, #3
 8008236:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8008238:	697a      	ldr	r2, [r7, #20]
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	4313      	orrs	r3, r2
 800823e:	617b      	str	r3, [r7, #20]
 8008240:	e003      	b.n	800824a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8008242:	697b      	ldr	r3, [r7, #20]
 8008244:	f043 0301 	orr.w	r3, r3, #1
 8008248:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800824a:	697b      	ldr	r3, [r7, #20]
 800824c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008250:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8008252:	683b      	ldr	r3, [r7, #0]
 8008254:	011b      	lsls	r3, r3, #4
 8008256:	b2db      	uxtb	r3, r3
 8008258:	697a      	ldr	r2, [r7, #20]
 800825a:	4313      	orrs	r3, r2
 800825c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800825e:	693b      	ldr	r3, [r7, #16]
 8008260:	f023 030a 	bic.w	r3, r3, #10
 8008264:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8008266:	68bb      	ldr	r3, [r7, #8]
 8008268:	f003 030a 	and.w	r3, r3, #10
 800826c:	693a      	ldr	r2, [r7, #16]
 800826e:	4313      	orrs	r3, r2
 8008270:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	697a      	ldr	r2, [r7, #20]
 8008276:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	693a      	ldr	r2, [r7, #16]
 800827c:	621a      	str	r2, [r3, #32]
}
 800827e:	bf00      	nop
 8008280:	371c      	adds	r7, #28
 8008282:	46bd      	mov	sp, r7
 8008284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008288:	4770      	bx	lr
 800828a:	bf00      	nop
 800828c:	40010000 	.word	0x40010000
 8008290:	40000400 	.word	0x40000400
 8008294:	40000800 	.word	0x40000800
 8008298:	40000c00 	.word	0x40000c00
 800829c:	40010400 	.word	0x40010400
 80082a0:	40001800 	.word	0x40001800
 80082a4:	40014000 	.word	0x40014000

080082a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80082a8:	b480      	push	{r7}
 80082aa:	b087      	sub	sp, #28
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	60f8      	str	r0, [r7, #12]
 80082b0:	60b9      	str	r1, [r7, #8]
 80082b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	6a1b      	ldr	r3, [r3, #32]
 80082b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	6a1b      	ldr	r3, [r3, #32]
 80082be:	f023 0201 	bic.w	r2, r3, #1
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	699b      	ldr	r3, [r3, #24]
 80082ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80082cc:	693b      	ldr	r3, [r7, #16]
 80082ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80082d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	011b      	lsls	r3, r3, #4
 80082d8:	693a      	ldr	r2, [r7, #16]
 80082da:	4313      	orrs	r3, r2
 80082dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80082de:	697b      	ldr	r3, [r7, #20]
 80082e0:	f023 030a 	bic.w	r3, r3, #10
 80082e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80082e6:	697a      	ldr	r2, [r7, #20]
 80082e8:	68bb      	ldr	r3, [r7, #8]
 80082ea:	4313      	orrs	r3, r2
 80082ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	693a      	ldr	r2, [r7, #16]
 80082f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	697a      	ldr	r2, [r7, #20]
 80082f8:	621a      	str	r2, [r3, #32]
}
 80082fa:	bf00      	nop
 80082fc:	371c      	adds	r7, #28
 80082fe:	46bd      	mov	sp, r7
 8008300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008304:	4770      	bx	lr

08008306 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008306:	b480      	push	{r7}
 8008308:	b087      	sub	sp, #28
 800830a:	af00      	add	r7, sp, #0
 800830c:	60f8      	str	r0, [r7, #12]
 800830e:	60b9      	str	r1, [r7, #8]
 8008310:	607a      	str	r2, [r7, #4]
 8008312:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	6a1b      	ldr	r3, [r3, #32]
 8008318:	f023 0210 	bic.w	r2, r3, #16
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	699b      	ldr	r3, [r3, #24]
 8008324:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	6a1b      	ldr	r3, [r3, #32]
 800832a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800832c:	697b      	ldr	r3, [r7, #20]
 800832e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008332:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	021b      	lsls	r3, r3, #8
 8008338:	697a      	ldr	r2, [r7, #20]
 800833a:	4313      	orrs	r3, r2
 800833c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800833e:	697b      	ldr	r3, [r7, #20]
 8008340:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008344:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8008346:	683b      	ldr	r3, [r7, #0]
 8008348:	031b      	lsls	r3, r3, #12
 800834a:	b29b      	uxth	r3, r3
 800834c:	697a      	ldr	r2, [r7, #20]
 800834e:	4313      	orrs	r3, r2
 8008350:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008352:	693b      	ldr	r3, [r7, #16]
 8008354:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008358:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800835a:	68bb      	ldr	r3, [r7, #8]
 800835c:	011b      	lsls	r3, r3, #4
 800835e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8008362:	693a      	ldr	r2, [r7, #16]
 8008364:	4313      	orrs	r3, r2
 8008366:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	697a      	ldr	r2, [r7, #20]
 800836c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	693a      	ldr	r2, [r7, #16]
 8008372:	621a      	str	r2, [r3, #32]
}
 8008374:	bf00      	nop
 8008376:	371c      	adds	r7, #28
 8008378:	46bd      	mov	sp, r7
 800837a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837e:	4770      	bx	lr

08008380 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008380:	b480      	push	{r7}
 8008382:	b087      	sub	sp, #28
 8008384:	af00      	add	r7, sp, #0
 8008386:	60f8      	str	r0, [r7, #12]
 8008388:	60b9      	str	r1, [r7, #8]
 800838a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	6a1b      	ldr	r3, [r3, #32]
 8008390:	f023 0210 	bic.w	r2, r3, #16
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	699b      	ldr	r3, [r3, #24]
 800839c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	6a1b      	ldr	r3, [r3, #32]
 80083a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80083a4:	697b      	ldr	r3, [r7, #20]
 80083a6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80083aa:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	031b      	lsls	r3, r3, #12
 80083b0:	697a      	ldr	r2, [r7, #20]
 80083b2:	4313      	orrs	r3, r2
 80083b4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80083b6:	693b      	ldr	r3, [r7, #16]
 80083b8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80083bc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80083be:	68bb      	ldr	r3, [r7, #8]
 80083c0:	011b      	lsls	r3, r3, #4
 80083c2:	693a      	ldr	r2, [r7, #16]
 80083c4:	4313      	orrs	r3, r2
 80083c6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	697a      	ldr	r2, [r7, #20]
 80083cc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	693a      	ldr	r2, [r7, #16]
 80083d2:	621a      	str	r2, [r3, #32]
}
 80083d4:	bf00      	nop
 80083d6:	371c      	adds	r7, #28
 80083d8:	46bd      	mov	sp, r7
 80083da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083de:	4770      	bx	lr

080083e0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80083e0:	b480      	push	{r7}
 80083e2:	b087      	sub	sp, #28
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	60f8      	str	r0, [r7, #12]
 80083e8:	60b9      	str	r1, [r7, #8]
 80083ea:	607a      	str	r2, [r7, #4]
 80083ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	6a1b      	ldr	r3, [r3, #32]
 80083f2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	69db      	ldr	r3, [r3, #28]
 80083fe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	6a1b      	ldr	r3, [r3, #32]
 8008404:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8008406:	697b      	ldr	r3, [r7, #20]
 8008408:	f023 0303 	bic.w	r3, r3, #3
 800840c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800840e:	697a      	ldr	r2, [r7, #20]
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	4313      	orrs	r3, r2
 8008414:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8008416:	697b      	ldr	r3, [r7, #20]
 8008418:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800841c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800841e:	683b      	ldr	r3, [r7, #0]
 8008420:	011b      	lsls	r3, r3, #4
 8008422:	b2db      	uxtb	r3, r3
 8008424:	697a      	ldr	r2, [r7, #20]
 8008426:	4313      	orrs	r3, r2
 8008428:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800842a:	693b      	ldr	r3, [r7, #16]
 800842c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8008430:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8008432:	68bb      	ldr	r3, [r7, #8]
 8008434:	021b      	lsls	r3, r3, #8
 8008436:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800843a:	693a      	ldr	r2, [r7, #16]
 800843c:	4313      	orrs	r3, r2
 800843e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	697a      	ldr	r2, [r7, #20]
 8008444:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	693a      	ldr	r2, [r7, #16]
 800844a:	621a      	str	r2, [r3, #32]
}
 800844c:	bf00      	nop
 800844e:	371c      	adds	r7, #28
 8008450:	46bd      	mov	sp, r7
 8008452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008456:	4770      	bx	lr

08008458 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008458:	b480      	push	{r7}
 800845a:	b087      	sub	sp, #28
 800845c:	af00      	add	r7, sp, #0
 800845e:	60f8      	str	r0, [r7, #12]
 8008460:	60b9      	str	r1, [r7, #8]
 8008462:	607a      	str	r2, [r7, #4]
 8008464:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	6a1b      	ldr	r3, [r3, #32]
 800846a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	69db      	ldr	r3, [r3, #28]
 8008476:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	6a1b      	ldr	r3, [r3, #32]
 800847c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800847e:	697b      	ldr	r3, [r7, #20]
 8008480:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008484:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	021b      	lsls	r3, r3, #8
 800848a:	697a      	ldr	r2, [r7, #20]
 800848c:	4313      	orrs	r3, r2
 800848e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8008490:	697b      	ldr	r3, [r7, #20]
 8008492:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008496:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8008498:	683b      	ldr	r3, [r7, #0]
 800849a:	031b      	lsls	r3, r3, #12
 800849c:	b29b      	uxth	r3, r3
 800849e:	697a      	ldr	r2, [r7, #20]
 80084a0:	4313      	orrs	r3, r2
 80084a2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80084a4:	693b      	ldr	r3, [r7, #16]
 80084a6:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80084aa:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80084ac:	68bb      	ldr	r3, [r7, #8]
 80084ae:	031b      	lsls	r3, r3, #12
 80084b0:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80084b4:	693a      	ldr	r2, [r7, #16]
 80084b6:	4313      	orrs	r3, r2
 80084b8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	697a      	ldr	r2, [r7, #20]
 80084be:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	693a      	ldr	r2, [r7, #16]
 80084c4:	621a      	str	r2, [r3, #32]
}
 80084c6:	bf00      	nop
 80084c8:	371c      	adds	r7, #28
 80084ca:	46bd      	mov	sp, r7
 80084cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d0:	4770      	bx	lr
	...

080084d4 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80084d4:	b480      	push	{r7}
 80084d6:	b085      	sub	sp, #20
 80084d8:	af00      	add	r7, sp, #0
 80084da:	6078      	str	r0, [r7, #4]
 80084dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	689b      	ldr	r3, [r3, #8]
 80084e2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80084e4:	68fa      	ldr	r2, [r7, #12]
 80084e6:	4b09      	ldr	r3, [pc, #36]	; (800850c <TIM_ITRx_SetConfig+0x38>)
 80084e8:	4013      	ands	r3, r2
 80084ea:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80084ec:	683a      	ldr	r2, [r7, #0]
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	4313      	orrs	r3, r2
 80084f2:	f043 0307 	orr.w	r3, r3, #7
 80084f6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	68fa      	ldr	r2, [r7, #12]
 80084fc:	609a      	str	r2, [r3, #8]
}
 80084fe:	bf00      	nop
 8008500:	3714      	adds	r7, #20
 8008502:	46bd      	mov	sp, r7
 8008504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008508:	4770      	bx	lr
 800850a:	bf00      	nop
 800850c:	ffcfff8f 	.word	0xffcfff8f

08008510 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008510:	b480      	push	{r7}
 8008512:	b087      	sub	sp, #28
 8008514:	af00      	add	r7, sp, #0
 8008516:	60f8      	str	r0, [r7, #12]
 8008518:	60b9      	str	r1, [r7, #8]
 800851a:	607a      	str	r2, [r7, #4]
 800851c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	689b      	ldr	r3, [r3, #8]
 8008522:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008524:	697b      	ldr	r3, [r7, #20]
 8008526:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800852a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800852c:	683b      	ldr	r3, [r7, #0]
 800852e:	021a      	lsls	r2, r3, #8
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	431a      	orrs	r2, r3
 8008534:	68bb      	ldr	r3, [r7, #8]
 8008536:	4313      	orrs	r3, r2
 8008538:	697a      	ldr	r2, [r7, #20]
 800853a:	4313      	orrs	r3, r2
 800853c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	697a      	ldr	r2, [r7, #20]
 8008542:	609a      	str	r2, [r3, #8]
}
 8008544:	bf00      	nop
 8008546:	371c      	adds	r7, #28
 8008548:	46bd      	mov	sp, r7
 800854a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800854e:	4770      	bx	lr

08008550 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008550:	b480      	push	{r7}
 8008552:	b087      	sub	sp, #28
 8008554:	af00      	add	r7, sp, #0
 8008556:	60f8      	str	r0, [r7, #12]
 8008558:	60b9      	str	r1, [r7, #8]
 800855a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800855c:	68bb      	ldr	r3, [r7, #8]
 800855e:	f003 031f 	and.w	r3, r3, #31
 8008562:	2201      	movs	r2, #1
 8008564:	fa02 f303 	lsl.w	r3, r2, r3
 8008568:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	6a1a      	ldr	r2, [r3, #32]
 800856e:	697b      	ldr	r3, [r7, #20]
 8008570:	43db      	mvns	r3, r3
 8008572:	401a      	ands	r2, r3
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	6a1a      	ldr	r2, [r3, #32]
 800857c:	68bb      	ldr	r3, [r7, #8]
 800857e:	f003 031f 	and.w	r3, r3, #31
 8008582:	6879      	ldr	r1, [r7, #4]
 8008584:	fa01 f303 	lsl.w	r3, r1, r3
 8008588:	431a      	orrs	r2, r3
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	621a      	str	r2, [r3, #32]
}
 800858e:	bf00      	nop
 8008590:	371c      	adds	r7, #28
 8008592:	46bd      	mov	sp, r7
 8008594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008598:	4770      	bx	lr
	...

0800859c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800859c:	b480      	push	{r7}
 800859e:	b085      	sub	sp, #20
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	6078      	str	r0, [r7, #4]
 80085a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80085ac:	2b01      	cmp	r3, #1
 80085ae:	d101      	bne.n	80085b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80085b0:	2302      	movs	r3, #2
 80085b2:	e06d      	b.n	8008690 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	2201      	movs	r2, #1
 80085b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	2202      	movs	r2, #2
 80085c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	685b      	ldr	r3, [r3, #4]
 80085ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	689b      	ldr	r3, [r3, #8]
 80085d2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	4a30      	ldr	r2, [pc, #192]	; (800869c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80085da:	4293      	cmp	r3, r2
 80085dc:	d004      	beq.n	80085e8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	4a2f      	ldr	r2, [pc, #188]	; (80086a0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80085e4:	4293      	cmp	r3, r2
 80085e6:	d108      	bne.n	80085fa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80085ee:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80085f0:	683b      	ldr	r3, [r7, #0]
 80085f2:	685b      	ldr	r3, [r3, #4]
 80085f4:	68fa      	ldr	r2, [r7, #12]
 80085f6:	4313      	orrs	r3, r2
 80085f8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008600:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008602:	683b      	ldr	r3, [r7, #0]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	68fa      	ldr	r2, [r7, #12]
 8008608:	4313      	orrs	r3, r2
 800860a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	68fa      	ldr	r2, [r7, #12]
 8008612:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	4a20      	ldr	r2, [pc, #128]	; (800869c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800861a:	4293      	cmp	r3, r2
 800861c:	d022      	beq.n	8008664 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008626:	d01d      	beq.n	8008664 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	4a1d      	ldr	r2, [pc, #116]	; (80086a4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800862e:	4293      	cmp	r3, r2
 8008630:	d018      	beq.n	8008664 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	4a1c      	ldr	r2, [pc, #112]	; (80086a8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008638:	4293      	cmp	r3, r2
 800863a:	d013      	beq.n	8008664 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	4a1a      	ldr	r2, [pc, #104]	; (80086ac <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008642:	4293      	cmp	r3, r2
 8008644:	d00e      	beq.n	8008664 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	4a15      	ldr	r2, [pc, #84]	; (80086a0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800864c:	4293      	cmp	r3, r2
 800864e:	d009      	beq.n	8008664 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	4a16      	ldr	r2, [pc, #88]	; (80086b0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008656:	4293      	cmp	r3, r2
 8008658:	d004      	beq.n	8008664 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	4a15      	ldr	r2, [pc, #84]	; (80086b4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008660:	4293      	cmp	r3, r2
 8008662:	d10c      	bne.n	800867e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008664:	68bb      	ldr	r3, [r7, #8]
 8008666:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800866a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800866c:	683b      	ldr	r3, [r7, #0]
 800866e:	689b      	ldr	r3, [r3, #8]
 8008670:	68ba      	ldr	r2, [r7, #8]
 8008672:	4313      	orrs	r3, r2
 8008674:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	68ba      	ldr	r2, [r7, #8]
 800867c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	2201      	movs	r2, #1
 8008682:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	2200      	movs	r2, #0
 800868a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800868e:	2300      	movs	r3, #0
}
 8008690:	4618      	mov	r0, r3
 8008692:	3714      	adds	r7, #20
 8008694:	46bd      	mov	sp, r7
 8008696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869a:	4770      	bx	lr
 800869c:	40010000 	.word	0x40010000
 80086a0:	40010400 	.word	0x40010400
 80086a4:	40000400 	.word	0x40000400
 80086a8:	40000800 	.word	0x40000800
 80086ac:	40000c00 	.word	0x40000c00
 80086b0:	40001800 	.word	0x40001800
 80086b4:	40014000 	.word	0x40014000

080086b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80086b8:	b480      	push	{r7}
 80086ba:	b083      	sub	sp, #12
 80086bc:	af00      	add	r7, sp, #0
 80086be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80086c0:	bf00      	nop
 80086c2:	370c      	adds	r7, #12
 80086c4:	46bd      	mov	sp, r7
 80086c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ca:	4770      	bx	lr

080086cc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80086cc:	b480      	push	{r7}
 80086ce:	b083      	sub	sp, #12
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80086d4:	bf00      	nop
 80086d6:	370c      	adds	r7, #12
 80086d8:	46bd      	mov	sp, r7
 80086da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086de:	4770      	bx	lr

080086e0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80086e0:	b480      	push	{r7}
 80086e2:	b083      	sub	sp, #12
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80086e8:	bf00      	nop
 80086ea:	370c      	adds	r7, #12
 80086ec:	46bd      	mov	sp, r7
 80086ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f2:	4770      	bx	lr

080086f4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80086f4:	b580      	push	{r7, lr}
 80086f6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80086f8:	4b05      	ldr	r3, [pc, #20]	; (8008710 <SysTick_Handler+0x1c>)
 80086fa:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80086fc:	f000 f996 	bl	8008a2c <xTaskGetSchedulerState>
 8008700:	4603      	mov	r3, r0
 8008702:	2b01      	cmp	r3, #1
 8008704:	d001      	beq.n	800870a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8008706:	f000 f9ff 	bl	8008b08 <xPortSysTickHandler>
  }
}
 800870a:	bf00      	nop
 800870c:	bd80      	pop	{r7, pc}
 800870e:	bf00      	nop
 8008710:	e000e010 	.word	0xe000e010

08008714 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008714:	b480      	push	{r7}
 8008716:	b085      	sub	sp, #20
 8008718:	af00      	add	r7, sp, #0
 800871a:	6078      	str	r0, [r7, #4]
 800871c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	685b      	ldr	r3, [r3, #4]
 8008722:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008724:	683b      	ldr	r3, [r7, #0]
 8008726:	68fa      	ldr	r2, [r7, #12]
 8008728:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	689a      	ldr	r2, [r3, #8]
 800872e:	683b      	ldr	r3, [r7, #0]
 8008730:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	689b      	ldr	r3, [r3, #8]
 8008736:	683a      	ldr	r2, [r7, #0]
 8008738:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	683a      	ldr	r2, [r7, #0]
 800873e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008740:	683b      	ldr	r3, [r7, #0]
 8008742:	687a      	ldr	r2, [r7, #4]
 8008744:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	1c5a      	adds	r2, r3, #1
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	601a      	str	r2, [r3, #0]
}
 8008750:	bf00      	nop
 8008752:	3714      	adds	r7, #20
 8008754:	46bd      	mov	sp, r7
 8008756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875a:	4770      	bx	lr

0800875c <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800875c:	b480      	push	{r7}
 800875e:	b085      	sub	sp, #20
 8008760:	af00      	add	r7, sp, #0
 8008762:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	691b      	ldr	r3, [r3, #16]
 8008768:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	685b      	ldr	r3, [r3, #4]
 800876e:	687a      	ldr	r2, [r7, #4]
 8008770:	6892      	ldr	r2, [r2, #8]
 8008772:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	689b      	ldr	r3, [r3, #8]
 8008778:	687a      	ldr	r2, [r7, #4]
 800877a:	6852      	ldr	r2, [r2, #4]
 800877c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	685b      	ldr	r3, [r3, #4]
 8008782:	687a      	ldr	r2, [r7, #4]
 8008784:	429a      	cmp	r2, r3
 8008786:	d103      	bne.n	8008790 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	689a      	ldr	r2, [r3, #8]
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	2200      	movs	r2, #0
 8008794:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	1e5a      	subs	r2, r3, #1
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	681b      	ldr	r3, [r3, #0]
}
 80087a4:	4618      	mov	r0, r3
 80087a6:	3714      	adds	r7, #20
 80087a8:	46bd      	mov	sp, r7
 80087aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ae:	4770      	bx	lr

080087b0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80087b0:	b580      	push	{r7, lr}
 80087b2:	b086      	sub	sp, #24
 80087b4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80087b6:	2300      	movs	r3, #0
 80087b8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80087ba:	4b4f      	ldr	r3, [pc, #316]	; (80088f8 <xTaskIncrementTick+0x148>)
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	2b00      	cmp	r3, #0
 80087c0:	f040 808f 	bne.w	80088e2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80087c4:	4b4d      	ldr	r3, [pc, #308]	; (80088fc <xTaskIncrementTick+0x14c>)
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	3301      	adds	r3, #1
 80087ca:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80087cc:	4a4b      	ldr	r2, [pc, #300]	; (80088fc <xTaskIncrementTick+0x14c>)
 80087ce:	693b      	ldr	r3, [r7, #16]
 80087d0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80087d2:	693b      	ldr	r3, [r7, #16]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d120      	bne.n	800881a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80087d8:	4b49      	ldr	r3, [pc, #292]	; (8008900 <xTaskIncrementTick+0x150>)
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d00a      	beq.n	80087f8 <xTaskIncrementTick+0x48>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80087e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087e6:	f383 8811 	msr	BASEPRI, r3
 80087ea:	f3bf 8f6f 	isb	sy
 80087ee:	f3bf 8f4f 	dsb	sy
 80087f2:	603b      	str	r3, [r7, #0]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80087f4:	bf00      	nop
 80087f6:	e7fe      	b.n	80087f6 <xTaskIncrementTick+0x46>
 80087f8:	4b41      	ldr	r3, [pc, #260]	; (8008900 <xTaskIncrementTick+0x150>)
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	60fb      	str	r3, [r7, #12]
 80087fe:	4b41      	ldr	r3, [pc, #260]	; (8008904 <xTaskIncrementTick+0x154>)
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	4a3f      	ldr	r2, [pc, #252]	; (8008900 <xTaskIncrementTick+0x150>)
 8008804:	6013      	str	r3, [r2, #0]
 8008806:	4a3f      	ldr	r2, [pc, #252]	; (8008904 <xTaskIncrementTick+0x154>)
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	6013      	str	r3, [r2, #0]
 800880c:	4b3e      	ldr	r3, [pc, #248]	; (8008908 <xTaskIncrementTick+0x158>)
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	3301      	adds	r3, #1
 8008812:	4a3d      	ldr	r2, [pc, #244]	; (8008908 <xTaskIncrementTick+0x158>)
 8008814:	6013      	str	r3, [r2, #0]
 8008816:	f000 f8e9 	bl	80089ec <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800881a:	4b3c      	ldr	r3, [pc, #240]	; (800890c <xTaskIncrementTick+0x15c>)
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	693a      	ldr	r2, [r7, #16]
 8008820:	429a      	cmp	r2, r3
 8008822:	d349      	bcc.n	80088b8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008824:	4b36      	ldr	r3, [pc, #216]	; (8008900 <xTaskIncrementTick+0x150>)
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	2b00      	cmp	r3, #0
 800882c:	d104      	bne.n	8008838 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800882e:	4b37      	ldr	r3, [pc, #220]	; (800890c <xTaskIncrementTick+0x15c>)
 8008830:	f04f 32ff 	mov.w	r2, #4294967295
 8008834:	601a      	str	r2, [r3, #0]
					break;
 8008836:	e03f      	b.n	80088b8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008838:	4b31      	ldr	r3, [pc, #196]	; (8008900 <xTaskIncrementTick+0x150>)
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	68db      	ldr	r3, [r3, #12]
 800883e:	68db      	ldr	r3, [r3, #12]
 8008840:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008842:	68bb      	ldr	r3, [r7, #8]
 8008844:	685b      	ldr	r3, [r3, #4]
 8008846:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008848:	693a      	ldr	r2, [r7, #16]
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	429a      	cmp	r2, r3
 800884e:	d203      	bcs.n	8008858 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008850:	4a2e      	ldr	r2, [pc, #184]	; (800890c <xTaskIncrementTick+0x15c>)
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008856:	e02f      	b.n	80088b8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008858:	68bb      	ldr	r3, [r7, #8]
 800885a:	3304      	adds	r3, #4
 800885c:	4618      	mov	r0, r3
 800885e:	f7ff ff7d 	bl	800875c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008862:	68bb      	ldr	r3, [r7, #8]
 8008864:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008866:	2b00      	cmp	r3, #0
 8008868:	d004      	beq.n	8008874 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800886a:	68bb      	ldr	r3, [r7, #8]
 800886c:	3318      	adds	r3, #24
 800886e:	4618      	mov	r0, r3
 8008870:	f7ff ff74 	bl	800875c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008874:	68bb      	ldr	r3, [r7, #8]
 8008876:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008878:	4b25      	ldr	r3, [pc, #148]	; (8008910 <xTaskIncrementTick+0x160>)
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	429a      	cmp	r2, r3
 800887e:	d903      	bls.n	8008888 <xTaskIncrementTick+0xd8>
 8008880:	68bb      	ldr	r3, [r7, #8]
 8008882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008884:	4a22      	ldr	r2, [pc, #136]	; (8008910 <xTaskIncrementTick+0x160>)
 8008886:	6013      	str	r3, [r2, #0]
 8008888:	68bb      	ldr	r3, [r7, #8]
 800888a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800888c:	4613      	mov	r3, r2
 800888e:	009b      	lsls	r3, r3, #2
 8008890:	4413      	add	r3, r2
 8008892:	009b      	lsls	r3, r3, #2
 8008894:	4a1f      	ldr	r2, [pc, #124]	; (8008914 <xTaskIncrementTick+0x164>)
 8008896:	441a      	add	r2, r3
 8008898:	68bb      	ldr	r3, [r7, #8]
 800889a:	3304      	adds	r3, #4
 800889c:	4619      	mov	r1, r3
 800889e:	4610      	mov	r0, r2
 80088a0:	f7ff ff38 	bl	8008714 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80088a4:	68bb      	ldr	r3, [r7, #8]
 80088a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088a8:	4b1b      	ldr	r3, [pc, #108]	; (8008918 <xTaskIncrementTick+0x168>)
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088ae:	429a      	cmp	r2, r3
 80088b0:	d3b8      	bcc.n	8008824 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80088b2:	2301      	movs	r3, #1
 80088b4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80088b6:	e7b5      	b.n	8008824 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80088b8:	4b17      	ldr	r3, [pc, #92]	; (8008918 <xTaskIncrementTick+0x168>)
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088be:	4915      	ldr	r1, [pc, #84]	; (8008914 <xTaskIncrementTick+0x164>)
 80088c0:	4613      	mov	r3, r2
 80088c2:	009b      	lsls	r3, r3, #2
 80088c4:	4413      	add	r3, r2
 80088c6:	009b      	lsls	r3, r3, #2
 80088c8:	440b      	add	r3, r1
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	2b01      	cmp	r3, #1
 80088ce:	d901      	bls.n	80088d4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80088d0:	2301      	movs	r3, #1
 80088d2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80088d4:	4b11      	ldr	r3, [pc, #68]	; (800891c <xTaskIncrementTick+0x16c>)
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d007      	beq.n	80088ec <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80088dc:	2301      	movs	r3, #1
 80088de:	617b      	str	r3, [r7, #20]
 80088e0:	e004      	b.n	80088ec <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80088e2:	4b0f      	ldr	r3, [pc, #60]	; (8008920 <xTaskIncrementTick+0x170>)
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	3301      	adds	r3, #1
 80088e8:	4a0d      	ldr	r2, [pc, #52]	; (8008920 <xTaskIncrementTick+0x170>)
 80088ea:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80088ec:	697b      	ldr	r3, [r7, #20]
}
 80088ee:	4618      	mov	r0, r3
 80088f0:	3718      	adds	r7, #24
 80088f2:	46bd      	mov	sp, r7
 80088f4:	bd80      	pop	{r7, pc}
 80088f6:	bf00      	nop
 80088f8:	2400054c 	.word	0x2400054c
 80088fc:	24000530 	.word	0x24000530
 8008900:	24000528 	.word	0x24000528
 8008904:	2400052c 	.word	0x2400052c
 8008908:	24000544 	.word	0x24000544
 800890c:	24000548 	.word	0x24000548
 8008910:	24000534 	.word	0x24000534
 8008914:	240000c8 	.word	0x240000c8
 8008918:	240000c4 	.word	0x240000c4
 800891c:	24000540 	.word	0x24000540
 8008920:	2400053c 	.word	0x2400053c

08008924 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008924:	b480      	push	{r7}
 8008926:	b085      	sub	sp, #20
 8008928:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800892a:	4b2a      	ldr	r3, [pc, #168]	; (80089d4 <vTaskSwitchContext+0xb0>)
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	2b00      	cmp	r3, #0
 8008930:	d003      	beq.n	800893a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008932:	4b29      	ldr	r3, [pc, #164]	; (80089d8 <vTaskSwitchContext+0xb4>)
 8008934:	2201      	movs	r2, #1
 8008936:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008938:	e046      	b.n	80089c8 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800893a:	4b27      	ldr	r3, [pc, #156]	; (80089d8 <vTaskSwitchContext+0xb4>)
 800893c:	2200      	movs	r2, #0
 800893e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008940:	4b26      	ldr	r3, [pc, #152]	; (80089dc <vTaskSwitchContext+0xb8>)
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	60fb      	str	r3, [r7, #12]
 8008946:	e010      	b.n	800896a <vTaskSwitchContext+0x46>
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	2b00      	cmp	r3, #0
 800894c:	d10a      	bne.n	8008964 <vTaskSwitchContext+0x40>
	__asm volatile
 800894e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008952:	f383 8811 	msr	BASEPRI, r3
 8008956:	f3bf 8f6f 	isb	sy
 800895a:	f3bf 8f4f 	dsb	sy
 800895e:	607b      	str	r3, [r7, #4]
}
 8008960:	bf00      	nop
 8008962:	e7fe      	b.n	8008962 <vTaskSwitchContext+0x3e>
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	3b01      	subs	r3, #1
 8008968:	60fb      	str	r3, [r7, #12]
 800896a:	491d      	ldr	r1, [pc, #116]	; (80089e0 <vTaskSwitchContext+0xbc>)
 800896c:	68fa      	ldr	r2, [r7, #12]
 800896e:	4613      	mov	r3, r2
 8008970:	009b      	lsls	r3, r3, #2
 8008972:	4413      	add	r3, r2
 8008974:	009b      	lsls	r3, r3, #2
 8008976:	440b      	add	r3, r1
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	2b00      	cmp	r3, #0
 800897c:	d0e4      	beq.n	8008948 <vTaskSwitchContext+0x24>
 800897e:	68fa      	ldr	r2, [r7, #12]
 8008980:	4613      	mov	r3, r2
 8008982:	009b      	lsls	r3, r3, #2
 8008984:	4413      	add	r3, r2
 8008986:	009b      	lsls	r3, r3, #2
 8008988:	4a15      	ldr	r2, [pc, #84]	; (80089e0 <vTaskSwitchContext+0xbc>)
 800898a:	4413      	add	r3, r2
 800898c:	60bb      	str	r3, [r7, #8]
 800898e:	68bb      	ldr	r3, [r7, #8]
 8008990:	685b      	ldr	r3, [r3, #4]
 8008992:	685a      	ldr	r2, [r3, #4]
 8008994:	68bb      	ldr	r3, [r7, #8]
 8008996:	605a      	str	r2, [r3, #4]
 8008998:	68bb      	ldr	r3, [r7, #8]
 800899a:	685a      	ldr	r2, [r3, #4]
 800899c:	68bb      	ldr	r3, [r7, #8]
 800899e:	3308      	adds	r3, #8
 80089a0:	429a      	cmp	r2, r3
 80089a2:	d104      	bne.n	80089ae <vTaskSwitchContext+0x8a>
 80089a4:	68bb      	ldr	r3, [r7, #8]
 80089a6:	685b      	ldr	r3, [r3, #4]
 80089a8:	685a      	ldr	r2, [r3, #4]
 80089aa:	68bb      	ldr	r3, [r7, #8]
 80089ac:	605a      	str	r2, [r3, #4]
 80089ae:	68bb      	ldr	r3, [r7, #8]
 80089b0:	685b      	ldr	r3, [r3, #4]
 80089b2:	68db      	ldr	r3, [r3, #12]
 80089b4:	4a0b      	ldr	r2, [pc, #44]	; (80089e4 <vTaskSwitchContext+0xc0>)
 80089b6:	6013      	str	r3, [r2, #0]
 80089b8:	4a08      	ldr	r2, [pc, #32]	; (80089dc <vTaskSwitchContext+0xb8>)
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80089be:	4b09      	ldr	r3, [pc, #36]	; (80089e4 <vTaskSwitchContext+0xc0>)
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	3354      	adds	r3, #84	; 0x54
 80089c4:	4a08      	ldr	r2, [pc, #32]	; (80089e8 <vTaskSwitchContext+0xc4>)
 80089c6:	6013      	str	r3, [r2, #0]
}
 80089c8:	bf00      	nop
 80089ca:	3714      	adds	r7, #20
 80089cc:	46bd      	mov	sp, r7
 80089ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d2:	4770      	bx	lr
 80089d4:	2400054c 	.word	0x2400054c
 80089d8:	24000540 	.word	0x24000540
 80089dc:	24000534 	.word	0x24000534
 80089e0:	240000c8 	.word	0x240000c8
 80089e4:	240000c4 	.word	0x240000c4
 80089e8:	24000010 	.word	0x24000010

080089ec <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80089ec:	b480      	push	{r7}
 80089ee:	b083      	sub	sp, #12
 80089f0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80089f2:	4b0c      	ldr	r3, [pc, #48]	; (8008a24 <prvResetNextTaskUnblockTime+0x38>)
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d104      	bne.n	8008a06 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80089fc:	4b0a      	ldr	r3, [pc, #40]	; (8008a28 <prvResetNextTaskUnblockTime+0x3c>)
 80089fe:	f04f 32ff 	mov.w	r2, #4294967295
 8008a02:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008a04:	e008      	b.n	8008a18 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008a06:	4b07      	ldr	r3, [pc, #28]	; (8008a24 <prvResetNextTaskUnblockTime+0x38>)
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	68db      	ldr	r3, [r3, #12]
 8008a0c:	68db      	ldr	r3, [r3, #12]
 8008a0e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	685b      	ldr	r3, [r3, #4]
 8008a14:	4a04      	ldr	r2, [pc, #16]	; (8008a28 <prvResetNextTaskUnblockTime+0x3c>)
 8008a16:	6013      	str	r3, [r2, #0]
}
 8008a18:	bf00      	nop
 8008a1a:	370c      	adds	r7, #12
 8008a1c:	46bd      	mov	sp, r7
 8008a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a22:	4770      	bx	lr
 8008a24:	24000528 	.word	0x24000528
 8008a28:	24000548 	.word	0x24000548

08008a2c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008a2c:	b480      	push	{r7}
 8008a2e:	b083      	sub	sp, #12
 8008a30:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008a32:	4b0b      	ldr	r3, [pc, #44]	; (8008a60 <xTaskGetSchedulerState+0x34>)
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d102      	bne.n	8008a40 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008a3a:	2301      	movs	r3, #1
 8008a3c:	607b      	str	r3, [r7, #4]
 8008a3e:	e008      	b.n	8008a52 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008a40:	4b08      	ldr	r3, [pc, #32]	; (8008a64 <xTaskGetSchedulerState+0x38>)
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d102      	bne.n	8008a4e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008a48:	2302      	movs	r3, #2
 8008a4a:	607b      	str	r3, [r7, #4]
 8008a4c:	e001      	b.n	8008a52 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008a4e:	2300      	movs	r3, #0
 8008a50:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008a52:	687b      	ldr	r3, [r7, #4]
	}
 8008a54:	4618      	mov	r0, r3
 8008a56:	370c      	adds	r7, #12
 8008a58:	46bd      	mov	sp, r7
 8008a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a5e:	4770      	bx	lr
 8008a60:	24000538 	.word	0x24000538
 8008a64:	2400054c 	.word	0x2400054c
	...

08008a70 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008a70:	4b07      	ldr	r3, [pc, #28]	; (8008a90 <pxCurrentTCBConst2>)
 8008a72:	6819      	ldr	r1, [r3, #0]
 8008a74:	6808      	ldr	r0, [r1, #0]
 8008a76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a7a:	f380 8809 	msr	PSP, r0
 8008a7e:	f3bf 8f6f 	isb	sy
 8008a82:	f04f 0000 	mov.w	r0, #0
 8008a86:	f380 8811 	msr	BASEPRI, r0
 8008a8a:	4770      	bx	lr
 8008a8c:	f3af 8000 	nop.w

08008a90 <pxCurrentTCBConst2>:
 8008a90:	240000c4 	.word	0x240000c4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008a94:	bf00      	nop
 8008a96:	bf00      	nop
	...

08008aa0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008aa0:	f3ef 8009 	mrs	r0, PSP
 8008aa4:	f3bf 8f6f 	isb	sy
 8008aa8:	4b15      	ldr	r3, [pc, #84]	; (8008b00 <pxCurrentTCBConst>)
 8008aaa:	681a      	ldr	r2, [r3, #0]
 8008aac:	f01e 0f10 	tst.w	lr, #16
 8008ab0:	bf08      	it	eq
 8008ab2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008ab6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008aba:	6010      	str	r0, [r2, #0]
 8008abc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008ac0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008ac4:	f380 8811 	msr	BASEPRI, r0
 8008ac8:	f3bf 8f4f 	dsb	sy
 8008acc:	f3bf 8f6f 	isb	sy
 8008ad0:	f7ff ff28 	bl	8008924 <vTaskSwitchContext>
 8008ad4:	f04f 0000 	mov.w	r0, #0
 8008ad8:	f380 8811 	msr	BASEPRI, r0
 8008adc:	bc09      	pop	{r0, r3}
 8008ade:	6819      	ldr	r1, [r3, #0]
 8008ae0:	6808      	ldr	r0, [r1, #0]
 8008ae2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ae6:	f01e 0f10 	tst.w	lr, #16
 8008aea:	bf08      	it	eq
 8008aec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008af0:	f380 8809 	msr	PSP, r0
 8008af4:	f3bf 8f6f 	isb	sy
 8008af8:	4770      	bx	lr
 8008afa:	bf00      	nop
 8008afc:	f3af 8000 	nop.w

08008b00 <pxCurrentTCBConst>:
 8008b00:	240000c4 	.word	0x240000c4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008b04:	bf00      	nop
 8008b06:	bf00      	nop

08008b08 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008b08:	b580      	push	{r7, lr}
 8008b0a:	b082      	sub	sp, #8
 8008b0c:	af00      	add	r7, sp, #0
	__asm volatile
 8008b0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b12:	f383 8811 	msr	BASEPRI, r3
 8008b16:	f3bf 8f6f 	isb	sy
 8008b1a:	f3bf 8f4f 	dsb	sy
 8008b1e:	607b      	str	r3, [r7, #4]
}
 8008b20:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008b22:	f7ff fe45 	bl	80087b0 <xTaskIncrementTick>
 8008b26:	4603      	mov	r3, r0
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d003      	beq.n	8008b34 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008b2c:	4b06      	ldr	r3, [pc, #24]	; (8008b48 <xPortSysTickHandler+0x40>)
 8008b2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b32:	601a      	str	r2, [r3, #0]
 8008b34:	2300      	movs	r3, #0
 8008b36:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008b38:	683b      	ldr	r3, [r7, #0]
 8008b3a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008b3e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008b40:	bf00      	nop
 8008b42:	3708      	adds	r7, #8
 8008b44:	46bd      	mov	sp, r7
 8008b46:	bd80      	pop	{r7, pc}
 8008b48:	e000ed04 	.word	0xe000ed04

08008b4c <__errno>:
 8008b4c:	4b01      	ldr	r3, [pc, #4]	; (8008b54 <__errno+0x8>)
 8008b4e:	6818      	ldr	r0, [r3, #0]
 8008b50:	4770      	bx	lr
 8008b52:	bf00      	nop
 8008b54:	24000010 	.word	0x24000010

08008b58 <__libc_init_array>:
 8008b58:	b570      	push	{r4, r5, r6, lr}
 8008b5a:	4d0d      	ldr	r5, [pc, #52]	; (8008b90 <__libc_init_array+0x38>)
 8008b5c:	4c0d      	ldr	r4, [pc, #52]	; (8008b94 <__libc_init_array+0x3c>)
 8008b5e:	1b64      	subs	r4, r4, r5
 8008b60:	10a4      	asrs	r4, r4, #2
 8008b62:	2600      	movs	r6, #0
 8008b64:	42a6      	cmp	r6, r4
 8008b66:	d109      	bne.n	8008b7c <__libc_init_array+0x24>
 8008b68:	4d0b      	ldr	r5, [pc, #44]	; (8008b98 <__libc_init_array+0x40>)
 8008b6a:	4c0c      	ldr	r4, [pc, #48]	; (8008b9c <__libc_init_array+0x44>)
 8008b6c:	f000 fc4e 	bl	800940c <_init>
 8008b70:	1b64      	subs	r4, r4, r5
 8008b72:	10a4      	asrs	r4, r4, #2
 8008b74:	2600      	movs	r6, #0
 8008b76:	42a6      	cmp	r6, r4
 8008b78:	d105      	bne.n	8008b86 <__libc_init_array+0x2e>
 8008b7a:	bd70      	pop	{r4, r5, r6, pc}
 8008b7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b80:	4798      	blx	r3
 8008b82:	3601      	adds	r6, #1
 8008b84:	e7ee      	b.n	8008b64 <__libc_init_array+0xc>
 8008b86:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b8a:	4798      	blx	r3
 8008b8c:	3601      	adds	r6, #1
 8008b8e:	e7f2      	b.n	8008b76 <__libc_init_array+0x1e>
 8008b90:	08009540 	.word	0x08009540
 8008b94:	08009540 	.word	0x08009540
 8008b98:	08009540 	.word	0x08009540
 8008b9c:	08009544 	.word	0x08009544

08008ba0 <__retarget_lock_acquire_recursive>:
 8008ba0:	4770      	bx	lr

08008ba2 <__retarget_lock_release_recursive>:
 8008ba2:	4770      	bx	lr

08008ba4 <memcpy>:
 8008ba4:	440a      	add	r2, r1
 8008ba6:	4291      	cmp	r1, r2
 8008ba8:	f100 33ff 	add.w	r3, r0, #4294967295
 8008bac:	d100      	bne.n	8008bb0 <memcpy+0xc>
 8008bae:	4770      	bx	lr
 8008bb0:	b510      	push	{r4, lr}
 8008bb2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008bb6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008bba:	4291      	cmp	r1, r2
 8008bbc:	d1f9      	bne.n	8008bb2 <memcpy+0xe>
 8008bbe:	bd10      	pop	{r4, pc}

08008bc0 <memset>:
 8008bc0:	4402      	add	r2, r0
 8008bc2:	4603      	mov	r3, r0
 8008bc4:	4293      	cmp	r3, r2
 8008bc6:	d100      	bne.n	8008bca <memset+0xa>
 8008bc8:	4770      	bx	lr
 8008bca:	f803 1b01 	strb.w	r1, [r3], #1
 8008bce:	e7f9      	b.n	8008bc4 <memset+0x4>

08008bd0 <_malloc_r>:
 8008bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bd2:	1ccd      	adds	r5, r1, #3
 8008bd4:	f025 0503 	bic.w	r5, r5, #3
 8008bd8:	3508      	adds	r5, #8
 8008bda:	2d0c      	cmp	r5, #12
 8008bdc:	bf38      	it	cc
 8008bde:	250c      	movcc	r5, #12
 8008be0:	2d00      	cmp	r5, #0
 8008be2:	4606      	mov	r6, r0
 8008be4:	db01      	blt.n	8008bea <_malloc_r+0x1a>
 8008be6:	42a9      	cmp	r1, r5
 8008be8:	d903      	bls.n	8008bf2 <_malloc_r+0x22>
 8008bea:	230c      	movs	r3, #12
 8008bec:	6033      	str	r3, [r6, #0]
 8008bee:	2000      	movs	r0, #0
 8008bf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008bf2:	f000 f877 	bl	8008ce4 <__malloc_lock>
 8008bf6:	4921      	ldr	r1, [pc, #132]	; (8008c7c <_malloc_r+0xac>)
 8008bf8:	680a      	ldr	r2, [r1, #0]
 8008bfa:	4614      	mov	r4, r2
 8008bfc:	b99c      	cbnz	r4, 8008c26 <_malloc_r+0x56>
 8008bfe:	4f20      	ldr	r7, [pc, #128]	; (8008c80 <_malloc_r+0xb0>)
 8008c00:	683b      	ldr	r3, [r7, #0]
 8008c02:	b923      	cbnz	r3, 8008c0e <_malloc_r+0x3e>
 8008c04:	4621      	mov	r1, r4
 8008c06:	4630      	mov	r0, r6
 8008c08:	f000 f83c 	bl	8008c84 <_sbrk_r>
 8008c0c:	6038      	str	r0, [r7, #0]
 8008c0e:	4629      	mov	r1, r5
 8008c10:	4630      	mov	r0, r6
 8008c12:	f000 f837 	bl	8008c84 <_sbrk_r>
 8008c16:	1c43      	adds	r3, r0, #1
 8008c18:	d123      	bne.n	8008c62 <_malloc_r+0x92>
 8008c1a:	230c      	movs	r3, #12
 8008c1c:	6033      	str	r3, [r6, #0]
 8008c1e:	4630      	mov	r0, r6
 8008c20:	f000 f866 	bl	8008cf0 <__malloc_unlock>
 8008c24:	e7e3      	b.n	8008bee <_malloc_r+0x1e>
 8008c26:	6823      	ldr	r3, [r4, #0]
 8008c28:	1b5b      	subs	r3, r3, r5
 8008c2a:	d417      	bmi.n	8008c5c <_malloc_r+0x8c>
 8008c2c:	2b0b      	cmp	r3, #11
 8008c2e:	d903      	bls.n	8008c38 <_malloc_r+0x68>
 8008c30:	6023      	str	r3, [r4, #0]
 8008c32:	441c      	add	r4, r3
 8008c34:	6025      	str	r5, [r4, #0]
 8008c36:	e004      	b.n	8008c42 <_malloc_r+0x72>
 8008c38:	6863      	ldr	r3, [r4, #4]
 8008c3a:	42a2      	cmp	r2, r4
 8008c3c:	bf0c      	ite	eq
 8008c3e:	600b      	streq	r3, [r1, #0]
 8008c40:	6053      	strne	r3, [r2, #4]
 8008c42:	4630      	mov	r0, r6
 8008c44:	f000 f854 	bl	8008cf0 <__malloc_unlock>
 8008c48:	f104 000b 	add.w	r0, r4, #11
 8008c4c:	1d23      	adds	r3, r4, #4
 8008c4e:	f020 0007 	bic.w	r0, r0, #7
 8008c52:	1ac2      	subs	r2, r0, r3
 8008c54:	d0cc      	beq.n	8008bf0 <_malloc_r+0x20>
 8008c56:	1a1b      	subs	r3, r3, r0
 8008c58:	50a3      	str	r3, [r4, r2]
 8008c5a:	e7c9      	b.n	8008bf0 <_malloc_r+0x20>
 8008c5c:	4622      	mov	r2, r4
 8008c5e:	6864      	ldr	r4, [r4, #4]
 8008c60:	e7cc      	b.n	8008bfc <_malloc_r+0x2c>
 8008c62:	1cc4      	adds	r4, r0, #3
 8008c64:	f024 0403 	bic.w	r4, r4, #3
 8008c68:	42a0      	cmp	r0, r4
 8008c6a:	d0e3      	beq.n	8008c34 <_malloc_r+0x64>
 8008c6c:	1a21      	subs	r1, r4, r0
 8008c6e:	4630      	mov	r0, r6
 8008c70:	f000 f808 	bl	8008c84 <_sbrk_r>
 8008c74:	3001      	adds	r0, #1
 8008c76:	d1dd      	bne.n	8008c34 <_malloc_r+0x64>
 8008c78:	e7cf      	b.n	8008c1a <_malloc_r+0x4a>
 8008c7a:	bf00      	nop
 8008c7c:	24000550 	.word	0x24000550
 8008c80:	24000554 	.word	0x24000554

08008c84 <_sbrk_r>:
 8008c84:	b538      	push	{r3, r4, r5, lr}
 8008c86:	4d06      	ldr	r5, [pc, #24]	; (8008ca0 <_sbrk_r+0x1c>)
 8008c88:	2300      	movs	r3, #0
 8008c8a:	4604      	mov	r4, r0
 8008c8c:	4608      	mov	r0, r1
 8008c8e:	602b      	str	r3, [r5, #0]
 8008c90:	f7f8 fb08 	bl	80012a4 <_sbrk>
 8008c94:	1c43      	adds	r3, r0, #1
 8008c96:	d102      	bne.n	8008c9e <_sbrk_r+0x1a>
 8008c98:	682b      	ldr	r3, [r5, #0]
 8008c9a:	b103      	cbz	r3, 8008c9e <_sbrk_r+0x1a>
 8008c9c:	6023      	str	r3, [r4, #0]
 8008c9e:	bd38      	pop	{r3, r4, r5, pc}
 8008ca0:	240007b8 	.word	0x240007b8

08008ca4 <siprintf>:
 8008ca4:	b40e      	push	{r1, r2, r3}
 8008ca6:	b500      	push	{lr}
 8008ca8:	b09c      	sub	sp, #112	; 0x70
 8008caa:	ab1d      	add	r3, sp, #116	; 0x74
 8008cac:	9002      	str	r0, [sp, #8]
 8008cae:	9006      	str	r0, [sp, #24]
 8008cb0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008cb4:	4809      	ldr	r0, [pc, #36]	; (8008cdc <siprintf+0x38>)
 8008cb6:	9107      	str	r1, [sp, #28]
 8008cb8:	9104      	str	r1, [sp, #16]
 8008cba:	4909      	ldr	r1, [pc, #36]	; (8008ce0 <siprintf+0x3c>)
 8008cbc:	f853 2b04 	ldr.w	r2, [r3], #4
 8008cc0:	9105      	str	r1, [sp, #20]
 8008cc2:	6800      	ldr	r0, [r0, #0]
 8008cc4:	9301      	str	r3, [sp, #4]
 8008cc6:	a902      	add	r1, sp, #8
 8008cc8:	f000 f8c4 	bl	8008e54 <_svfiprintf_r>
 8008ccc:	9b02      	ldr	r3, [sp, #8]
 8008cce:	2200      	movs	r2, #0
 8008cd0:	701a      	strb	r2, [r3, #0]
 8008cd2:	b01c      	add	sp, #112	; 0x70
 8008cd4:	f85d eb04 	ldr.w	lr, [sp], #4
 8008cd8:	b003      	add	sp, #12
 8008cda:	4770      	bx	lr
 8008cdc:	24000010 	.word	0x24000010
 8008ce0:	ffff0208 	.word	0xffff0208

08008ce4 <__malloc_lock>:
 8008ce4:	4801      	ldr	r0, [pc, #4]	; (8008cec <__malloc_lock+0x8>)
 8008ce6:	f7ff bf5b 	b.w	8008ba0 <__retarget_lock_acquire_recursive>
 8008cea:	bf00      	nop
 8008cec:	240007b0 	.word	0x240007b0

08008cf0 <__malloc_unlock>:
 8008cf0:	4801      	ldr	r0, [pc, #4]	; (8008cf8 <__malloc_unlock+0x8>)
 8008cf2:	f7ff bf56 	b.w	8008ba2 <__retarget_lock_release_recursive>
 8008cf6:	bf00      	nop
 8008cf8:	240007b0 	.word	0x240007b0

08008cfc <_free_r>:
 8008cfc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008cfe:	2900      	cmp	r1, #0
 8008d00:	d048      	beq.n	8008d94 <_free_r+0x98>
 8008d02:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008d06:	9001      	str	r0, [sp, #4]
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	f1a1 0404 	sub.w	r4, r1, #4
 8008d0e:	bfb8      	it	lt
 8008d10:	18e4      	addlt	r4, r4, r3
 8008d12:	f7ff ffe7 	bl	8008ce4 <__malloc_lock>
 8008d16:	4a20      	ldr	r2, [pc, #128]	; (8008d98 <_free_r+0x9c>)
 8008d18:	9801      	ldr	r0, [sp, #4]
 8008d1a:	6813      	ldr	r3, [r2, #0]
 8008d1c:	4615      	mov	r5, r2
 8008d1e:	b933      	cbnz	r3, 8008d2e <_free_r+0x32>
 8008d20:	6063      	str	r3, [r4, #4]
 8008d22:	6014      	str	r4, [r2, #0]
 8008d24:	b003      	add	sp, #12
 8008d26:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008d2a:	f7ff bfe1 	b.w	8008cf0 <__malloc_unlock>
 8008d2e:	42a3      	cmp	r3, r4
 8008d30:	d90b      	bls.n	8008d4a <_free_r+0x4e>
 8008d32:	6821      	ldr	r1, [r4, #0]
 8008d34:	1862      	adds	r2, r4, r1
 8008d36:	4293      	cmp	r3, r2
 8008d38:	bf04      	itt	eq
 8008d3a:	681a      	ldreq	r2, [r3, #0]
 8008d3c:	685b      	ldreq	r3, [r3, #4]
 8008d3e:	6063      	str	r3, [r4, #4]
 8008d40:	bf04      	itt	eq
 8008d42:	1852      	addeq	r2, r2, r1
 8008d44:	6022      	streq	r2, [r4, #0]
 8008d46:	602c      	str	r4, [r5, #0]
 8008d48:	e7ec      	b.n	8008d24 <_free_r+0x28>
 8008d4a:	461a      	mov	r2, r3
 8008d4c:	685b      	ldr	r3, [r3, #4]
 8008d4e:	b10b      	cbz	r3, 8008d54 <_free_r+0x58>
 8008d50:	42a3      	cmp	r3, r4
 8008d52:	d9fa      	bls.n	8008d4a <_free_r+0x4e>
 8008d54:	6811      	ldr	r1, [r2, #0]
 8008d56:	1855      	adds	r5, r2, r1
 8008d58:	42a5      	cmp	r5, r4
 8008d5a:	d10b      	bne.n	8008d74 <_free_r+0x78>
 8008d5c:	6824      	ldr	r4, [r4, #0]
 8008d5e:	4421      	add	r1, r4
 8008d60:	1854      	adds	r4, r2, r1
 8008d62:	42a3      	cmp	r3, r4
 8008d64:	6011      	str	r1, [r2, #0]
 8008d66:	d1dd      	bne.n	8008d24 <_free_r+0x28>
 8008d68:	681c      	ldr	r4, [r3, #0]
 8008d6a:	685b      	ldr	r3, [r3, #4]
 8008d6c:	6053      	str	r3, [r2, #4]
 8008d6e:	4421      	add	r1, r4
 8008d70:	6011      	str	r1, [r2, #0]
 8008d72:	e7d7      	b.n	8008d24 <_free_r+0x28>
 8008d74:	d902      	bls.n	8008d7c <_free_r+0x80>
 8008d76:	230c      	movs	r3, #12
 8008d78:	6003      	str	r3, [r0, #0]
 8008d7a:	e7d3      	b.n	8008d24 <_free_r+0x28>
 8008d7c:	6825      	ldr	r5, [r4, #0]
 8008d7e:	1961      	adds	r1, r4, r5
 8008d80:	428b      	cmp	r3, r1
 8008d82:	bf04      	itt	eq
 8008d84:	6819      	ldreq	r1, [r3, #0]
 8008d86:	685b      	ldreq	r3, [r3, #4]
 8008d88:	6063      	str	r3, [r4, #4]
 8008d8a:	bf04      	itt	eq
 8008d8c:	1949      	addeq	r1, r1, r5
 8008d8e:	6021      	streq	r1, [r4, #0]
 8008d90:	6054      	str	r4, [r2, #4]
 8008d92:	e7c7      	b.n	8008d24 <_free_r+0x28>
 8008d94:	b003      	add	sp, #12
 8008d96:	bd30      	pop	{r4, r5, pc}
 8008d98:	24000550 	.word	0x24000550

08008d9c <__ssputs_r>:
 8008d9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008da0:	688e      	ldr	r6, [r1, #8]
 8008da2:	429e      	cmp	r6, r3
 8008da4:	4682      	mov	sl, r0
 8008da6:	460c      	mov	r4, r1
 8008da8:	4690      	mov	r8, r2
 8008daa:	461f      	mov	r7, r3
 8008dac:	d838      	bhi.n	8008e20 <__ssputs_r+0x84>
 8008dae:	898a      	ldrh	r2, [r1, #12]
 8008db0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008db4:	d032      	beq.n	8008e1c <__ssputs_r+0x80>
 8008db6:	6825      	ldr	r5, [r4, #0]
 8008db8:	6909      	ldr	r1, [r1, #16]
 8008dba:	eba5 0901 	sub.w	r9, r5, r1
 8008dbe:	6965      	ldr	r5, [r4, #20]
 8008dc0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008dc4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008dc8:	3301      	adds	r3, #1
 8008dca:	444b      	add	r3, r9
 8008dcc:	106d      	asrs	r5, r5, #1
 8008dce:	429d      	cmp	r5, r3
 8008dd0:	bf38      	it	cc
 8008dd2:	461d      	movcc	r5, r3
 8008dd4:	0553      	lsls	r3, r2, #21
 8008dd6:	d531      	bpl.n	8008e3c <__ssputs_r+0xa0>
 8008dd8:	4629      	mov	r1, r5
 8008dda:	f7ff fef9 	bl	8008bd0 <_malloc_r>
 8008dde:	4606      	mov	r6, r0
 8008de0:	b950      	cbnz	r0, 8008df8 <__ssputs_r+0x5c>
 8008de2:	230c      	movs	r3, #12
 8008de4:	f8ca 3000 	str.w	r3, [sl]
 8008de8:	89a3      	ldrh	r3, [r4, #12]
 8008dea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008dee:	81a3      	strh	r3, [r4, #12]
 8008df0:	f04f 30ff 	mov.w	r0, #4294967295
 8008df4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008df8:	6921      	ldr	r1, [r4, #16]
 8008dfa:	464a      	mov	r2, r9
 8008dfc:	f7ff fed2 	bl	8008ba4 <memcpy>
 8008e00:	89a3      	ldrh	r3, [r4, #12]
 8008e02:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008e06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e0a:	81a3      	strh	r3, [r4, #12]
 8008e0c:	6126      	str	r6, [r4, #16]
 8008e0e:	6165      	str	r5, [r4, #20]
 8008e10:	444e      	add	r6, r9
 8008e12:	eba5 0509 	sub.w	r5, r5, r9
 8008e16:	6026      	str	r6, [r4, #0]
 8008e18:	60a5      	str	r5, [r4, #8]
 8008e1a:	463e      	mov	r6, r7
 8008e1c:	42be      	cmp	r6, r7
 8008e1e:	d900      	bls.n	8008e22 <__ssputs_r+0x86>
 8008e20:	463e      	mov	r6, r7
 8008e22:	4632      	mov	r2, r6
 8008e24:	6820      	ldr	r0, [r4, #0]
 8008e26:	4641      	mov	r1, r8
 8008e28:	f000 faa8 	bl	800937c <memmove>
 8008e2c:	68a3      	ldr	r3, [r4, #8]
 8008e2e:	6822      	ldr	r2, [r4, #0]
 8008e30:	1b9b      	subs	r3, r3, r6
 8008e32:	4432      	add	r2, r6
 8008e34:	60a3      	str	r3, [r4, #8]
 8008e36:	6022      	str	r2, [r4, #0]
 8008e38:	2000      	movs	r0, #0
 8008e3a:	e7db      	b.n	8008df4 <__ssputs_r+0x58>
 8008e3c:	462a      	mov	r2, r5
 8008e3e:	f000 fab7 	bl	80093b0 <_realloc_r>
 8008e42:	4606      	mov	r6, r0
 8008e44:	2800      	cmp	r0, #0
 8008e46:	d1e1      	bne.n	8008e0c <__ssputs_r+0x70>
 8008e48:	6921      	ldr	r1, [r4, #16]
 8008e4a:	4650      	mov	r0, sl
 8008e4c:	f7ff ff56 	bl	8008cfc <_free_r>
 8008e50:	e7c7      	b.n	8008de2 <__ssputs_r+0x46>
	...

08008e54 <_svfiprintf_r>:
 8008e54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e58:	4698      	mov	r8, r3
 8008e5a:	898b      	ldrh	r3, [r1, #12]
 8008e5c:	061b      	lsls	r3, r3, #24
 8008e5e:	b09d      	sub	sp, #116	; 0x74
 8008e60:	4607      	mov	r7, r0
 8008e62:	460d      	mov	r5, r1
 8008e64:	4614      	mov	r4, r2
 8008e66:	d50e      	bpl.n	8008e86 <_svfiprintf_r+0x32>
 8008e68:	690b      	ldr	r3, [r1, #16]
 8008e6a:	b963      	cbnz	r3, 8008e86 <_svfiprintf_r+0x32>
 8008e6c:	2140      	movs	r1, #64	; 0x40
 8008e6e:	f7ff feaf 	bl	8008bd0 <_malloc_r>
 8008e72:	6028      	str	r0, [r5, #0]
 8008e74:	6128      	str	r0, [r5, #16]
 8008e76:	b920      	cbnz	r0, 8008e82 <_svfiprintf_r+0x2e>
 8008e78:	230c      	movs	r3, #12
 8008e7a:	603b      	str	r3, [r7, #0]
 8008e7c:	f04f 30ff 	mov.w	r0, #4294967295
 8008e80:	e0d1      	b.n	8009026 <_svfiprintf_r+0x1d2>
 8008e82:	2340      	movs	r3, #64	; 0x40
 8008e84:	616b      	str	r3, [r5, #20]
 8008e86:	2300      	movs	r3, #0
 8008e88:	9309      	str	r3, [sp, #36]	; 0x24
 8008e8a:	2320      	movs	r3, #32
 8008e8c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008e90:	f8cd 800c 	str.w	r8, [sp, #12]
 8008e94:	2330      	movs	r3, #48	; 0x30
 8008e96:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009040 <_svfiprintf_r+0x1ec>
 8008e9a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008e9e:	f04f 0901 	mov.w	r9, #1
 8008ea2:	4623      	mov	r3, r4
 8008ea4:	469a      	mov	sl, r3
 8008ea6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008eaa:	b10a      	cbz	r2, 8008eb0 <_svfiprintf_r+0x5c>
 8008eac:	2a25      	cmp	r2, #37	; 0x25
 8008eae:	d1f9      	bne.n	8008ea4 <_svfiprintf_r+0x50>
 8008eb0:	ebba 0b04 	subs.w	fp, sl, r4
 8008eb4:	d00b      	beq.n	8008ece <_svfiprintf_r+0x7a>
 8008eb6:	465b      	mov	r3, fp
 8008eb8:	4622      	mov	r2, r4
 8008eba:	4629      	mov	r1, r5
 8008ebc:	4638      	mov	r0, r7
 8008ebe:	f7ff ff6d 	bl	8008d9c <__ssputs_r>
 8008ec2:	3001      	adds	r0, #1
 8008ec4:	f000 80aa 	beq.w	800901c <_svfiprintf_r+0x1c8>
 8008ec8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008eca:	445a      	add	r2, fp
 8008ecc:	9209      	str	r2, [sp, #36]	; 0x24
 8008ece:	f89a 3000 	ldrb.w	r3, [sl]
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	f000 80a2 	beq.w	800901c <_svfiprintf_r+0x1c8>
 8008ed8:	2300      	movs	r3, #0
 8008eda:	f04f 32ff 	mov.w	r2, #4294967295
 8008ede:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008ee2:	f10a 0a01 	add.w	sl, sl, #1
 8008ee6:	9304      	str	r3, [sp, #16]
 8008ee8:	9307      	str	r3, [sp, #28]
 8008eea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008eee:	931a      	str	r3, [sp, #104]	; 0x68
 8008ef0:	4654      	mov	r4, sl
 8008ef2:	2205      	movs	r2, #5
 8008ef4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ef8:	4851      	ldr	r0, [pc, #324]	; (8009040 <_svfiprintf_r+0x1ec>)
 8008efa:	f7f7 f9f9 	bl	80002f0 <memchr>
 8008efe:	9a04      	ldr	r2, [sp, #16]
 8008f00:	b9d8      	cbnz	r0, 8008f3a <_svfiprintf_r+0xe6>
 8008f02:	06d0      	lsls	r0, r2, #27
 8008f04:	bf44      	itt	mi
 8008f06:	2320      	movmi	r3, #32
 8008f08:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008f0c:	0711      	lsls	r1, r2, #28
 8008f0e:	bf44      	itt	mi
 8008f10:	232b      	movmi	r3, #43	; 0x2b
 8008f12:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008f16:	f89a 3000 	ldrb.w	r3, [sl]
 8008f1a:	2b2a      	cmp	r3, #42	; 0x2a
 8008f1c:	d015      	beq.n	8008f4a <_svfiprintf_r+0xf6>
 8008f1e:	9a07      	ldr	r2, [sp, #28]
 8008f20:	4654      	mov	r4, sl
 8008f22:	2000      	movs	r0, #0
 8008f24:	f04f 0c0a 	mov.w	ip, #10
 8008f28:	4621      	mov	r1, r4
 8008f2a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008f2e:	3b30      	subs	r3, #48	; 0x30
 8008f30:	2b09      	cmp	r3, #9
 8008f32:	d94e      	bls.n	8008fd2 <_svfiprintf_r+0x17e>
 8008f34:	b1b0      	cbz	r0, 8008f64 <_svfiprintf_r+0x110>
 8008f36:	9207      	str	r2, [sp, #28]
 8008f38:	e014      	b.n	8008f64 <_svfiprintf_r+0x110>
 8008f3a:	eba0 0308 	sub.w	r3, r0, r8
 8008f3e:	fa09 f303 	lsl.w	r3, r9, r3
 8008f42:	4313      	orrs	r3, r2
 8008f44:	9304      	str	r3, [sp, #16]
 8008f46:	46a2      	mov	sl, r4
 8008f48:	e7d2      	b.n	8008ef0 <_svfiprintf_r+0x9c>
 8008f4a:	9b03      	ldr	r3, [sp, #12]
 8008f4c:	1d19      	adds	r1, r3, #4
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	9103      	str	r1, [sp, #12]
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	bfbb      	ittet	lt
 8008f56:	425b      	neglt	r3, r3
 8008f58:	f042 0202 	orrlt.w	r2, r2, #2
 8008f5c:	9307      	strge	r3, [sp, #28]
 8008f5e:	9307      	strlt	r3, [sp, #28]
 8008f60:	bfb8      	it	lt
 8008f62:	9204      	strlt	r2, [sp, #16]
 8008f64:	7823      	ldrb	r3, [r4, #0]
 8008f66:	2b2e      	cmp	r3, #46	; 0x2e
 8008f68:	d10c      	bne.n	8008f84 <_svfiprintf_r+0x130>
 8008f6a:	7863      	ldrb	r3, [r4, #1]
 8008f6c:	2b2a      	cmp	r3, #42	; 0x2a
 8008f6e:	d135      	bne.n	8008fdc <_svfiprintf_r+0x188>
 8008f70:	9b03      	ldr	r3, [sp, #12]
 8008f72:	1d1a      	adds	r2, r3, #4
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	9203      	str	r2, [sp, #12]
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	bfb8      	it	lt
 8008f7c:	f04f 33ff 	movlt.w	r3, #4294967295
 8008f80:	3402      	adds	r4, #2
 8008f82:	9305      	str	r3, [sp, #20]
 8008f84:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009050 <_svfiprintf_r+0x1fc>
 8008f88:	7821      	ldrb	r1, [r4, #0]
 8008f8a:	2203      	movs	r2, #3
 8008f8c:	4650      	mov	r0, sl
 8008f8e:	f7f7 f9af 	bl	80002f0 <memchr>
 8008f92:	b140      	cbz	r0, 8008fa6 <_svfiprintf_r+0x152>
 8008f94:	2340      	movs	r3, #64	; 0x40
 8008f96:	eba0 000a 	sub.w	r0, r0, sl
 8008f9a:	fa03 f000 	lsl.w	r0, r3, r0
 8008f9e:	9b04      	ldr	r3, [sp, #16]
 8008fa0:	4303      	orrs	r3, r0
 8008fa2:	3401      	adds	r4, #1
 8008fa4:	9304      	str	r3, [sp, #16]
 8008fa6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008faa:	4826      	ldr	r0, [pc, #152]	; (8009044 <_svfiprintf_r+0x1f0>)
 8008fac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008fb0:	2206      	movs	r2, #6
 8008fb2:	f7f7 f99d 	bl	80002f0 <memchr>
 8008fb6:	2800      	cmp	r0, #0
 8008fb8:	d038      	beq.n	800902c <_svfiprintf_r+0x1d8>
 8008fba:	4b23      	ldr	r3, [pc, #140]	; (8009048 <_svfiprintf_r+0x1f4>)
 8008fbc:	bb1b      	cbnz	r3, 8009006 <_svfiprintf_r+0x1b2>
 8008fbe:	9b03      	ldr	r3, [sp, #12]
 8008fc0:	3307      	adds	r3, #7
 8008fc2:	f023 0307 	bic.w	r3, r3, #7
 8008fc6:	3308      	adds	r3, #8
 8008fc8:	9303      	str	r3, [sp, #12]
 8008fca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008fcc:	4433      	add	r3, r6
 8008fce:	9309      	str	r3, [sp, #36]	; 0x24
 8008fd0:	e767      	b.n	8008ea2 <_svfiprintf_r+0x4e>
 8008fd2:	fb0c 3202 	mla	r2, ip, r2, r3
 8008fd6:	460c      	mov	r4, r1
 8008fd8:	2001      	movs	r0, #1
 8008fda:	e7a5      	b.n	8008f28 <_svfiprintf_r+0xd4>
 8008fdc:	2300      	movs	r3, #0
 8008fde:	3401      	adds	r4, #1
 8008fe0:	9305      	str	r3, [sp, #20]
 8008fe2:	4619      	mov	r1, r3
 8008fe4:	f04f 0c0a 	mov.w	ip, #10
 8008fe8:	4620      	mov	r0, r4
 8008fea:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008fee:	3a30      	subs	r2, #48	; 0x30
 8008ff0:	2a09      	cmp	r2, #9
 8008ff2:	d903      	bls.n	8008ffc <_svfiprintf_r+0x1a8>
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d0c5      	beq.n	8008f84 <_svfiprintf_r+0x130>
 8008ff8:	9105      	str	r1, [sp, #20]
 8008ffa:	e7c3      	b.n	8008f84 <_svfiprintf_r+0x130>
 8008ffc:	fb0c 2101 	mla	r1, ip, r1, r2
 8009000:	4604      	mov	r4, r0
 8009002:	2301      	movs	r3, #1
 8009004:	e7f0      	b.n	8008fe8 <_svfiprintf_r+0x194>
 8009006:	ab03      	add	r3, sp, #12
 8009008:	9300      	str	r3, [sp, #0]
 800900a:	462a      	mov	r2, r5
 800900c:	4b0f      	ldr	r3, [pc, #60]	; (800904c <_svfiprintf_r+0x1f8>)
 800900e:	a904      	add	r1, sp, #16
 8009010:	4638      	mov	r0, r7
 8009012:	f3af 8000 	nop.w
 8009016:	1c42      	adds	r2, r0, #1
 8009018:	4606      	mov	r6, r0
 800901a:	d1d6      	bne.n	8008fca <_svfiprintf_r+0x176>
 800901c:	89ab      	ldrh	r3, [r5, #12]
 800901e:	065b      	lsls	r3, r3, #25
 8009020:	f53f af2c 	bmi.w	8008e7c <_svfiprintf_r+0x28>
 8009024:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009026:	b01d      	add	sp, #116	; 0x74
 8009028:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800902c:	ab03      	add	r3, sp, #12
 800902e:	9300      	str	r3, [sp, #0]
 8009030:	462a      	mov	r2, r5
 8009032:	4b06      	ldr	r3, [pc, #24]	; (800904c <_svfiprintf_r+0x1f8>)
 8009034:	a904      	add	r1, sp, #16
 8009036:	4638      	mov	r0, r7
 8009038:	f000 f87a 	bl	8009130 <_printf_i>
 800903c:	e7eb      	b.n	8009016 <_svfiprintf_r+0x1c2>
 800903e:	bf00      	nop
 8009040:	0800950c 	.word	0x0800950c
 8009044:	08009516 	.word	0x08009516
 8009048:	00000000 	.word	0x00000000
 800904c:	08008d9d 	.word	0x08008d9d
 8009050:	08009512 	.word	0x08009512

08009054 <_printf_common>:
 8009054:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009058:	4616      	mov	r6, r2
 800905a:	4699      	mov	r9, r3
 800905c:	688a      	ldr	r2, [r1, #8]
 800905e:	690b      	ldr	r3, [r1, #16]
 8009060:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009064:	4293      	cmp	r3, r2
 8009066:	bfb8      	it	lt
 8009068:	4613      	movlt	r3, r2
 800906a:	6033      	str	r3, [r6, #0]
 800906c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009070:	4607      	mov	r7, r0
 8009072:	460c      	mov	r4, r1
 8009074:	b10a      	cbz	r2, 800907a <_printf_common+0x26>
 8009076:	3301      	adds	r3, #1
 8009078:	6033      	str	r3, [r6, #0]
 800907a:	6823      	ldr	r3, [r4, #0]
 800907c:	0699      	lsls	r1, r3, #26
 800907e:	bf42      	ittt	mi
 8009080:	6833      	ldrmi	r3, [r6, #0]
 8009082:	3302      	addmi	r3, #2
 8009084:	6033      	strmi	r3, [r6, #0]
 8009086:	6825      	ldr	r5, [r4, #0]
 8009088:	f015 0506 	ands.w	r5, r5, #6
 800908c:	d106      	bne.n	800909c <_printf_common+0x48>
 800908e:	f104 0a19 	add.w	sl, r4, #25
 8009092:	68e3      	ldr	r3, [r4, #12]
 8009094:	6832      	ldr	r2, [r6, #0]
 8009096:	1a9b      	subs	r3, r3, r2
 8009098:	42ab      	cmp	r3, r5
 800909a:	dc26      	bgt.n	80090ea <_printf_common+0x96>
 800909c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80090a0:	1e13      	subs	r3, r2, #0
 80090a2:	6822      	ldr	r2, [r4, #0]
 80090a4:	bf18      	it	ne
 80090a6:	2301      	movne	r3, #1
 80090a8:	0692      	lsls	r2, r2, #26
 80090aa:	d42b      	bmi.n	8009104 <_printf_common+0xb0>
 80090ac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80090b0:	4649      	mov	r1, r9
 80090b2:	4638      	mov	r0, r7
 80090b4:	47c0      	blx	r8
 80090b6:	3001      	adds	r0, #1
 80090b8:	d01e      	beq.n	80090f8 <_printf_common+0xa4>
 80090ba:	6823      	ldr	r3, [r4, #0]
 80090bc:	68e5      	ldr	r5, [r4, #12]
 80090be:	6832      	ldr	r2, [r6, #0]
 80090c0:	f003 0306 	and.w	r3, r3, #6
 80090c4:	2b04      	cmp	r3, #4
 80090c6:	bf08      	it	eq
 80090c8:	1aad      	subeq	r5, r5, r2
 80090ca:	68a3      	ldr	r3, [r4, #8]
 80090cc:	6922      	ldr	r2, [r4, #16]
 80090ce:	bf0c      	ite	eq
 80090d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80090d4:	2500      	movne	r5, #0
 80090d6:	4293      	cmp	r3, r2
 80090d8:	bfc4      	itt	gt
 80090da:	1a9b      	subgt	r3, r3, r2
 80090dc:	18ed      	addgt	r5, r5, r3
 80090de:	2600      	movs	r6, #0
 80090e0:	341a      	adds	r4, #26
 80090e2:	42b5      	cmp	r5, r6
 80090e4:	d11a      	bne.n	800911c <_printf_common+0xc8>
 80090e6:	2000      	movs	r0, #0
 80090e8:	e008      	b.n	80090fc <_printf_common+0xa8>
 80090ea:	2301      	movs	r3, #1
 80090ec:	4652      	mov	r2, sl
 80090ee:	4649      	mov	r1, r9
 80090f0:	4638      	mov	r0, r7
 80090f2:	47c0      	blx	r8
 80090f4:	3001      	adds	r0, #1
 80090f6:	d103      	bne.n	8009100 <_printf_common+0xac>
 80090f8:	f04f 30ff 	mov.w	r0, #4294967295
 80090fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009100:	3501      	adds	r5, #1
 8009102:	e7c6      	b.n	8009092 <_printf_common+0x3e>
 8009104:	18e1      	adds	r1, r4, r3
 8009106:	1c5a      	adds	r2, r3, #1
 8009108:	2030      	movs	r0, #48	; 0x30
 800910a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800910e:	4422      	add	r2, r4
 8009110:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009114:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009118:	3302      	adds	r3, #2
 800911a:	e7c7      	b.n	80090ac <_printf_common+0x58>
 800911c:	2301      	movs	r3, #1
 800911e:	4622      	mov	r2, r4
 8009120:	4649      	mov	r1, r9
 8009122:	4638      	mov	r0, r7
 8009124:	47c0      	blx	r8
 8009126:	3001      	adds	r0, #1
 8009128:	d0e6      	beq.n	80090f8 <_printf_common+0xa4>
 800912a:	3601      	adds	r6, #1
 800912c:	e7d9      	b.n	80090e2 <_printf_common+0x8e>
	...

08009130 <_printf_i>:
 8009130:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009134:	460c      	mov	r4, r1
 8009136:	4691      	mov	r9, r2
 8009138:	7e27      	ldrb	r7, [r4, #24]
 800913a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800913c:	2f78      	cmp	r7, #120	; 0x78
 800913e:	4680      	mov	r8, r0
 8009140:	469a      	mov	sl, r3
 8009142:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009146:	d807      	bhi.n	8009158 <_printf_i+0x28>
 8009148:	2f62      	cmp	r7, #98	; 0x62
 800914a:	d80a      	bhi.n	8009162 <_printf_i+0x32>
 800914c:	2f00      	cmp	r7, #0
 800914e:	f000 80d8 	beq.w	8009302 <_printf_i+0x1d2>
 8009152:	2f58      	cmp	r7, #88	; 0x58
 8009154:	f000 80a3 	beq.w	800929e <_printf_i+0x16e>
 8009158:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800915c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009160:	e03a      	b.n	80091d8 <_printf_i+0xa8>
 8009162:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009166:	2b15      	cmp	r3, #21
 8009168:	d8f6      	bhi.n	8009158 <_printf_i+0x28>
 800916a:	a001      	add	r0, pc, #4	; (adr r0, 8009170 <_printf_i+0x40>)
 800916c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009170:	080091c9 	.word	0x080091c9
 8009174:	080091dd 	.word	0x080091dd
 8009178:	08009159 	.word	0x08009159
 800917c:	08009159 	.word	0x08009159
 8009180:	08009159 	.word	0x08009159
 8009184:	08009159 	.word	0x08009159
 8009188:	080091dd 	.word	0x080091dd
 800918c:	08009159 	.word	0x08009159
 8009190:	08009159 	.word	0x08009159
 8009194:	08009159 	.word	0x08009159
 8009198:	08009159 	.word	0x08009159
 800919c:	080092e9 	.word	0x080092e9
 80091a0:	0800920d 	.word	0x0800920d
 80091a4:	080092cb 	.word	0x080092cb
 80091a8:	08009159 	.word	0x08009159
 80091ac:	08009159 	.word	0x08009159
 80091b0:	0800930b 	.word	0x0800930b
 80091b4:	08009159 	.word	0x08009159
 80091b8:	0800920d 	.word	0x0800920d
 80091bc:	08009159 	.word	0x08009159
 80091c0:	08009159 	.word	0x08009159
 80091c4:	080092d3 	.word	0x080092d3
 80091c8:	680b      	ldr	r3, [r1, #0]
 80091ca:	1d1a      	adds	r2, r3, #4
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	600a      	str	r2, [r1, #0]
 80091d0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80091d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80091d8:	2301      	movs	r3, #1
 80091da:	e0a3      	b.n	8009324 <_printf_i+0x1f4>
 80091dc:	6825      	ldr	r5, [r4, #0]
 80091de:	6808      	ldr	r0, [r1, #0]
 80091e0:	062e      	lsls	r6, r5, #24
 80091e2:	f100 0304 	add.w	r3, r0, #4
 80091e6:	d50a      	bpl.n	80091fe <_printf_i+0xce>
 80091e8:	6805      	ldr	r5, [r0, #0]
 80091ea:	600b      	str	r3, [r1, #0]
 80091ec:	2d00      	cmp	r5, #0
 80091ee:	da03      	bge.n	80091f8 <_printf_i+0xc8>
 80091f0:	232d      	movs	r3, #45	; 0x2d
 80091f2:	426d      	negs	r5, r5
 80091f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80091f8:	485e      	ldr	r0, [pc, #376]	; (8009374 <_printf_i+0x244>)
 80091fa:	230a      	movs	r3, #10
 80091fc:	e019      	b.n	8009232 <_printf_i+0x102>
 80091fe:	f015 0f40 	tst.w	r5, #64	; 0x40
 8009202:	6805      	ldr	r5, [r0, #0]
 8009204:	600b      	str	r3, [r1, #0]
 8009206:	bf18      	it	ne
 8009208:	b22d      	sxthne	r5, r5
 800920a:	e7ef      	b.n	80091ec <_printf_i+0xbc>
 800920c:	680b      	ldr	r3, [r1, #0]
 800920e:	6825      	ldr	r5, [r4, #0]
 8009210:	1d18      	adds	r0, r3, #4
 8009212:	6008      	str	r0, [r1, #0]
 8009214:	0628      	lsls	r0, r5, #24
 8009216:	d501      	bpl.n	800921c <_printf_i+0xec>
 8009218:	681d      	ldr	r5, [r3, #0]
 800921a:	e002      	b.n	8009222 <_printf_i+0xf2>
 800921c:	0669      	lsls	r1, r5, #25
 800921e:	d5fb      	bpl.n	8009218 <_printf_i+0xe8>
 8009220:	881d      	ldrh	r5, [r3, #0]
 8009222:	4854      	ldr	r0, [pc, #336]	; (8009374 <_printf_i+0x244>)
 8009224:	2f6f      	cmp	r7, #111	; 0x6f
 8009226:	bf0c      	ite	eq
 8009228:	2308      	moveq	r3, #8
 800922a:	230a      	movne	r3, #10
 800922c:	2100      	movs	r1, #0
 800922e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009232:	6866      	ldr	r6, [r4, #4]
 8009234:	60a6      	str	r6, [r4, #8]
 8009236:	2e00      	cmp	r6, #0
 8009238:	bfa2      	ittt	ge
 800923a:	6821      	ldrge	r1, [r4, #0]
 800923c:	f021 0104 	bicge.w	r1, r1, #4
 8009240:	6021      	strge	r1, [r4, #0]
 8009242:	b90d      	cbnz	r5, 8009248 <_printf_i+0x118>
 8009244:	2e00      	cmp	r6, #0
 8009246:	d04d      	beq.n	80092e4 <_printf_i+0x1b4>
 8009248:	4616      	mov	r6, r2
 800924a:	fbb5 f1f3 	udiv	r1, r5, r3
 800924e:	fb03 5711 	mls	r7, r3, r1, r5
 8009252:	5dc7      	ldrb	r7, [r0, r7]
 8009254:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009258:	462f      	mov	r7, r5
 800925a:	42bb      	cmp	r3, r7
 800925c:	460d      	mov	r5, r1
 800925e:	d9f4      	bls.n	800924a <_printf_i+0x11a>
 8009260:	2b08      	cmp	r3, #8
 8009262:	d10b      	bne.n	800927c <_printf_i+0x14c>
 8009264:	6823      	ldr	r3, [r4, #0]
 8009266:	07df      	lsls	r7, r3, #31
 8009268:	d508      	bpl.n	800927c <_printf_i+0x14c>
 800926a:	6923      	ldr	r3, [r4, #16]
 800926c:	6861      	ldr	r1, [r4, #4]
 800926e:	4299      	cmp	r1, r3
 8009270:	bfde      	ittt	le
 8009272:	2330      	movle	r3, #48	; 0x30
 8009274:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009278:	f106 36ff 	addle.w	r6, r6, #4294967295
 800927c:	1b92      	subs	r2, r2, r6
 800927e:	6122      	str	r2, [r4, #16]
 8009280:	f8cd a000 	str.w	sl, [sp]
 8009284:	464b      	mov	r3, r9
 8009286:	aa03      	add	r2, sp, #12
 8009288:	4621      	mov	r1, r4
 800928a:	4640      	mov	r0, r8
 800928c:	f7ff fee2 	bl	8009054 <_printf_common>
 8009290:	3001      	adds	r0, #1
 8009292:	d14c      	bne.n	800932e <_printf_i+0x1fe>
 8009294:	f04f 30ff 	mov.w	r0, #4294967295
 8009298:	b004      	add	sp, #16
 800929a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800929e:	4835      	ldr	r0, [pc, #212]	; (8009374 <_printf_i+0x244>)
 80092a0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80092a4:	6823      	ldr	r3, [r4, #0]
 80092a6:	680e      	ldr	r6, [r1, #0]
 80092a8:	061f      	lsls	r7, r3, #24
 80092aa:	f856 5b04 	ldr.w	r5, [r6], #4
 80092ae:	600e      	str	r6, [r1, #0]
 80092b0:	d514      	bpl.n	80092dc <_printf_i+0x1ac>
 80092b2:	07d9      	lsls	r1, r3, #31
 80092b4:	bf44      	itt	mi
 80092b6:	f043 0320 	orrmi.w	r3, r3, #32
 80092ba:	6023      	strmi	r3, [r4, #0]
 80092bc:	b91d      	cbnz	r5, 80092c6 <_printf_i+0x196>
 80092be:	6823      	ldr	r3, [r4, #0]
 80092c0:	f023 0320 	bic.w	r3, r3, #32
 80092c4:	6023      	str	r3, [r4, #0]
 80092c6:	2310      	movs	r3, #16
 80092c8:	e7b0      	b.n	800922c <_printf_i+0xfc>
 80092ca:	6823      	ldr	r3, [r4, #0]
 80092cc:	f043 0320 	orr.w	r3, r3, #32
 80092d0:	6023      	str	r3, [r4, #0]
 80092d2:	2378      	movs	r3, #120	; 0x78
 80092d4:	4828      	ldr	r0, [pc, #160]	; (8009378 <_printf_i+0x248>)
 80092d6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80092da:	e7e3      	b.n	80092a4 <_printf_i+0x174>
 80092dc:	065e      	lsls	r6, r3, #25
 80092de:	bf48      	it	mi
 80092e0:	b2ad      	uxthmi	r5, r5
 80092e2:	e7e6      	b.n	80092b2 <_printf_i+0x182>
 80092e4:	4616      	mov	r6, r2
 80092e6:	e7bb      	b.n	8009260 <_printf_i+0x130>
 80092e8:	680b      	ldr	r3, [r1, #0]
 80092ea:	6826      	ldr	r6, [r4, #0]
 80092ec:	6960      	ldr	r0, [r4, #20]
 80092ee:	1d1d      	adds	r5, r3, #4
 80092f0:	600d      	str	r5, [r1, #0]
 80092f2:	0635      	lsls	r5, r6, #24
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	d501      	bpl.n	80092fc <_printf_i+0x1cc>
 80092f8:	6018      	str	r0, [r3, #0]
 80092fa:	e002      	b.n	8009302 <_printf_i+0x1d2>
 80092fc:	0671      	lsls	r1, r6, #25
 80092fe:	d5fb      	bpl.n	80092f8 <_printf_i+0x1c8>
 8009300:	8018      	strh	r0, [r3, #0]
 8009302:	2300      	movs	r3, #0
 8009304:	6123      	str	r3, [r4, #16]
 8009306:	4616      	mov	r6, r2
 8009308:	e7ba      	b.n	8009280 <_printf_i+0x150>
 800930a:	680b      	ldr	r3, [r1, #0]
 800930c:	1d1a      	adds	r2, r3, #4
 800930e:	600a      	str	r2, [r1, #0]
 8009310:	681e      	ldr	r6, [r3, #0]
 8009312:	6862      	ldr	r2, [r4, #4]
 8009314:	2100      	movs	r1, #0
 8009316:	4630      	mov	r0, r6
 8009318:	f7f6 ffea 	bl	80002f0 <memchr>
 800931c:	b108      	cbz	r0, 8009322 <_printf_i+0x1f2>
 800931e:	1b80      	subs	r0, r0, r6
 8009320:	6060      	str	r0, [r4, #4]
 8009322:	6863      	ldr	r3, [r4, #4]
 8009324:	6123      	str	r3, [r4, #16]
 8009326:	2300      	movs	r3, #0
 8009328:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800932c:	e7a8      	b.n	8009280 <_printf_i+0x150>
 800932e:	6923      	ldr	r3, [r4, #16]
 8009330:	4632      	mov	r2, r6
 8009332:	4649      	mov	r1, r9
 8009334:	4640      	mov	r0, r8
 8009336:	47d0      	blx	sl
 8009338:	3001      	adds	r0, #1
 800933a:	d0ab      	beq.n	8009294 <_printf_i+0x164>
 800933c:	6823      	ldr	r3, [r4, #0]
 800933e:	079b      	lsls	r3, r3, #30
 8009340:	d413      	bmi.n	800936a <_printf_i+0x23a>
 8009342:	68e0      	ldr	r0, [r4, #12]
 8009344:	9b03      	ldr	r3, [sp, #12]
 8009346:	4298      	cmp	r0, r3
 8009348:	bfb8      	it	lt
 800934a:	4618      	movlt	r0, r3
 800934c:	e7a4      	b.n	8009298 <_printf_i+0x168>
 800934e:	2301      	movs	r3, #1
 8009350:	4632      	mov	r2, r6
 8009352:	4649      	mov	r1, r9
 8009354:	4640      	mov	r0, r8
 8009356:	47d0      	blx	sl
 8009358:	3001      	adds	r0, #1
 800935a:	d09b      	beq.n	8009294 <_printf_i+0x164>
 800935c:	3501      	adds	r5, #1
 800935e:	68e3      	ldr	r3, [r4, #12]
 8009360:	9903      	ldr	r1, [sp, #12]
 8009362:	1a5b      	subs	r3, r3, r1
 8009364:	42ab      	cmp	r3, r5
 8009366:	dcf2      	bgt.n	800934e <_printf_i+0x21e>
 8009368:	e7eb      	b.n	8009342 <_printf_i+0x212>
 800936a:	2500      	movs	r5, #0
 800936c:	f104 0619 	add.w	r6, r4, #25
 8009370:	e7f5      	b.n	800935e <_printf_i+0x22e>
 8009372:	bf00      	nop
 8009374:	0800951d 	.word	0x0800951d
 8009378:	0800952e 	.word	0x0800952e

0800937c <memmove>:
 800937c:	4288      	cmp	r0, r1
 800937e:	b510      	push	{r4, lr}
 8009380:	eb01 0402 	add.w	r4, r1, r2
 8009384:	d902      	bls.n	800938c <memmove+0x10>
 8009386:	4284      	cmp	r4, r0
 8009388:	4623      	mov	r3, r4
 800938a:	d807      	bhi.n	800939c <memmove+0x20>
 800938c:	1e43      	subs	r3, r0, #1
 800938e:	42a1      	cmp	r1, r4
 8009390:	d008      	beq.n	80093a4 <memmove+0x28>
 8009392:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009396:	f803 2f01 	strb.w	r2, [r3, #1]!
 800939a:	e7f8      	b.n	800938e <memmove+0x12>
 800939c:	4402      	add	r2, r0
 800939e:	4601      	mov	r1, r0
 80093a0:	428a      	cmp	r2, r1
 80093a2:	d100      	bne.n	80093a6 <memmove+0x2a>
 80093a4:	bd10      	pop	{r4, pc}
 80093a6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80093aa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80093ae:	e7f7      	b.n	80093a0 <memmove+0x24>

080093b0 <_realloc_r>:
 80093b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093b2:	4607      	mov	r7, r0
 80093b4:	4614      	mov	r4, r2
 80093b6:	460e      	mov	r6, r1
 80093b8:	b921      	cbnz	r1, 80093c4 <_realloc_r+0x14>
 80093ba:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80093be:	4611      	mov	r1, r2
 80093c0:	f7ff bc06 	b.w	8008bd0 <_malloc_r>
 80093c4:	b922      	cbnz	r2, 80093d0 <_realloc_r+0x20>
 80093c6:	f7ff fc99 	bl	8008cfc <_free_r>
 80093ca:	4625      	mov	r5, r4
 80093cc:	4628      	mov	r0, r5
 80093ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80093d0:	f000 f814 	bl	80093fc <_malloc_usable_size_r>
 80093d4:	42a0      	cmp	r0, r4
 80093d6:	d20f      	bcs.n	80093f8 <_realloc_r+0x48>
 80093d8:	4621      	mov	r1, r4
 80093da:	4638      	mov	r0, r7
 80093dc:	f7ff fbf8 	bl	8008bd0 <_malloc_r>
 80093e0:	4605      	mov	r5, r0
 80093e2:	2800      	cmp	r0, #0
 80093e4:	d0f2      	beq.n	80093cc <_realloc_r+0x1c>
 80093e6:	4631      	mov	r1, r6
 80093e8:	4622      	mov	r2, r4
 80093ea:	f7ff fbdb 	bl	8008ba4 <memcpy>
 80093ee:	4631      	mov	r1, r6
 80093f0:	4638      	mov	r0, r7
 80093f2:	f7ff fc83 	bl	8008cfc <_free_r>
 80093f6:	e7e9      	b.n	80093cc <_realloc_r+0x1c>
 80093f8:	4635      	mov	r5, r6
 80093fa:	e7e7      	b.n	80093cc <_realloc_r+0x1c>

080093fc <_malloc_usable_size_r>:
 80093fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009400:	1f18      	subs	r0, r3, #4
 8009402:	2b00      	cmp	r3, #0
 8009404:	bfbc      	itt	lt
 8009406:	580b      	ldrlt	r3, [r1, r0]
 8009408:	18c0      	addlt	r0, r0, r3
 800940a:	4770      	bx	lr

0800940c <_init>:
 800940c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800940e:	bf00      	nop
 8009410:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009412:	bc08      	pop	{r3}
 8009414:	469e      	mov	lr, r3
 8009416:	4770      	bx	lr

08009418 <_fini>:
 8009418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800941a:	bf00      	nop
 800941c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800941e:	bc08      	pop	{r3}
 8009420:	469e      	mov	lr, r3
 8009422:	4770      	bx	lr
