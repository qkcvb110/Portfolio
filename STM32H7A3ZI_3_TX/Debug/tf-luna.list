
tf-luna.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ba4  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000198  08006e54  08006e54  00016e54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08006fec  08006fec  00016fec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08006ff4  08006ff4  00016ff4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08006ff8  08006ff8  00016ff8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000078  24000000  08006ffc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000144  24000078  08007074  00020078  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  240001bc  08007074  000201bc  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002181e  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000372f  00000000  00000000  000418c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000ee8  00000000  00000000  00044ff8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000dd0  00000000  00000000  00045ee0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000310f0  00000000  00000000  00046cb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00014d89  00000000  00000000  00077da0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00136027  00000000  00000000  0008cb29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  001c2b50  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000450c  00000000  00000000  001c2ba4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000078 	.word	0x24000078
 80002cc:	00000000 	.word	0x00000000
 80002d0:	08006e3c 	.word	0x08006e3c

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	2400007c 	.word	0x2400007c
 80002ec:	08006e3c 	.word	0x08006e3c

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96e 	b.w	8000684 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468c      	mov	ip, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8083 	bne.w	80004d6 <__udivmoddi4+0x116>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d947      	bls.n	8000466 <__udivmoddi4+0xa6>
 80003d6:	fab2 f282 	clz	r2, r2
 80003da:	b142      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003dc:	f1c2 0020 	rsb	r0, r2, #32
 80003e0:	fa24 f000 	lsr.w	r0, r4, r0
 80003e4:	4091      	lsls	r1, r2
 80003e6:	4097      	lsls	r7, r2
 80003e8:	ea40 0c01 	orr.w	ip, r0, r1
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbbc f6f8 	udiv	r6, ip, r8
 80003f8:	fa1f fe87 	uxth.w	lr, r7
 80003fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000400:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000404:	fb06 f10e 	mul.w	r1, r6, lr
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18fb      	adds	r3, r7, r3
 800040e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000412:	f080 8119 	bcs.w	8000648 <__udivmoddi4+0x288>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8116 	bls.w	8000648 <__udivmoddi4+0x288>
 800041c:	3e02      	subs	r6, #2
 800041e:	443b      	add	r3, r7
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3310 	mls	r3, r8, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fe0e 	mul.w	lr, r0, lr
 8000434:	45a6      	cmp	lr, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	193c      	adds	r4, r7, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295
 800043e:	f080 8105 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000442:	45a6      	cmp	lr, r4
 8000444:	f240 8102 	bls.w	800064c <__udivmoddi4+0x28c>
 8000448:	3802      	subs	r0, #2
 800044a:	443c      	add	r4, r7
 800044c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	2600      	movs	r6, #0
 8000456:	b11d      	cbz	r5, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c5 4300 	strd	r4, r3, [r5]
 8000460:	4631      	mov	r1, r6
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	b902      	cbnz	r2, 800046a <__udivmoddi4+0xaa>
 8000468:	deff      	udf	#255	; 0xff
 800046a:	fab2 f282 	clz	r2, r2
 800046e:	2a00      	cmp	r2, #0
 8000470:	d150      	bne.n	8000514 <__udivmoddi4+0x154>
 8000472:	1bcb      	subs	r3, r1, r7
 8000474:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	2601      	movs	r6, #1
 800047e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000482:	0c21      	lsrs	r1, r4, #16
 8000484:	fb0e 331c 	mls	r3, lr, ip, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb08 f30c 	mul.w	r3, r8, ip
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0xe4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f10c 30ff 	add.w	r0, ip, #4294967295
 800049a:	d202      	bcs.n	80004a2 <__udivmoddi4+0xe2>
 800049c:	428b      	cmp	r3, r1
 800049e:	f200 80e9 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004a2:	4684      	mov	ip, r0
 80004a4:	1ac9      	subs	r1, r1, r3
 80004a6:	b2a3      	uxth	r3, r4
 80004a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80004b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004b4:	fb08 f800 	mul.w	r8, r8, r0
 80004b8:	45a0      	cmp	r8, r4
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x10c>
 80004bc:	193c      	adds	r4, r7, r4
 80004be:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c2:	d202      	bcs.n	80004ca <__udivmoddi4+0x10a>
 80004c4:	45a0      	cmp	r8, r4
 80004c6:	f200 80d9 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004ca:	4618      	mov	r0, r3
 80004cc:	eba4 0408 	sub.w	r4, r4, r8
 80004d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004d4:	e7bf      	b.n	8000456 <__udivmoddi4+0x96>
 80004d6:	428b      	cmp	r3, r1
 80004d8:	d909      	bls.n	80004ee <__udivmoddi4+0x12e>
 80004da:	2d00      	cmp	r5, #0
 80004dc:	f000 80b1 	beq.w	8000642 <__udivmoddi4+0x282>
 80004e0:	2600      	movs	r6, #0
 80004e2:	e9c5 0100 	strd	r0, r1, [r5]
 80004e6:	4630      	mov	r0, r6
 80004e8:	4631      	mov	r1, r6
 80004ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ee:	fab3 f683 	clz	r6, r3
 80004f2:	2e00      	cmp	r6, #0
 80004f4:	d14a      	bne.n	800058c <__udivmoddi4+0x1cc>
 80004f6:	428b      	cmp	r3, r1
 80004f8:	d302      	bcc.n	8000500 <__udivmoddi4+0x140>
 80004fa:	4282      	cmp	r2, r0
 80004fc:	f200 80b8 	bhi.w	8000670 <__udivmoddi4+0x2b0>
 8000500:	1a84      	subs	r4, r0, r2
 8000502:	eb61 0103 	sbc.w	r1, r1, r3
 8000506:	2001      	movs	r0, #1
 8000508:	468c      	mov	ip, r1
 800050a:	2d00      	cmp	r5, #0
 800050c:	d0a8      	beq.n	8000460 <__udivmoddi4+0xa0>
 800050e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000512:	e7a5      	b.n	8000460 <__udivmoddi4+0xa0>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f603 	lsr.w	r6, r0, r3
 800051c:	4097      	lsls	r7, r2
 800051e:	fa01 f002 	lsl.w	r0, r1, r2
 8000522:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000526:	40d9      	lsrs	r1, r3
 8000528:	4330      	orrs	r0, r6
 800052a:	0c03      	lsrs	r3, r0, #16
 800052c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000530:	fa1f f887 	uxth.w	r8, r7
 8000534:	fb0e 1116 	mls	r1, lr, r6, r1
 8000538:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053c:	fb06 f108 	mul.w	r1, r6, r8
 8000540:	4299      	cmp	r1, r3
 8000542:	fa04 f402 	lsl.w	r4, r4, r2
 8000546:	d909      	bls.n	800055c <__udivmoddi4+0x19c>
 8000548:	18fb      	adds	r3, r7, r3
 800054a:	f106 3cff 	add.w	ip, r6, #4294967295
 800054e:	f080 808d 	bcs.w	800066c <__udivmoddi4+0x2ac>
 8000552:	4299      	cmp	r1, r3
 8000554:	f240 808a 	bls.w	800066c <__udivmoddi4+0x2ac>
 8000558:	3e02      	subs	r6, #2
 800055a:	443b      	add	r3, r7
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b281      	uxth	r1, r0
 8000560:	fbb3 f0fe 	udiv	r0, r3, lr
 8000564:	fb0e 3310 	mls	r3, lr, r0, r3
 8000568:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056c:	fb00 f308 	mul.w	r3, r0, r8
 8000570:	428b      	cmp	r3, r1
 8000572:	d907      	bls.n	8000584 <__udivmoddi4+0x1c4>
 8000574:	1879      	adds	r1, r7, r1
 8000576:	f100 3cff 	add.w	ip, r0, #4294967295
 800057a:	d273      	bcs.n	8000664 <__udivmoddi4+0x2a4>
 800057c:	428b      	cmp	r3, r1
 800057e:	d971      	bls.n	8000664 <__udivmoddi4+0x2a4>
 8000580:	3802      	subs	r0, #2
 8000582:	4439      	add	r1, r7
 8000584:	1acb      	subs	r3, r1, r3
 8000586:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800058a:	e778      	b.n	800047e <__udivmoddi4+0xbe>
 800058c:	f1c6 0c20 	rsb	ip, r6, #32
 8000590:	fa03 f406 	lsl.w	r4, r3, r6
 8000594:	fa22 f30c 	lsr.w	r3, r2, ip
 8000598:	431c      	orrs	r4, r3
 800059a:	fa20 f70c 	lsr.w	r7, r0, ip
 800059e:	fa01 f306 	lsl.w	r3, r1, r6
 80005a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80005a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80005aa:	431f      	orrs	r7, r3
 80005ac:	0c3b      	lsrs	r3, r7, #16
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fa1f f884 	uxth.w	r8, r4
 80005b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005be:	fb09 fa08 	mul.w	sl, r9, r8
 80005c2:	458a      	cmp	sl, r1
 80005c4:	fa02 f206 	lsl.w	r2, r2, r6
 80005c8:	fa00 f306 	lsl.w	r3, r0, r6
 80005cc:	d908      	bls.n	80005e0 <__udivmoddi4+0x220>
 80005ce:	1861      	adds	r1, r4, r1
 80005d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80005d4:	d248      	bcs.n	8000668 <__udivmoddi4+0x2a8>
 80005d6:	458a      	cmp	sl, r1
 80005d8:	d946      	bls.n	8000668 <__udivmoddi4+0x2a8>
 80005da:	f1a9 0902 	sub.w	r9, r9, #2
 80005de:	4421      	add	r1, r4
 80005e0:	eba1 010a 	sub.w	r1, r1, sl
 80005e4:	b2bf      	uxth	r7, r7
 80005e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80005ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80005ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80005f2:	fb00 f808 	mul.w	r8, r0, r8
 80005f6:	45b8      	cmp	r8, r7
 80005f8:	d907      	bls.n	800060a <__udivmoddi4+0x24a>
 80005fa:	19e7      	adds	r7, r4, r7
 80005fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000600:	d22e      	bcs.n	8000660 <__udivmoddi4+0x2a0>
 8000602:	45b8      	cmp	r8, r7
 8000604:	d92c      	bls.n	8000660 <__udivmoddi4+0x2a0>
 8000606:	3802      	subs	r0, #2
 8000608:	4427      	add	r7, r4
 800060a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800060e:	eba7 0708 	sub.w	r7, r7, r8
 8000612:	fba0 8902 	umull	r8, r9, r0, r2
 8000616:	454f      	cmp	r7, r9
 8000618:	46c6      	mov	lr, r8
 800061a:	4649      	mov	r1, r9
 800061c:	d31a      	bcc.n	8000654 <__udivmoddi4+0x294>
 800061e:	d017      	beq.n	8000650 <__udivmoddi4+0x290>
 8000620:	b15d      	cbz	r5, 800063a <__udivmoddi4+0x27a>
 8000622:	ebb3 020e 	subs.w	r2, r3, lr
 8000626:	eb67 0701 	sbc.w	r7, r7, r1
 800062a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800062e:	40f2      	lsrs	r2, r6
 8000630:	ea4c 0202 	orr.w	r2, ip, r2
 8000634:	40f7      	lsrs	r7, r6
 8000636:	e9c5 2700 	strd	r2, r7, [r5]
 800063a:	2600      	movs	r6, #0
 800063c:	4631      	mov	r1, r6
 800063e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e70b      	b.n	8000460 <__udivmoddi4+0xa0>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e9      	b.n	8000420 <__udivmoddi4+0x60>
 800064c:	4618      	mov	r0, r3
 800064e:	e6fd      	b.n	800044c <__udivmoddi4+0x8c>
 8000650:	4543      	cmp	r3, r8
 8000652:	d2e5      	bcs.n	8000620 <__udivmoddi4+0x260>
 8000654:	ebb8 0e02 	subs.w	lr, r8, r2
 8000658:	eb69 0104 	sbc.w	r1, r9, r4
 800065c:	3801      	subs	r0, #1
 800065e:	e7df      	b.n	8000620 <__udivmoddi4+0x260>
 8000660:	4608      	mov	r0, r1
 8000662:	e7d2      	b.n	800060a <__udivmoddi4+0x24a>
 8000664:	4660      	mov	r0, ip
 8000666:	e78d      	b.n	8000584 <__udivmoddi4+0x1c4>
 8000668:	4681      	mov	r9, r0
 800066a:	e7b9      	b.n	80005e0 <__udivmoddi4+0x220>
 800066c:	4666      	mov	r6, ip
 800066e:	e775      	b.n	800055c <__udivmoddi4+0x19c>
 8000670:	4630      	mov	r0, r6
 8000672:	e74a      	b.n	800050a <__udivmoddi4+0x14a>
 8000674:	f1ac 0c02 	sub.w	ip, ip, #2
 8000678:	4439      	add	r1, r7
 800067a:	e713      	b.n	80004a4 <__udivmoddi4+0xe4>
 800067c:	3802      	subs	r0, #2
 800067e:	443c      	add	r4, r7
 8000680:	e724      	b.n	80004cc <__udivmoddi4+0x10c>
 8000682:	bf00      	nop

08000684 <__aeabi_idiv0>:
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop

08000688 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000688:	b480      	push	{r7}
 800068a:	b085      	sub	sp, #20
 800068c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800068e:	4b19      	ldr	r3, [pc, #100]	; (80006f4 <MX_GPIO_Init+0x6c>)
 8000690:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000694:	4a17      	ldr	r2, [pc, #92]	; (80006f4 <MX_GPIO_Init+0x6c>)
 8000696:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800069a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800069e:	4b15      	ldr	r3, [pc, #84]	; (80006f4 <MX_GPIO_Init+0x6c>)
 80006a0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80006a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006a8:	60fb      	str	r3, [r7, #12]
 80006aa:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006ac:	4b11      	ldr	r3, [pc, #68]	; (80006f4 <MX_GPIO_Init+0x6c>)
 80006ae:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80006b2:	4a10      	ldr	r2, [pc, #64]	; (80006f4 <MX_GPIO_Init+0x6c>)
 80006b4:	f043 0308 	orr.w	r3, r3, #8
 80006b8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80006bc:	4b0d      	ldr	r3, [pc, #52]	; (80006f4 <MX_GPIO_Init+0x6c>)
 80006be:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80006c2:	f003 0308 	and.w	r3, r3, #8
 80006c6:	60bb      	str	r3, [r7, #8]
 80006c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ca:	4b0a      	ldr	r3, [pc, #40]	; (80006f4 <MX_GPIO_Init+0x6c>)
 80006cc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80006d0:	4a08      	ldr	r2, [pc, #32]	; (80006f4 <MX_GPIO_Init+0x6c>)
 80006d2:	f043 0302 	orr.w	r3, r3, #2
 80006d6:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80006da:	4b06      	ldr	r3, [pc, #24]	; (80006f4 <MX_GPIO_Init+0x6c>)
 80006dc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80006e0:	f003 0302 	and.w	r3, r3, #2
 80006e4:	607b      	str	r3, [r7, #4]
 80006e6:	687b      	ldr	r3, [r7, #4]

}
 80006e8:	bf00      	nop
 80006ea:	3714      	adds	r7, #20
 80006ec:	46bd      	mov	sp, r7
 80006ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f2:	4770      	bx	lr
 80006f4:	58024400 	.word	0x58024400

080006f8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006fc:	4b1b      	ldr	r3, [pc, #108]	; (800076c <MX_I2C1_Init+0x74>)
 80006fe:	4a1c      	ldr	r2, [pc, #112]	; (8000770 <MX_I2C1_Init+0x78>)
 8000700:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8000702:	4b1a      	ldr	r3, [pc, #104]	; (800076c <MX_I2C1_Init+0x74>)
 8000704:	4a1b      	ldr	r2, [pc, #108]	; (8000774 <MX_I2C1_Init+0x7c>)
 8000706:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000708:	4b18      	ldr	r3, [pc, #96]	; (800076c <MX_I2C1_Init+0x74>)
 800070a:	2200      	movs	r2, #0
 800070c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800070e:	4b17      	ldr	r3, [pc, #92]	; (800076c <MX_I2C1_Init+0x74>)
 8000710:	2201      	movs	r2, #1
 8000712:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000714:	4b15      	ldr	r3, [pc, #84]	; (800076c <MX_I2C1_Init+0x74>)
 8000716:	2200      	movs	r2, #0
 8000718:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800071a:	4b14      	ldr	r3, [pc, #80]	; (800076c <MX_I2C1_Init+0x74>)
 800071c:	2200      	movs	r2, #0
 800071e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000720:	4b12      	ldr	r3, [pc, #72]	; (800076c <MX_I2C1_Init+0x74>)
 8000722:	2200      	movs	r2, #0
 8000724:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000726:	4b11      	ldr	r3, [pc, #68]	; (800076c <MX_I2C1_Init+0x74>)
 8000728:	2200      	movs	r2, #0
 800072a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800072c:	4b0f      	ldr	r3, [pc, #60]	; (800076c <MX_I2C1_Init+0x74>)
 800072e:	2200      	movs	r2, #0
 8000730:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000732:	480e      	ldr	r0, [pc, #56]	; (800076c <MX_I2C1_Init+0x74>)
 8000734:	f001 f8fe 	bl	8001934 <HAL_I2C_Init>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800073e:	f000 f933 	bl	80009a8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000742:	2100      	movs	r1, #0
 8000744:	4809      	ldr	r0, [pc, #36]	; (800076c <MX_I2C1_Init+0x74>)
 8000746:	f001 fde7 	bl	8002318 <HAL_I2CEx_ConfigAnalogFilter>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000750:	f000 f92a 	bl	80009a8 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000754:	2100      	movs	r1, #0
 8000756:	4805      	ldr	r0, [pc, #20]	; (800076c <MX_I2C1_Init+0x74>)
 8000758:	f001 fe29 	bl	80023ae <HAL_I2CEx_ConfigDigitalFilter>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000762:	f000 f921 	bl	80009a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000766:	bf00      	nop
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	240000a8 	.word	0x240000a8
 8000770:	40005400 	.word	0x40005400
 8000774:	00707cbb 	.word	0x00707cbb

08000778 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b0b8      	sub	sp, #224	; 0xe0
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000780:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000784:	2200      	movs	r2, #0
 8000786:	601a      	str	r2, [r3, #0]
 8000788:	605a      	str	r2, [r3, #4]
 800078a:	609a      	str	r2, [r3, #8]
 800078c:	60da      	str	r2, [r3, #12]
 800078e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000790:	f107 0314 	add.w	r3, r7, #20
 8000794:	22b8      	movs	r2, #184	; 0xb8
 8000796:	2100      	movs	r1, #0
 8000798:	4618      	mov	r0, r3
 800079a:	f005 fb93 	bl	8005ec4 <memset>
  if(i2cHandle->Instance==I2C1)
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	4a24      	ldr	r2, [pc, #144]	; (8000834 <HAL_I2C_MspInit+0xbc>)
 80007a4:	4293      	cmp	r3, r2
 80007a6:	d141      	bne.n	800082c <HAL_I2C_MspInit+0xb4>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80007a8:	2308      	movs	r3, #8
 80007aa:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80007ac:	2300      	movs	r3, #0
 80007ae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80007b2:	f107 0314 	add.w	r3, r7, #20
 80007b6:	4618      	mov	r0, r3
 80007b8:	f002 fe30 	bl	800341c <HAL_RCCEx_PeriphCLKConfig>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80007c2:	f000 f8f1 	bl	80009a8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007c6:	4b1c      	ldr	r3, [pc, #112]	; (8000838 <HAL_I2C_MspInit+0xc0>)
 80007c8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80007cc:	4a1a      	ldr	r2, [pc, #104]	; (8000838 <HAL_I2C_MspInit+0xc0>)
 80007ce:	f043 0302 	orr.w	r3, r3, #2
 80007d2:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80007d6:	4b18      	ldr	r3, [pc, #96]	; (8000838 <HAL_I2C_MspInit+0xc0>)
 80007d8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80007dc:	f003 0302 	and.w	r3, r3, #2
 80007e0:	613b      	str	r3, [r7, #16]
 80007e2:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80007e4:	23c0      	movs	r3, #192	; 0xc0
 80007e6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007ea:	2312      	movs	r3, #18
 80007ec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f0:	2300      	movs	r3, #0
 80007f2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f6:	2300      	movs	r3, #0
 80007f8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80007fc:	2304      	movs	r3, #4
 80007fe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000802:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000806:	4619      	mov	r1, r3
 8000808:	480c      	ldr	r0, [pc, #48]	; (800083c <HAL_I2C_MspInit+0xc4>)
 800080a:	f000 fee3 	bl	80015d4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800080e:	4b0a      	ldr	r3, [pc, #40]	; (8000838 <HAL_I2C_MspInit+0xc0>)
 8000810:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000814:	4a08      	ldr	r2, [pc, #32]	; (8000838 <HAL_I2C_MspInit+0xc0>)
 8000816:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800081a:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 800081e:	4b06      	ldr	r3, [pc, #24]	; (8000838 <HAL_I2C_MspInit+0xc0>)
 8000820:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000824:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000828:	60fb      	str	r3, [r7, #12]
 800082a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800082c:	bf00      	nop
 800082e:	37e0      	adds	r7, #224	; 0xe0
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}
 8000834:	40005400 	.word	0x40005400
 8000838:	58024400 	.word	0x58024400
 800083c:	58020400 	.word	0x58020400

08000840 <_write>:
//  for(i=0 ; i<len ; i++)
//    ITM_SendChar((*ptr++));
//  return len;
//}

int _write(int file, unsigned char * p, int len){
 8000840:	b580      	push	{r7, lr}
 8000842:	b084      	sub	sp, #16
 8000844:	af00      	add	r7, sp, #0
 8000846:	60f8      	str	r0, [r7, #12]
 8000848:	60b9      	str	r1, [r7, #8]
 800084a:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart3, p, len, 10);
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	b29a      	uxth	r2, r3
 8000850:	230a      	movs	r3, #10
 8000852:	68b9      	ldr	r1, [r7, #8]
 8000854:	4803      	ldr	r0, [pc, #12]	; (8000864 <_write+0x24>)
 8000856:	f004 f95f 	bl	8004b18 <HAL_UART_Transmit>
	return len;
 800085a:	687b      	ldr	r3, [r7, #4]
}
 800085c:	4618      	mov	r0, r3
 800085e:	3710      	adds	r7, #16
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}
 8000864:	24000118 	.word	0x24000118

08000868 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800086c:	f000 fd18 	bl	80012a0 <HAL_Init>

  /* USER CODE BEGIN Init */
  TF_Luna_init(&TF_Luna_1, &hi2c1, 0x10);
 8000870:	2210      	movs	r2, #16
 8000872:	4915      	ldr	r1, [pc, #84]	; (80008c8 <main+0x60>)
 8000874:	4815      	ldr	r0, [pc, #84]	; (80008cc <main+0x64>)
 8000876:	f000 f9e1 	bl	8000c3c <TF_Luna_init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800087a:	f000 f839 	bl	80008f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800087e:	f7ff ff03 	bl	8000688 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000882:	f7ff ff39 	bl	80006f8 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 8000886:	f000 fc2f 	bl	80010e8 <MX_USART3_UART_Init>
     *   TF_Luna_init(&TF_Luna_4, &hi2c1, 0x13);
     *   TF_Luna_init(&TF_Luna_5, &hi2c1, 0x14);
     */


    Get_Frame_Rate( &TF_Luna_1,&tfFrame);
 800088a:	4911      	ldr	r1, [pc, #68]	; (80008d0 <main+0x68>)
 800088c:	480f      	ldr	r0, [pc, #60]	; (80008cc <main+0x64>)
 800088e:	f000 faeb 	bl	8000e68 <Get_Frame_Rate>
    Get_Firmware_Version(&TF_Luna_1, tfVer);
 8000892:	4910      	ldr	r1, [pc, #64]	; (80008d4 <main+0x6c>)
 8000894:	480d      	ldr	r0, [pc, #52]	; (80008cc <main+0x64>)
 8000896:	f000 fabd 	bl	8000e14 <Get_Firmware_Version>
    Get_Prod_Code(&TF_Luna_1, tfCode);
 800089a:	490f      	ldr	r1, [pc, #60]	; (80008d8 <main+0x70>)
 800089c:	480b      	ldr	r0, [pc, #44]	; (80008cc <main+0x64>)
 800089e:	f000 fa8f 	bl	8000dc0 <Get_Prod_Code>
    Get_Time(&TF_Luna_1, &tfTime);
 80008a2:	490e      	ldr	r1, [pc, #56]	; (80008dc <main+0x74>)
 80008a4:	4809      	ldr	r0, [pc, #36]	; (80008cc <main+0x64>)
 80008a6:	f000 fa5b 	bl	8000d60 <Get_Time>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  getData(&TF_Luna_1, &tfDist, &tfFlux, &tfTemp);
 80008aa:	4b0d      	ldr	r3, [pc, #52]	; (80008e0 <main+0x78>)
 80008ac:	4a0d      	ldr	r2, [pc, #52]	; (80008e4 <main+0x7c>)
 80008ae:	490e      	ldr	r1, [pc, #56]	; (80008e8 <main+0x80>)
 80008b0:	4806      	ldr	r0, [pc, #24]	; (80008cc <main+0x64>)
 80008b2:	f000 f9d7 	bl	8000c64 <getData>

	  printDataArray();
 80008b6:	f000 fbe3 	bl	8001080 <printDataArray>
//	  printf("%d",tfDist); // Open your SVW ITM Data Console
	  printf("hello");
 80008ba:	480c      	ldr	r0, [pc, #48]	; (80008ec <main+0x84>)
 80008bc:	f005 fb0a 	bl	8005ed4 <iprintf>
	  	  HAL_Delay(4); // 250Hz
 80008c0:	2004      	movs	r0, #4
 80008c2:	f000 fd7f 	bl	80013c4 <HAL_Delay>
	  getData(&TF_Luna_1, &tfDist, &tfFlux, &tfTemp);
 80008c6:	e7f0      	b.n	80008aa <main+0x42>
 80008c8:	240000a8 	.word	0x240000a8
 80008cc:	24000110 	.word	0x24000110
 80008d0:	24000000 	.word	0x24000000
 80008d4:	2400010c 	.word	0x2400010c
 80008d8:	240000f4 	.word	0x240000f4
 80008dc:	2400009a 	.word	0x2400009a
 80008e0:	24000098 	.word	0x24000098
 80008e4:	24000096 	.word	0x24000096
 80008e8:	24000094 	.word	0x24000094
 80008ec:	08006e54 	.word	0x08006e54

080008f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b09c      	sub	sp, #112	; 0x70
 80008f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008fa:	224c      	movs	r2, #76	; 0x4c
 80008fc:	2100      	movs	r1, #0
 80008fe:	4618      	mov	r0, r3
 8000900:	f005 fae0 	bl	8005ec4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000904:	1d3b      	adds	r3, r7, #4
 8000906:	2220      	movs	r2, #32
 8000908:	2100      	movs	r1, #0
 800090a:	4618      	mov	r0, r3
 800090c:	f005 fada 	bl	8005ec4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000910:	2004      	movs	r0, #4
 8000912:	f001 fd99 	bl	8002448 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000916:	2300      	movs	r3, #0
 8000918:	603b      	str	r3, [r7, #0]
 800091a:	4b22      	ldr	r3, [pc, #136]	; (80009a4 <SystemClock_Config+0xb4>)
 800091c:	699b      	ldr	r3, [r3, #24]
 800091e:	4a21      	ldr	r2, [pc, #132]	; (80009a4 <SystemClock_Config+0xb4>)
 8000920:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000924:	6193      	str	r3, [r2, #24]
 8000926:	4b1f      	ldr	r3, [pc, #124]	; (80009a4 <SystemClock_Config+0xb4>)
 8000928:	699b      	ldr	r3, [r3, #24]
 800092a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800092e:	603b      	str	r3, [r7, #0]
 8000930:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000932:	bf00      	nop
 8000934:	4b1b      	ldr	r3, [pc, #108]	; (80009a4 <SystemClock_Config+0xb4>)
 8000936:	699b      	ldr	r3, [r3, #24]
 8000938:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800093c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000940:	d1f8      	bne.n	8000934 <SystemClock_Config+0x44>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000942:	2302      	movs	r3, #2
 8000944:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000946:	2301      	movs	r3, #1
 8000948:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800094a:	2340      	movs	r3, #64	; 0x40
 800094c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800094e:	2300      	movs	r3, #0
 8000950:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000952:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000956:	4618      	mov	r0, r3
 8000958:	f001 fdd0 	bl	80024fc <HAL_RCC_OscConfig>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d001      	beq.n	8000966 <SystemClock_Config+0x76>
  {
    Error_Handler();
 8000962:	f000 f821 	bl	80009a8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000966:	233f      	movs	r3, #63	; 0x3f
 8000968:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800096a:	2300      	movs	r3, #0
 800096c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800096e:	2300      	movs	r3, #0
 8000970:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000972:	2300      	movs	r3, #0
 8000974:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000976:	2340      	movs	r3, #64	; 0x40
 8000978:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800097a:	2340      	movs	r3, #64	; 0x40
 800097c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800097e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000982:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000984:	2340      	movs	r3, #64	; 0x40
 8000986:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000988:	1d3b      	adds	r3, r7, #4
 800098a:	2102      	movs	r1, #2
 800098c:	4618      	mov	r0, r3
 800098e:	f002 f9b9 	bl	8002d04 <HAL_RCC_ClockConfig>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000998:	f000 f806 	bl	80009a8 <Error_Handler>
  }
}
 800099c:	bf00      	nop
 800099e:	3770      	adds	r7, #112	; 0x70
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	58024800 	.word	0x58024800

080009a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009ac:	b672      	cpsid	i
}
 80009ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009b0:	e7fe      	b.n	80009b0 <Error_Handler+0x8>
	...

080009b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	b083      	sub	sp, #12
 80009b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ba:	4b0a      	ldr	r3, [pc, #40]	; (80009e4 <HAL_MspInit+0x30>)
 80009bc:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80009c0:	4a08      	ldr	r2, [pc, #32]	; (80009e4 <HAL_MspInit+0x30>)
 80009c2:	f043 0302 	orr.w	r3, r3, #2
 80009c6:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 80009ca:	4b06      	ldr	r3, [pc, #24]	; (80009e4 <HAL_MspInit+0x30>)
 80009cc:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80009d0:	f003 0302 	and.w	r3, r3, #2
 80009d4:	607b      	str	r3, [r7, #4]
 80009d6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009d8:	bf00      	nop
 80009da:	370c      	adds	r7, #12
 80009dc:	46bd      	mov	sp, r7
 80009de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e2:	4770      	bx	lr
 80009e4:	58024400 	.word	0x58024400

080009e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009ec:	e7fe      	b.n	80009ec <NMI_Handler+0x4>

080009ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009ee:	b480      	push	{r7}
 80009f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009f2:	e7fe      	b.n	80009f2 <HardFault_Handler+0x4>

080009f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009f8:	e7fe      	b.n	80009f8 <MemManage_Handler+0x4>

080009fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009fa:	b480      	push	{r7}
 80009fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009fe:	e7fe      	b.n	80009fe <BusFault_Handler+0x4>

08000a00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a04:	e7fe      	b.n	8000a04 <UsageFault_Handler+0x4>

08000a06 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a06:	b480      	push	{r7}
 8000a08:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a0a:	bf00      	nop
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a12:	4770      	bx	lr

08000a14 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a18:	bf00      	nop
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a20:	4770      	bx	lr

08000a22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a22:	b480      	push	{r7}
 8000a24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a26:	bf00      	nop
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2e:	4770      	bx	lr

08000a30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a34:	f000 fca6 	bl	8001384 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a38:	bf00      	nop
 8000a3a:	bd80      	pop	{r7, pc}

08000a3c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b086      	sub	sp, #24
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	60f8      	str	r0, [r7, #12]
 8000a44:	60b9      	str	r1, [r7, #8]
 8000a46:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a48:	2300      	movs	r3, #0
 8000a4a:	617b      	str	r3, [r7, #20]
 8000a4c:	e00a      	b.n	8000a64 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000a4e:	f3af 8000 	nop.w
 8000a52:	4601      	mov	r1, r0
 8000a54:	68bb      	ldr	r3, [r7, #8]
 8000a56:	1c5a      	adds	r2, r3, #1
 8000a58:	60ba      	str	r2, [r7, #8]
 8000a5a:	b2ca      	uxtb	r2, r1
 8000a5c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a5e:	697b      	ldr	r3, [r7, #20]
 8000a60:	3301      	adds	r3, #1
 8000a62:	617b      	str	r3, [r7, #20]
 8000a64:	697a      	ldr	r2, [r7, #20]
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	429a      	cmp	r2, r3
 8000a6a:	dbf0      	blt.n	8000a4e <_read+0x12>
	}

return len;
 8000a6c:	687b      	ldr	r3, [r7, #4]
}
 8000a6e:	4618      	mov	r0, r3
 8000a70:	3718      	adds	r7, #24
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}

08000a76 <_close>:
	}
	return len;
}

int _close(int file)
{
 8000a76:	b480      	push	{r7}
 8000a78:	b083      	sub	sp, #12
 8000a7a:	af00      	add	r7, sp, #0
 8000a7c:	6078      	str	r0, [r7, #4]
	return -1;
 8000a7e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a82:	4618      	mov	r0, r3
 8000a84:	370c      	adds	r7, #12
 8000a86:	46bd      	mov	sp, r7
 8000a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8c:	4770      	bx	lr

08000a8e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a8e:	b480      	push	{r7}
 8000a90:	b083      	sub	sp, #12
 8000a92:	af00      	add	r7, sp, #0
 8000a94:	6078      	str	r0, [r7, #4]
 8000a96:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000a98:	683b      	ldr	r3, [r7, #0]
 8000a9a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a9e:	605a      	str	r2, [r3, #4]
	return 0;
 8000aa0:	2300      	movs	r3, #0
}
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	370c      	adds	r7, #12
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr

08000aae <_isatty>:

int _isatty(int file)
{
 8000aae:	b480      	push	{r7}
 8000ab0:	b083      	sub	sp, #12
 8000ab2:	af00      	add	r7, sp, #0
 8000ab4:	6078      	str	r0, [r7, #4]
	return 1;
 8000ab6:	2301      	movs	r3, #1
}
 8000ab8:	4618      	mov	r0, r3
 8000aba:	370c      	adds	r7, #12
 8000abc:	46bd      	mov	sp, r7
 8000abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac2:	4770      	bx	lr

08000ac4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	b085      	sub	sp, #20
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	60f8      	str	r0, [r7, #12]
 8000acc:	60b9      	str	r1, [r7, #8]
 8000ace:	607a      	str	r2, [r7, #4]
	return 0;
 8000ad0:	2300      	movs	r3, #0
}
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	3714      	adds	r7, #20
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr
	...

08000ae0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b086      	sub	sp, #24
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ae8:	4a14      	ldr	r2, [pc, #80]	; (8000b3c <_sbrk+0x5c>)
 8000aea:	4b15      	ldr	r3, [pc, #84]	; (8000b40 <_sbrk+0x60>)
 8000aec:	1ad3      	subs	r3, r2, r3
 8000aee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000af0:	697b      	ldr	r3, [r7, #20]
 8000af2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000af4:	4b13      	ldr	r3, [pc, #76]	; (8000b44 <_sbrk+0x64>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d102      	bne.n	8000b02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000afc:	4b11      	ldr	r3, [pc, #68]	; (8000b44 <_sbrk+0x64>)
 8000afe:	4a12      	ldr	r2, [pc, #72]	; (8000b48 <_sbrk+0x68>)
 8000b00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b02:	4b10      	ldr	r3, [pc, #64]	; (8000b44 <_sbrk+0x64>)
 8000b04:	681a      	ldr	r2, [r3, #0]
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	4413      	add	r3, r2
 8000b0a:	693a      	ldr	r2, [r7, #16]
 8000b0c:	429a      	cmp	r2, r3
 8000b0e:	d207      	bcs.n	8000b20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b10:	f005 f9ae 	bl	8005e70 <__errno>
 8000b14:	4603      	mov	r3, r0
 8000b16:	220c      	movs	r2, #12
 8000b18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b1a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b1e:	e009      	b.n	8000b34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b20:	4b08      	ldr	r3, [pc, #32]	; (8000b44 <_sbrk+0x64>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b26:	4b07      	ldr	r3, [pc, #28]	; (8000b44 <_sbrk+0x64>)
 8000b28:	681a      	ldr	r2, [r3, #0]
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	4413      	add	r3, r2
 8000b2e:	4a05      	ldr	r2, [pc, #20]	; (8000b44 <_sbrk+0x64>)
 8000b30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b32:	68fb      	ldr	r3, [r7, #12]
}
 8000b34:	4618      	mov	r0, r3
 8000b36:	3718      	adds	r7, #24
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	24100000 	.word	0x24100000
 8000b40:	00000400 	.word	0x00000400
 8000b44:	2400009c 	.word	0x2400009c
 8000b48:	240001c0 	.word	0x240001c0

08000b4c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000b50:	4b32      	ldr	r3, [pc, #200]	; (8000c1c <SystemInit+0xd0>)
 8000b52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b56:	4a31      	ldr	r2, [pc, #196]	; (8000c1c <SystemInit+0xd0>)
 8000b58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000b60:	4b2f      	ldr	r3, [pc, #188]	; (8000c20 <SystemInit+0xd4>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	f003 030f 	and.w	r3, r3, #15
 8000b68:	2b02      	cmp	r3, #2
 8000b6a:	d807      	bhi.n	8000b7c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000b6c:	4b2c      	ldr	r3, [pc, #176]	; (8000c20 <SystemInit+0xd4>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	f023 030f 	bic.w	r3, r3, #15
 8000b74:	4a2a      	ldr	r2, [pc, #168]	; (8000c20 <SystemInit+0xd4>)
 8000b76:	f043 0303 	orr.w	r3, r3, #3
 8000b7a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000b7c:	4b29      	ldr	r3, [pc, #164]	; (8000c24 <SystemInit+0xd8>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	4a28      	ldr	r2, [pc, #160]	; (8000c24 <SystemInit+0xd8>)
 8000b82:	f043 0301 	orr.w	r3, r3, #1
 8000b86:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000b88:	4b26      	ldr	r3, [pc, #152]	; (8000c24 <SystemInit+0xd8>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000b8e:	4b25      	ldr	r3, [pc, #148]	; (8000c24 <SystemInit+0xd8>)
 8000b90:	681a      	ldr	r2, [r3, #0]
 8000b92:	4924      	ldr	r1, [pc, #144]	; (8000c24 <SystemInit+0xd8>)
 8000b94:	4b24      	ldr	r3, [pc, #144]	; (8000c28 <SystemInit+0xdc>)
 8000b96:	4013      	ands	r3, r2
 8000b98:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000b9a:	4b21      	ldr	r3, [pc, #132]	; (8000c20 <SystemInit+0xd4>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	f003 030c 	and.w	r3, r3, #12
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d007      	beq.n	8000bb6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000ba6:	4b1e      	ldr	r3, [pc, #120]	; (8000c20 <SystemInit+0xd4>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	f023 030f 	bic.w	r3, r3, #15
 8000bae:	4a1c      	ldr	r2, [pc, #112]	; (8000c20 <SystemInit+0xd4>)
 8000bb0:	f043 0303 	orr.w	r3, r3, #3
 8000bb4:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8000bb6:	4b1b      	ldr	r3, [pc, #108]	; (8000c24 <SystemInit+0xd8>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8000bbc:	4b19      	ldr	r3, [pc, #100]	; (8000c24 <SystemInit+0xd8>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8000bc2:	4b18      	ldr	r3, [pc, #96]	; (8000c24 <SystemInit+0xd8>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000bc8:	4b16      	ldr	r3, [pc, #88]	; (8000c24 <SystemInit+0xd8>)
 8000bca:	4a18      	ldr	r2, [pc, #96]	; (8000c2c <SystemInit+0xe0>)
 8000bcc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000bce:	4b15      	ldr	r3, [pc, #84]	; (8000c24 <SystemInit+0xd8>)
 8000bd0:	4a17      	ldr	r2, [pc, #92]	; (8000c30 <SystemInit+0xe4>)
 8000bd2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000bd4:	4b13      	ldr	r3, [pc, #76]	; (8000c24 <SystemInit+0xd8>)
 8000bd6:	4a17      	ldr	r2, [pc, #92]	; (8000c34 <SystemInit+0xe8>)
 8000bd8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000bda:	4b12      	ldr	r3, [pc, #72]	; (8000c24 <SystemInit+0xd8>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000be0:	4b10      	ldr	r3, [pc, #64]	; (8000c24 <SystemInit+0xd8>)
 8000be2:	4a14      	ldr	r2, [pc, #80]	; (8000c34 <SystemInit+0xe8>)
 8000be4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000be6:	4b0f      	ldr	r3, [pc, #60]	; (8000c24 <SystemInit+0xd8>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000bec:	4b0d      	ldr	r3, [pc, #52]	; (8000c24 <SystemInit+0xd8>)
 8000bee:	4a11      	ldr	r2, [pc, #68]	; (8000c34 <SystemInit+0xe8>)
 8000bf0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000bf2:	4b0c      	ldr	r3, [pc, #48]	; (8000c24 <SystemInit+0xd8>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000bf8:	4b0a      	ldr	r3, [pc, #40]	; (8000c24 <SystemInit+0xd8>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	4a09      	ldr	r2, [pc, #36]	; (8000c24 <SystemInit+0xd8>)
 8000bfe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c02:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000c04:	4b07      	ldr	r3, [pc, #28]	; (8000c24 <SystemInit+0xd8>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000c0a:	4b0b      	ldr	r3, [pc, #44]	; (8000c38 <SystemInit+0xec>)
 8000c0c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000c10:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 8000c12:	bf00      	nop
 8000c14:	46bd      	mov	sp, r7
 8000c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1a:	4770      	bx	lr
 8000c1c:	e000ed00 	.word	0xe000ed00
 8000c20:	52002000 	.word	0x52002000
 8000c24:	58024400 	.word	0x58024400
 8000c28:	eaf6ed7f 	.word	0xeaf6ed7f
 8000c2c:	02020200 	.word	0x02020200
 8000c30:	01ff0000 	.word	0x01ff0000
 8000c34:	01010280 	.word	0x01010280
 8000c38:	52004000 	.word	0x52004000

08000c3c <TF_Luna_init>:

// Init your device or devices.
// Supported multiple devices on one i2c line.

bool TF_Luna_init(TF_Luna_Lidar *tf_luna,I2C_HandleTypeDef *i2c,uint8_t TF_Luna_address)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	b085      	sub	sp, #20
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	60f8      	str	r0, [r7, #12]
 8000c44:	60b9      	str	r1, [r7, #8]
 8000c46:	4613      	mov	r3, r2
 8000c48:	71fb      	strb	r3, [r7, #7]

	  tf_luna->i2c = i2c;
 8000c4a:	68fb      	ldr	r3, [r7, #12]
 8000c4c:	68ba      	ldr	r2, [r7, #8]
 8000c4e:	601a      	str	r2, [r3, #0]
	  tf_luna->TF_Luna_address=TF_Luna_address;
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	79fa      	ldrb	r2, [r7, #7]
 8000c54:	711a      	strb	r2, [r3, #4]
	  return 1;
 8000c56:	2301      	movs	r3, #1

}
 8000c58:	4618      	mov	r0, r3
 8000c5a:	3714      	adds	r7, #20
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c62:	4770      	bx	lr

08000c64 <getData>:
//             GET DATA FROM THE DEVICE
// - - - - - - - - - - - - - - - - - - - - - - - - - -


bool getData(TF_Luna_Lidar *tf_luna, int16_t *dist, int16_t *flux, int16_t *temp)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b086      	sub	sp, #24
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	60f8      	str	r0, [r7, #12]
 8000c6c:	60b9      	str	r1, [r7, #8]
 8000c6e:	607a      	str	r2, [r7, #4]
 8000c70:	603b      	str	r3, [r7, #0]
    tfStatus = TFL_READY;    // clear status of any error condition
 8000c72:	4b37      	ldr	r3, [pc, #220]	; (8000d50 <getData+0xec>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	701a      	strb	r2, [r3, #0]
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    // Step 1 - Use the `HAL_I2C_MASTER_Receive` function `readReg` to fill the six byte
    // `dataArray` from the contiguous sequence of registers `TFL_DIST_LO`
    // to `TFL_TEMP_HI` that declared in the header file 'tfluna_i2c.h`.
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    for (uint8_t reg = TFL_DIST_LO; reg <= TFL_TEMP_HI; reg++)
 8000c78:	2300      	movs	r3, #0
 8000c7a:	75fb      	strb	r3, [r7, #23]
 8000c7c:	e014      	b.n	8000ca8 <getData+0x44>
    {
      if( !readReg(tf_luna, reg)) return false;
 8000c7e:	7dfb      	ldrb	r3, [r7, #23]
 8000c80:	4619      	mov	r1, r3
 8000c82:	68f8      	ldr	r0, [r7, #12]
 8000c84:	f000 f920 	bl	8000ec8 <readReg>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	f083 0301 	eor.w	r3, r3, #1
 8000c8e:	b2db      	uxtb	r3, r3
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d001      	beq.n	8000c98 <getData+0x34>
 8000c94:	2300      	movs	r3, #0
 8000c96:	e056      	b.n	8000d46 <getData+0xe2>
          else dataArray[ reg] = regReply;
 8000c98:	7dfb      	ldrb	r3, [r7, #23]
 8000c9a:	4a2e      	ldr	r2, [pc, #184]	; (8000d54 <getData+0xf0>)
 8000c9c:	7811      	ldrb	r1, [r2, #0]
 8000c9e:	4a2e      	ldr	r2, [pc, #184]	; (8000d58 <getData+0xf4>)
 8000ca0:	54d1      	strb	r1, [r2, r3]
    for (uint8_t reg = TFL_DIST_LO; reg <= TFL_TEMP_HI; reg++)
 8000ca2:	7dfb      	ldrb	r3, [r7, #23]
 8000ca4:	3301      	adds	r3, #1
 8000ca6:	75fb      	strb	r3, [r7, #23]
 8000ca8:	7dfb      	ldrb	r3, [r7, #23]
 8000caa:	2b05      	cmp	r3, #5
 8000cac:	d9e7      	bls.n	8000c7e <getData+0x1a>
    }

    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    // Step 2 - Shift data from read array into the three variables
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
   *dist = dataArray[ 0] + ( dataArray[ 1] << 8);
 8000cae:	4b2a      	ldr	r3, [pc, #168]	; (8000d58 <getData+0xf4>)
 8000cb0:	781b      	ldrb	r3, [r3, #0]
 8000cb2:	b29a      	uxth	r2, r3
 8000cb4:	4b28      	ldr	r3, [pc, #160]	; (8000d58 <getData+0xf4>)
 8000cb6:	785b      	ldrb	r3, [r3, #1]
 8000cb8:	b29b      	uxth	r3, r3
 8000cba:	021b      	lsls	r3, r3, #8
 8000cbc:	b29b      	uxth	r3, r3
 8000cbe:	4413      	add	r3, r2
 8000cc0:	b29b      	uxth	r3, r3
 8000cc2:	b21a      	sxth	r2, r3
 8000cc4:	68bb      	ldr	r3, [r7, #8]
 8000cc6:	801a      	strh	r2, [r3, #0]
   *flux = dataArray[ 2] + ( dataArray[ 3] << 8);
 8000cc8:	4b23      	ldr	r3, [pc, #140]	; (8000d58 <getData+0xf4>)
 8000cca:	789b      	ldrb	r3, [r3, #2]
 8000ccc:	b29a      	uxth	r2, r3
 8000cce:	4b22      	ldr	r3, [pc, #136]	; (8000d58 <getData+0xf4>)
 8000cd0:	78db      	ldrb	r3, [r3, #3]
 8000cd2:	b29b      	uxth	r3, r3
 8000cd4:	021b      	lsls	r3, r3, #8
 8000cd6:	b29b      	uxth	r3, r3
 8000cd8:	4413      	add	r3, r2
 8000cda:	b29b      	uxth	r3, r3
 8000cdc:	b21a      	sxth	r2, r3
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	801a      	strh	r2, [r3, #0]
   *temp = dataArray[ 4] + ( dataArray[ 5] << 8);
 8000ce2:	4b1d      	ldr	r3, [pc, #116]	; (8000d58 <getData+0xf4>)
 8000ce4:	791b      	ldrb	r3, [r3, #4]
 8000ce6:	b29a      	uxth	r2, r3
 8000ce8:	4b1b      	ldr	r3, [pc, #108]	; (8000d58 <getData+0xf4>)
 8000cea:	795b      	ldrb	r3, [r3, #5]
 8000cec:	b29b      	uxth	r3, r3
 8000cee:	021b      	lsls	r3, r3, #8
 8000cf0:	b29b      	uxth	r3, r3
 8000cf2:	4413      	add	r3, r2
 8000cf4:	b29b      	uxth	r3, r3
 8000cf6:	b21a      	sxth	r2, r3
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	801a      	strh	r2, [r3, #0]



    // Convert temperature from hundredths
    // of a degree to a whole number
   *temp = *temp / 100;
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d02:	4a16      	ldr	r2, [pc, #88]	; (8000d5c <getData+0xf8>)
 8000d04:	fb82 1203 	smull	r1, r2, r2, r3
 8000d08:	1152      	asrs	r2, r2, #5
 8000d0a:	17db      	asrs	r3, r3, #31
 8000d0c:	1ad3      	subs	r3, r2, r3
 8000d0e:	b21a      	sxth	r2, r3
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	801a      	strh	r2, [r3, #0]
    // Then convert Celsius to degrees Fahrenheit


    // - - Evaluate Abnormal Data Values - -
    // Signal strength <= 100
    if( *flux < (int16_t)100)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d1a:	2b63      	cmp	r3, #99	; 0x63
 8000d1c:	dc04      	bgt.n	8000d28 <getData+0xc4>
    {
      tfStatus = TFL_WEAK;
 8000d1e:	4b0c      	ldr	r3, [pc, #48]	; (8000d50 <getData+0xec>)
 8000d20:	220a      	movs	r2, #10
 8000d22:	701a      	strb	r2, [r3, #0]
      return false;
 8000d24:	2300      	movs	r3, #0
 8000d26:	e00e      	b.n	8000d46 <getData+0xe2>
    }
    // Signal Strength saturation
    else if( *flux == (int16_t)0xFFFF)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d32:	d104      	bne.n	8000d3e <getData+0xda>
    {
      tfStatus = TFL_STRONG;
 8000d34:	4b06      	ldr	r3, [pc, #24]	; (8000d50 <getData+0xec>)
 8000d36:	220b      	movs	r2, #11
 8000d38:	701a      	strb	r2, [r3, #0]
      return false;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	e003      	b.n	8000d46 <getData+0xe2>
    }
    else
    {
      tfStatus = TFL_READY;
 8000d3e:	4b04      	ldr	r3, [pc, #16]	; (8000d50 <getData+0xec>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	701a      	strb	r2, [r3, #0]
      return true;
 8000d44:	2301      	movs	r3, #1
    }

}
 8000d46:	4618      	mov	r0, r3
 8000d48:	3718      	adds	r7, #24
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	2400010a 	.word	0x2400010a
 8000d54:	2400010f 	.word	0x2400010f
 8000d58:	24000104 	.word	0x24000104
 8000d5c:	51eb851f 	.word	0x51eb851f

08000d60 <Get_Time>:
// - - - - - - - - - - - - - - - - - - - - - - - - - -

//  = =  GET DEVICE TIME (in milliseconds) = = =
//  Pass back time as an unsigned 16-bit variable
bool Get_Time(TF_Luna_Lidar *tf_luna, uint16_t *tim)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b084      	sub	sp, #16
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
 8000d68:	6039      	str	r1, [r7, #0]
    // Recast the address of the unsigned integer `tim`
    // as a pointer to an unsigned byte `p_tim`...
    uint8_t * p_tim = (uint8_t *) *&tim;
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	60fb      	str	r3, [r7, #12]

    // ... then address the pointer as an array.
    if( !readReg( tf_luna, TFL_TICK_LO)) return false;
 8000d6e:	2106      	movs	r1, #6
 8000d70:	6878      	ldr	r0, [r7, #4]
 8000d72:	f000 f8a9 	bl	8000ec8 <readReg>
 8000d76:	4603      	mov	r3, r0
 8000d78:	f083 0301 	eor.w	r3, r3, #1
 8000d7c:	b2db      	uxtb	r3, r3
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d001      	beq.n	8000d86 <Get_Time+0x26>
 8000d82:	2300      	movs	r3, #0
 8000d84:	e015      	b.n	8000db2 <Get_Time+0x52>
        else p_tim[ 0] = regReply;  // Read into `tim` array
 8000d86:	4b0d      	ldr	r3, [pc, #52]	; (8000dbc <Get_Time+0x5c>)
 8000d88:	781a      	ldrb	r2, [r3, #0]
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	701a      	strb	r2, [r3, #0]
    if( !readReg( tf_luna, TFL_TICK_HI)) return false;
 8000d8e:	2107      	movs	r1, #7
 8000d90:	6878      	ldr	r0, [r7, #4]
 8000d92:	f000 f899 	bl	8000ec8 <readReg>
 8000d96:	4603      	mov	r3, r0
 8000d98:	f083 0301 	eor.w	r3, r3, #1
 8000d9c:	b2db      	uxtb	r3, r3
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d001      	beq.n	8000da6 <Get_Time+0x46>
 8000da2:	2300      	movs	r3, #0
 8000da4:	e005      	b.n	8000db2 <Get_Time+0x52>
        else p_tim[ 1] = regReply;  // Read into `tim` array
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	3301      	adds	r3, #1
 8000daa:	4a04      	ldr	r2, [pc, #16]	; (8000dbc <Get_Time+0x5c>)
 8000dac:	7812      	ldrb	r2, [r2, #0]
 8000dae:	701a      	strb	r2, [r3, #0]
    return true;
 8000db0:	2301      	movs	r3, #1
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	3710      	adds	r7, #16
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	2400010f 	.word	0x2400010f

08000dc0 <Get_Prod_Code>:
// When you pass an array as a parameter to a function
// it decays into a pointer to the first element of the array.
// The 14 byte array variable `tfCode` declared in the example
// sketch decays to the array pointer `p_cod`.
bool Get_Prod_Code(TF_Luna_Lidar *tf_luna, uint8_t * p_cod)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b084      	sub	sp, #16
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
 8000dc8:	6039      	str	r1, [r7, #0]
   for (uint8_t i = 0; i < 14; ++i)
 8000dca:	2300      	movs	r3, #0
 8000dcc:	73fb      	strb	r3, [r7, #15]
 8000dce:	e017      	b.n	8000e00 <Get_Prod_Code+0x40>
    {
      if( !readReg(tf_luna, ( 0x10 + i))) return false;
 8000dd0:	7bfb      	ldrb	r3, [r7, #15]
 8000dd2:	3310      	adds	r3, #16
 8000dd4:	b2db      	uxtb	r3, r3
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	6878      	ldr	r0, [r7, #4]
 8000dda:	f000 f875 	bl	8000ec8 <readReg>
 8000dde:	4603      	mov	r3, r0
 8000de0:	f083 0301 	eor.w	r3, r3, #1
 8000de4:	b2db      	uxtb	r3, r3
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d001      	beq.n	8000dee <Get_Prod_Code+0x2e>
 8000dea:	2300      	movs	r3, #0
 8000dec:	e00c      	b.n	8000e08 <Get_Prod_Code+0x48>
        else p_cod[ i] = regReply;  // Read into product code array
 8000dee:	7bfb      	ldrb	r3, [r7, #15]
 8000df0:	683a      	ldr	r2, [r7, #0]
 8000df2:	4413      	add	r3, r2
 8000df4:	4a06      	ldr	r2, [pc, #24]	; (8000e10 <Get_Prod_Code+0x50>)
 8000df6:	7812      	ldrb	r2, [r2, #0]
 8000df8:	701a      	strb	r2, [r3, #0]
   for (uint8_t i = 0; i < 14; ++i)
 8000dfa:	7bfb      	ldrb	r3, [r7, #15]
 8000dfc:	3301      	adds	r3, #1
 8000dfe:	73fb      	strb	r3, [r7, #15]
 8000e00:	7bfb      	ldrb	r3, [r7, #15]
 8000e02:	2b0d      	cmp	r3, #13
 8000e04:	d9e4      	bls.n	8000dd0 <Get_Prod_Code+0x10>
    }
    return true;
 8000e06:	2301      	movs	r3, #1
}
 8000e08:	4618      	mov	r0, r3
 8000e0a:	3710      	adds	r7, #16
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	2400010f 	.word	0x2400010f

08000e14 <Get_Firmware_Version>:

//  = = = =    GET FIRMWARE VERSION   = = = =
// The 3 byte array variable `tfVer` declared in the
// example sketch decays to the array pointer `p_ver`.
bool Get_Firmware_Version(TF_Luna_Lidar *tf_luna, uint8_t * p_ver)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b084      	sub	sp, #16
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
 8000e1c:	6039      	str	r1, [r7, #0]
    for (uint8_t i = 0; i < 3; ++i)
 8000e1e:	2300      	movs	r3, #0
 8000e20:	73fb      	strb	r3, [r7, #15]
 8000e22:	e017      	b.n	8000e54 <Get_Firmware_Version+0x40>
    {
      if( !readReg( tf_luna, ( 0x0A + i))) return false;
 8000e24:	7bfb      	ldrb	r3, [r7, #15]
 8000e26:	330a      	adds	r3, #10
 8000e28:	b2db      	uxtb	r3, r3
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	6878      	ldr	r0, [r7, #4]
 8000e2e:	f000 f84b 	bl	8000ec8 <readReg>
 8000e32:	4603      	mov	r3, r0
 8000e34:	f083 0301 	eor.w	r3, r3, #1
 8000e38:	b2db      	uxtb	r3, r3
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d001      	beq.n	8000e42 <Get_Firmware_Version+0x2e>
 8000e3e:	2300      	movs	r3, #0
 8000e40:	e00c      	b.n	8000e5c <Get_Firmware_Version+0x48>
        else p_ver[ i] = regReply;  // Read into version array
 8000e42:	7bfb      	ldrb	r3, [r7, #15]
 8000e44:	683a      	ldr	r2, [r7, #0]
 8000e46:	4413      	add	r3, r2
 8000e48:	4a06      	ldr	r2, [pc, #24]	; (8000e64 <Get_Firmware_Version+0x50>)
 8000e4a:	7812      	ldrb	r2, [r2, #0]
 8000e4c:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < 3; ++i)
 8000e4e:	7bfb      	ldrb	r3, [r7, #15]
 8000e50:	3301      	adds	r3, #1
 8000e52:	73fb      	strb	r3, [r7, #15]
 8000e54:	7bfb      	ldrb	r3, [r7, #15]
 8000e56:	2b02      	cmp	r3, #2
 8000e58:	d9e4      	bls.n	8000e24 <Get_Firmware_Version+0x10>
    }
    return true;
 8000e5a:	2301      	movs	r3, #1
}
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	3710      	adds	r7, #16
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	2400010f 	.word	0x2400010f

08000e68 <Get_Frame_Rate>:
    return true;
}

//  = = = = = =    GET FRAME RATE   = = = = = =
bool Get_Frame_Rate( TF_Luna_Lidar *tf_luna, uint16_t *frm)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b084      	sub	sp, #16
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
 8000e70:	6039      	str	r1, [r7, #0]
    uint8_t * p_frm = (uint8_t *) *&frm;
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	60fb      	str	r3, [r7, #12]
    if( !readReg( tf_luna, TFL_FPS_LO)) return false;
 8000e76:	2126      	movs	r1, #38	; 0x26
 8000e78:	6878      	ldr	r0, [r7, #4]
 8000e7a:	f000 f825 	bl	8000ec8 <readReg>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	f083 0301 	eor.w	r3, r3, #1
 8000e84:	b2db      	uxtb	r3, r3
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d001      	beq.n	8000e8e <Get_Frame_Rate+0x26>
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	e015      	b.n	8000eba <Get_Frame_Rate+0x52>
        else p_frm[ 0] = regReply;  // Read into `frm` array
 8000e8e:	4b0d      	ldr	r3, [pc, #52]	; (8000ec4 <Get_Frame_Rate+0x5c>)
 8000e90:	781a      	ldrb	r2, [r3, #0]
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	701a      	strb	r2, [r3, #0]
    if( !readReg( tf_luna, TFL_FPS_HI)) return false;
 8000e96:	2127      	movs	r1, #39	; 0x27
 8000e98:	6878      	ldr	r0, [r7, #4]
 8000e9a:	f000 f815 	bl	8000ec8 <readReg>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	f083 0301 	eor.w	r3, r3, #1
 8000ea4:	b2db      	uxtb	r3, r3
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d001      	beq.n	8000eae <Get_Frame_Rate+0x46>
 8000eaa:	2300      	movs	r3, #0
 8000eac:	e005      	b.n	8000eba <Get_Frame_Rate+0x52>
        else p_frm[ 1] = regReply;  // Read into `frm` array
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	3301      	adds	r3, #1
 8000eb2:	4a04      	ldr	r2, [pc, #16]	; (8000ec4 <Get_Frame_Rate+0x5c>)
 8000eb4:	7812      	ldrb	r2, [r2, #0]
 8000eb6:	701a      	strb	r2, [r3, #0]
    return true;
 8000eb8:	2301      	movs	r3, #1
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	3710      	adds	r7, #16
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	2400010f 	.word	0x2400010f

08000ec8 <readReg>:

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
//       READ OR WRITE A GIVEN REGISTER OF THE SLAVE DEVICE
// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
bool readReg( TF_Luna_Lidar *tf_luna, uint8_t nmbr)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b084      	sub	sp, #16
 8000ecc:	af02      	add	r7, sp, #8
 8000ece:	6078      	str	r0, [r7, #4]
 8000ed0:	460b      	mov	r3, r1
 8000ed2:	70fb      	strb	r3, [r7, #3]


  if( HAL_I2C_Master_Transmit(tf_luna->i2c, tf_luna->TF_Luna_address<<1, &nmbr, 1, 1000) != 0)  // If write error...
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	6818      	ldr	r0, [r3, #0]
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	791b      	ldrb	r3, [r3, #4]
 8000edc:	b29b      	uxth	r3, r3
 8000ede:	005b      	lsls	r3, r3, #1
 8000ee0:	b299      	uxth	r1, r3
 8000ee2:	1cfa      	adds	r2, r7, #3
 8000ee4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ee8:	9300      	str	r3, [sp, #0]
 8000eea:	2301      	movs	r3, #1
 8000eec:	f000 fdb2 	bl	8001a54 <HAL_I2C_Master_Transmit>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d004      	beq.n	8000f00 <readReg+0x38>
  {
    tfStatus = TFL_I2CWRITE;        // then set status code...
 8000ef6:	4b10      	ldr	r3, [pc, #64]	; (8000f38 <readReg+0x70>)
 8000ef8:	2208      	movs	r2, #8
 8000efa:	701a      	strb	r2, [r3, #0]
    return false;                   // and return `false`.
 8000efc:	2300      	movs	r3, #0
 8000efe:	e016      	b.n	8000f2e <readReg+0x66>
  }
  // Request 1 byte from the device
  // and release bus when finished.


   if( HAL_I2C_Master_Receive(tf_luna->i2c, tf_luna->TF_Luna_address<<1, &regReply, 1, 1000) != 0)            // If read error...
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	6818      	ldr	r0, [r3, #0]
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	791b      	ldrb	r3, [r3, #4]
 8000f08:	b29b      	uxth	r3, r3
 8000f0a:	005b      	lsls	r3, r3, #1
 8000f0c:	b299      	uxth	r1, r3
 8000f0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f12:	9300      	str	r3, [sp, #0]
 8000f14:	2301      	movs	r3, #1
 8000f16:	4a09      	ldr	r2, [pc, #36]	; (8000f3c <readReg+0x74>)
 8000f18:	f000 fe90 	bl	8001c3c <HAL_I2C_Master_Receive>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d004      	beq.n	8000f2c <readReg+0x64>
    {
      tfStatus = TFL_I2CREAD;         // then set status code.
 8000f22:	4b05      	ldr	r3, [pc, #20]	; (8000f38 <readReg+0x70>)
 8000f24:	2207      	movs	r2, #7
 8000f26:	701a      	strb	r2, [r3, #0]
      return false;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	e000      	b.n	8000f2e <readReg+0x66>
    }

  return true;
 8000f2c:	2301      	movs	r3, #1
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	3708      	adds	r7, #8
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	2400010a 	.word	0x2400010a
 8000f3c:	2400010f 	.word	0x2400010f

08000f40 <printStatus>:
// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

// Called by either `printFrame()` or `printReply()`
// Print status condition either `READY` or error type
void printStatus()
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0


	printf("Status: ");
 8000f44:	483d      	ldr	r0, [pc, #244]	; (800103c <printStatus+0xfc>)
 8000f46:	f004 ffc5 	bl	8005ed4 <iprintf>
	if( tfStatus == TFL_READY)          printf( "READY");
 8000f4a:	4b3d      	ldr	r3, [pc, #244]	; (8001040 <printStatus+0x100>)
 8000f4c:	781b      	ldrb	r3, [r3, #0]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d103      	bne.n	8000f5a <printStatus+0x1a>
 8000f52:	483c      	ldr	r0, [pc, #240]	; (8001044 <printStatus+0x104>)
 8000f54:	f004 ffbe 	bl	8005ed4 <iprintf>
 8000f58:	e06a      	b.n	8001030 <printStatus+0xf0>
	    else if( tfStatus == TFL_SERIAL)    printf( "SERIAL");
 8000f5a:	4b39      	ldr	r3, [pc, #228]	; (8001040 <printStatus+0x100>)
 8000f5c:	781b      	ldrb	r3, [r3, #0]
 8000f5e:	2b01      	cmp	r3, #1
 8000f60:	d103      	bne.n	8000f6a <printStatus+0x2a>
 8000f62:	4839      	ldr	r0, [pc, #228]	; (8001048 <printStatus+0x108>)
 8000f64:	f004 ffb6 	bl	8005ed4 <iprintf>
 8000f68:	e062      	b.n	8001030 <printStatus+0xf0>
	    else if( tfStatus == TFL_HEADER)    printf( "HEADER");
 8000f6a:	4b35      	ldr	r3, [pc, #212]	; (8001040 <printStatus+0x100>)
 8000f6c:	781b      	ldrb	r3, [r3, #0]
 8000f6e:	2b02      	cmp	r3, #2
 8000f70:	d103      	bne.n	8000f7a <printStatus+0x3a>
 8000f72:	4836      	ldr	r0, [pc, #216]	; (800104c <printStatus+0x10c>)
 8000f74:	f004 ffae 	bl	8005ed4 <iprintf>
 8000f78:	e05a      	b.n	8001030 <printStatus+0xf0>
	    else if( tfStatus == TFL_CHECKSUM)  printf( "CHECKSUM");
 8000f7a:	4b31      	ldr	r3, [pc, #196]	; (8001040 <printStatus+0x100>)
 8000f7c:	781b      	ldrb	r3, [r3, #0]
 8000f7e:	2b03      	cmp	r3, #3
 8000f80:	d103      	bne.n	8000f8a <printStatus+0x4a>
 8000f82:	4833      	ldr	r0, [pc, #204]	; (8001050 <printStatus+0x110>)
 8000f84:	f004 ffa6 	bl	8005ed4 <iprintf>
 8000f88:	e052      	b.n	8001030 <printStatus+0xf0>
	    else if( tfStatus == TFL_TIMEOUT)   printf( "TIMEOUT");
 8000f8a:	4b2d      	ldr	r3, [pc, #180]	; (8001040 <printStatus+0x100>)
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	2b04      	cmp	r3, #4
 8000f90:	d103      	bne.n	8000f9a <printStatus+0x5a>
 8000f92:	4830      	ldr	r0, [pc, #192]	; (8001054 <printStatus+0x114>)
 8000f94:	f004 ff9e 	bl	8005ed4 <iprintf>
 8000f98:	e04a      	b.n	8001030 <printStatus+0xf0>
	    else if( tfStatus == TFL_PASS)      printf( "PASS");
 8000f9a:	4b29      	ldr	r3, [pc, #164]	; (8001040 <printStatus+0x100>)
 8000f9c:	781b      	ldrb	r3, [r3, #0]
 8000f9e:	2b05      	cmp	r3, #5
 8000fa0:	d103      	bne.n	8000faa <printStatus+0x6a>
 8000fa2:	482d      	ldr	r0, [pc, #180]	; (8001058 <printStatus+0x118>)
 8000fa4:	f004 ff96 	bl	8005ed4 <iprintf>
 8000fa8:	e042      	b.n	8001030 <printStatus+0xf0>
	    else if( tfStatus == TFL_FAIL)      printf( "FAIL");
 8000faa:	4b25      	ldr	r3, [pc, #148]	; (8001040 <printStatus+0x100>)
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	2b06      	cmp	r3, #6
 8000fb0:	d103      	bne.n	8000fba <printStatus+0x7a>
 8000fb2:	482a      	ldr	r0, [pc, #168]	; (800105c <printStatus+0x11c>)
 8000fb4:	f004 ff8e 	bl	8005ed4 <iprintf>
 8000fb8:	e03a      	b.n	8001030 <printStatus+0xf0>
	    else if( tfStatus == TFL_I2CREAD)   printf( "I2C-READ");
 8000fba:	4b21      	ldr	r3, [pc, #132]	; (8001040 <printStatus+0x100>)
 8000fbc:	781b      	ldrb	r3, [r3, #0]
 8000fbe:	2b07      	cmp	r3, #7
 8000fc0:	d103      	bne.n	8000fca <printStatus+0x8a>
 8000fc2:	4827      	ldr	r0, [pc, #156]	; (8001060 <printStatus+0x120>)
 8000fc4:	f004 ff86 	bl	8005ed4 <iprintf>
 8000fc8:	e032      	b.n	8001030 <printStatus+0xf0>
	    else if( tfStatus == TFL_I2CWRITE)  printf( "I2C-WRITE");
 8000fca:	4b1d      	ldr	r3, [pc, #116]	; (8001040 <printStatus+0x100>)
 8000fcc:	781b      	ldrb	r3, [r3, #0]
 8000fce:	2b08      	cmp	r3, #8
 8000fd0:	d103      	bne.n	8000fda <printStatus+0x9a>
 8000fd2:	4824      	ldr	r0, [pc, #144]	; (8001064 <printStatus+0x124>)
 8000fd4:	f004 ff7e 	bl	8005ed4 <iprintf>
 8000fd8:	e02a      	b.n	8001030 <printStatus+0xf0>
	    else if( tfStatus == TFL_I2CLENGTH) printf( "I2C-LENGTH");
 8000fda:	4b19      	ldr	r3, [pc, #100]	; (8001040 <printStatus+0x100>)
 8000fdc:	781b      	ldrb	r3, [r3, #0]
 8000fde:	2b09      	cmp	r3, #9
 8000fe0:	d103      	bne.n	8000fea <printStatus+0xaa>
 8000fe2:	4821      	ldr	r0, [pc, #132]	; (8001068 <printStatus+0x128>)
 8000fe4:	f004 ff76 	bl	8005ed4 <iprintf>
 8000fe8:	e022      	b.n	8001030 <printStatus+0xf0>
	    else if( tfStatus == TFL_WEAK)      printf( "Signal weak");
 8000fea:	4b15      	ldr	r3, [pc, #84]	; (8001040 <printStatus+0x100>)
 8000fec:	781b      	ldrb	r3, [r3, #0]
 8000fee:	2b0a      	cmp	r3, #10
 8000ff0:	d103      	bne.n	8000ffa <printStatus+0xba>
 8000ff2:	481e      	ldr	r0, [pc, #120]	; (800106c <printStatus+0x12c>)
 8000ff4:	f004 ff6e 	bl	8005ed4 <iprintf>
 8000ff8:	e01a      	b.n	8001030 <printStatus+0xf0>
	    else if( tfStatus == TFL_STRONG)    printf( "Signal strong");
 8000ffa:	4b11      	ldr	r3, [pc, #68]	; (8001040 <printStatus+0x100>)
 8000ffc:	781b      	ldrb	r3, [r3, #0]
 8000ffe:	2b0b      	cmp	r3, #11
 8001000:	d103      	bne.n	800100a <printStatus+0xca>
 8001002:	481b      	ldr	r0, [pc, #108]	; (8001070 <printStatus+0x130>)
 8001004:	f004 ff66 	bl	8005ed4 <iprintf>
 8001008:	e012      	b.n	8001030 <printStatus+0xf0>
	    else if( tfStatus == TFL_FLOOD)     printf( "Ambient light");
 800100a:	4b0d      	ldr	r3, [pc, #52]	; (8001040 <printStatus+0x100>)
 800100c:	781b      	ldrb	r3, [r3, #0]
 800100e:	2b0c      	cmp	r3, #12
 8001010:	d103      	bne.n	800101a <printStatus+0xda>
 8001012:	4818      	ldr	r0, [pc, #96]	; (8001074 <printStatus+0x134>)
 8001014:	f004 ff5e 	bl	8005ed4 <iprintf>
 8001018:	e00a      	b.n	8001030 <printStatus+0xf0>
	    else if( tfStatus == TFL_INVALID)   printf( "No Command");
 800101a:	4b09      	ldr	r3, [pc, #36]	; (8001040 <printStatus+0x100>)
 800101c:	781b      	ldrb	r3, [r3, #0]
 800101e:	2b0e      	cmp	r3, #14
 8001020:	d103      	bne.n	800102a <printStatus+0xea>
 8001022:	4815      	ldr	r0, [pc, #84]	; (8001078 <printStatus+0x138>)
 8001024:	f004 ff56 	bl	8005ed4 <iprintf>
 8001028:	e002      	b.n	8001030 <printStatus+0xf0>
	    else printf( "OTHER");
 800102a:	4814      	ldr	r0, [pc, #80]	; (800107c <printStatus+0x13c>)
 800102c:	f004 ff52 	bl	8005ed4 <iprintf>


    printf("\n");
 8001030:	200a      	movs	r0, #10
 8001032:	f004 ff67 	bl	8005f04 <putchar>

}
 8001036:	bf00      	nop
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	08006e5c 	.word	0x08006e5c
 8001040:	2400010a 	.word	0x2400010a
 8001044:	08006e68 	.word	0x08006e68
 8001048:	08006e70 	.word	0x08006e70
 800104c:	08006e78 	.word	0x08006e78
 8001050:	08006e80 	.word	0x08006e80
 8001054:	08006e8c 	.word	0x08006e8c
 8001058:	08006e94 	.word	0x08006e94
 800105c:	08006e9c 	.word	0x08006e9c
 8001060:	08006ea4 	.word	0x08006ea4
 8001064:	08006eb0 	.word	0x08006eb0
 8001068:	08006ebc 	.word	0x08006ebc
 800106c:	08006ec8 	.word	0x08006ec8
 8001070:	08006ed4 	.word	0x08006ed4
 8001074:	08006ee4 	.word	0x08006ee4
 8001078:	08006ef4 	.word	0x08006ef4
 800107c:	08006f00 	.word	0x08006f00

08001080 <printDataArray>:


// Print error type and HEX values
// of each byte in the data frame
void printDataArray()
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
    printStatus();
 8001086:	f7ff ff5b 	bl	8000f40 <printStatus>
    // Print the Hex value of each byte of data
  //  Serial.print(" Data:");
    printf("Data: ");
 800108a:	4812      	ldr	r0, [pc, #72]	; (80010d4 <printDataArray+0x54>)
 800108c:	f004 ff22 	bl	8005ed4 <iprintf>
    for( uint8_t i = 0; i < 6; i++)
 8001090:	2300      	movs	r3, #0
 8001092:	71fb      	strb	r3, [r7, #7]
 8001094:	e014      	b.n	80010c0 <printDataArray+0x40>
    {
    	printf("");
    	printf(dataArray[ i] < 16 ? "0" : "");
 8001096:	79fb      	ldrb	r3, [r7, #7]
 8001098:	4a0f      	ldr	r2, [pc, #60]	; (80010d8 <printDataArray+0x58>)
 800109a:	5cd3      	ldrb	r3, [r2, r3]
 800109c:	2b0f      	cmp	r3, #15
 800109e:	d801      	bhi.n	80010a4 <printDataArray+0x24>
 80010a0:	4b0e      	ldr	r3, [pc, #56]	; (80010dc <printDataArray+0x5c>)
 80010a2:	e000      	b.n	80010a6 <printDataArray+0x26>
 80010a4:	4b0e      	ldr	r3, [pc, #56]	; (80010e0 <printDataArray+0x60>)
 80010a6:	4618      	mov	r0, r3
 80010a8:	f004 ff14 	bl	8005ed4 <iprintf>
    	printf("%X ", dataArray[ i]);
 80010ac:	79fb      	ldrb	r3, [r7, #7]
 80010ae:	4a0a      	ldr	r2, [pc, #40]	; (80010d8 <printDataArray+0x58>)
 80010b0:	5cd3      	ldrb	r3, [r2, r3]
 80010b2:	4619      	mov	r1, r3
 80010b4:	480b      	ldr	r0, [pc, #44]	; (80010e4 <printDataArray+0x64>)
 80010b6:	f004 ff0d 	bl	8005ed4 <iprintf>
    for( uint8_t i = 0; i < 6; i++)
 80010ba:	79fb      	ldrb	r3, [r7, #7]
 80010bc:	3301      	adds	r3, #1
 80010be:	71fb      	strb	r3, [r7, #7]
 80010c0:	79fb      	ldrb	r3, [r7, #7]
 80010c2:	2b05      	cmp	r3, #5
 80010c4:	d9e7      	bls.n	8001096 <printDataArray+0x16>
  //    Serial.print(" ");
  //    Serial.print( dataArray[ i] < 16 ? "0" : "");
 //     Serial.print( dataArray[ i], HEX);
    }
    printf("\n");
 80010c6:	200a      	movs	r0, #10
 80010c8:	f004 ff1c 	bl	8005f04 <putchar>
}
 80010cc:	bf00      	nop
 80010ce:	3708      	adds	r7, #8
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	08006f08 	.word	0x08006f08
 80010d8:	24000104 	.word	0x24000104
 80010dc:	08006f10 	.word	0x08006f10
 80010e0:	08006f14 	.word	0x08006f14
 80010e4:	08006f18 	.word	0x08006f18

080010e8 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80010ec:	4b22      	ldr	r3, [pc, #136]	; (8001178 <MX_USART3_UART_Init+0x90>)
 80010ee:	4a23      	ldr	r2, [pc, #140]	; (800117c <MX_USART3_UART_Init+0x94>)
 80010f0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80010f2:	4b21      	ldr	r3, [pc, #132]	; (8001178 <MX_USART3_UART_Init+0x90>)
 80010f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010f8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80010fa:	4b1f      	ldr	r3, [pc, #124]	; (8001178 <MX_USART3_UART_Init+0x90>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001100:	4b1d      	ldr	r3, [pc, #116]	; (8001178 <MX_USART3_UART_Init+0x90>)
 8001102:	2200      	movs	r2, #0
 8001104:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001106:	4b1c      	ldr	r3, [pc, #112]	; (8001178 <MX_USART3_UART_Init+0x90>)
 8001108:	2200      	movs	r2, #0
 800110a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800110c:	4b1a      	ldr	r3, [pc, #104]	; (8001178 <MX_USART3_UART_Init+0x90>)
 800110e:	220c      	movs	r2, #12
 8001110:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001112:	4b19      	ldr	r3, [pc, #100]	; (8001178 <MX_USART3_UART_Init+0x90>)
 8001114:	2200      	movs	r2, #0
 8001116:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001118:	4b17      	ldr	r3, [pc, #92]	; (8001178 <MX_USART3_UART_Init+0x90>)
 800111a:	2200      	movs	r2, #0
 800111c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800111e:	4b16      	ldr	r3, [pc, #88]	; (8001178 <MX_USART3_UART_Init+0x90>)
 8001120:	2200      	movs	r2, #0
 8001122:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001124:	4b14      	ldr	r3, [pc, #80]	; (8001178 <MX_USART3_UART_Init+0x90>)
 8001126:	2200      	movs	r2, #0
 8001128:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800112a:	4b13      	ldr	r3, [pc, #76]	; (8001178 <MX_USART3_UART_Init+0x90>)
 800112c:	2200      	movs	r2, #0
 800112e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001130:	4811      	ldr	r0, [pc, #68]	; (8001178 <MX_USART3_UART_Init+0x90>)
 8001132:	f003 fca1 	bl	8004a78 <HAL_UART_Init>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d001      	beq.n	8001140 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800113c:	f7ff fc34 	bl	80009a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001140:	2100      	movs	r1, #0
 8001142:	480d      	ldr	r0, [pc, #52]	; (8001178 <MX_USART3_UART_Init+0x90>)
 8001144:	f004 fdca 	bl	8005cdc <HAL_UARTEx_SetTxFifoThreshold>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d001      	beq.n	8001152 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800114e:	f7ff fc2b 	bl	80009a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001152:	2100      	movs	r1, #0
 8001154:	4808      	ldr	r0, [pc, #32]	; (8001178 <MX_USART3_UART_Init+0x90>)
 8001156:	f004 fdff 	bl	8005d58 <HAL_UARTEx_SetRxFifoThreshold>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001160:	f7ff fc22 	bl	80009a8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001164:	4804      	ldr	r0, [pc, #16]	; (8001178 <MX_USART3_UART_Init+0x90>)
 8001166:	f004 fd80 	bl	8005c6a <HAL_UARTEx_DisableFifoMode>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d001      	beq.n	8001174 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001170:	f7ff fc1a 	bl	80009a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001174:	bf00      	nop
 8001176:	bd80      	pop	{r7, pc}
 8001178:	24000118 	.word	0x24000118
 800117c:	40004800 	.word	0x40004800

08001180 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b0b8      	sub	sp, #224	; 0xe0
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001188:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800118c:	2200      	movs	r2, #0
 800118e:	601a      	str	r2, [r3, #0]
 8001190:	605a      	str	r2, [r3, #4]
 8001192:	609a      	str	r2, [r3, #8]
 8001194:	60da      	str	r2, [r3, #12]
 8001196:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001198:	f107 0314 	add.w	r3, r7, #20
 800119c:	22b8      	movs	r2, #184	; 0xb8
 800119e:	2100      	movs	r1, #0
 80011a0:	4618      	mov	r0, r3
 80011a2:	f004 fe8f 	bl	8005ec4 <memset>
  if(uartHandle->Instance==USART3)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4a25      	ldr	r2, [pc, #148]	; (8001240 <HAL_UART_MspInit+0xc0>)
 80011ac:	4293      	cmp	r3, r2
 80011ae:	d142      	bne.n	8001236 <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80011b0:	2302      	movs	r3, #2
 80011b2:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80011b4:	2300      	movs	r3, #0
 80011b6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011ba:	f107 0314 	add.w	r3, r7, #20
 80011be:	4618      	mov	r0, r3
 80011c0:	f002 f92c 	bl	800341c <HAL_RCCEx_PeriphCLKConfig>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d001      	beq.n	80011ce <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80011ca:	f7ff fbed 	bl	80009a8 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80011ce:	4b1d      	ldr	r3, [pc, #116]	; (8001244 <HAL_UART_MspInit+0xc4>)
 80011d0:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80011d4:	4a1b      	ldr	r2, [pc, #108]	; (8001244 <HAL_UART_MspInit+0xc4>)
 80011d6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011da:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 80011de:	4b19      	ldr	r3, [pc, #100]	; (8001244 <HAL_UART_MspInit+0xc4>)
 80011e0:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80011e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80011e8:	613b      	str	r3, [r7, #16]
 80011ea:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80011ec:	4b15      	ldr	r3, [pc, #84]	; (8001244 <HAL_UART_MspInit+0xc4>)
 80011ee:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80011f2:	4a14      	ldr	r2, [pc, #80]	; (8001244 <HAL_UART_MspInit+0xc4>)
 80011f4:	f043 0308 	orr.w	r3, r3, #8
 80011f8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80011fc:	4b11      	ldr	r3, [pc, #68]	; (8001244 <HAL_UART_MspInit+0xc4>)
 80011fe:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001202:	f003 0308 	and.w	r3, r3, #8
 8001206:	60fb      	str	r3, [r7, #12]
 8001208:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800120a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800120e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001212:	2302      	movs	r3, #2
 8001214:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001218:	2300      	movs	r3, #0
 800121a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800121e:	2300      	movs	r3, #0
 8001220:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001224:	2307      	movs	r3, #7
 8001226:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800122a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800122e:	4619      	mov	r1, r3
 8001230:	4805      	ldr	r0, [pc, #20]	; (8001248 <HAL_UART_MspInit+0xc8>)
 8001232:	f000 f9cf 	bl	80015d4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001236:	bf00      	nop
 8001238:	37e0      	adds	r7, #224	; 0xe0
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	40004800 	.word	0x40004800
 8001244:	58024400 	.word	0x58024400
 8001248:	58020c00 	.word	0x58020c00

0800124c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800124c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001284 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001250:	f7ff fc7c 	bl	8000b4c <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001254:	480c      	ldr	r0, [pc, #48]	; (8001288 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001256:	490d      	ldr	r1, [pc, #52]	; (800128c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001258:	4a0d      	ldr	r2, [pc, #52]	; (8001290 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800125a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800125c:	e002      	b.n	8001264 <LoopCopyDataInit>

0800125e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800125e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001260:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001262:	3304      	adds	r3, #4

08001264 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8001264:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001266:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001268:	d3f9      	bcc.n	800125e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800126a:	4a0a      	ldr	r2, [pc, #40]	; (8001294 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800126c:	4c0a      	ldr	r4, [pc, #40]	; (8001298 <LoopFillZerobss+0x22>)
  movs r3, #0
 800126e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001270:	e001      	b.n	8001276 <LoopFillZerobss>

08001272 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001272:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001274:	3204      	adds	r2, #4

08001276 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001276:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001278:	d3fb      	bcc.n	8001272 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800127a:	f004 fdff 	bl	8005e7c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800127e:	f7ff faf3 	bl	8000868 <main>
  bx  lr
 8001282:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001284:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8001288:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800128c:	24000078 	.word	0x24000078
  ldr r2, =_sidata
 8001290:	08006ffc 	.word	0x08006ffc
  ldr r2, =_sbss
 8001294:	24000078 	.word	0x24000078
  ldr r4, =_ebss
 8001298:	240001bc 	.word	0x240001bc

0800129c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800129c:	e7fe      	b.n	800129c <ADC_IRQHandler>
	...

080012a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012a6:	2003      	movs	r0, #3
 80012a8:	f000 f962 	bl	8001570 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80012ac:	f001 fee0 	bl	8003070 <HAL_RCC_GetSysClockFreq>
 80012b0:	4602      	mov	r2, r0
 80012b2:	4b15      	ldr	r3, [pc, #84]	; (8001308 <HAL_Init+0x68>)
 80012b4:	699b      	ldr	r3, [r3, #24]
 80012b6:	0a1b      	lsrs	r3, r3, #8
 80012b8:	f003 030f 	and.w	r3, r3, #15
 80012bc:	4913      	ldr	r1, [pc, #76]	; (800130c <HAL_Init+0x6c>)
 80012be:	5ccb      	ldrb	r3, [r1, r3]
 80012c0:	f003 031f 	and.w	r3, r3, #31
 80012c4:	fa22 f303 	lsr.w	r3, r2, r3
 80012c8:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80012ca:	4b0f      	ldr	r3, [pc, #60]	; (8001308 <HAL_Init+0x68>)
 80012cc:	699b      	ldr	r3, [r3, #24]
 80012ce:	f003 030f 	and.w	r3, r3, #15
 80012d2:	4a0e      	ldr	r2, [pc, #56]	; (800130c <HAL_Init+0x6c>)
 80012d4:	5cd3      	ldrb	r3, [r2, r3]
 80012d6:	f003 031f 	and.w	r3, r3, #31
 80012da:	687a      	ldr	r2, [r7, #4]
 80012dc:	fa22 f303 	lsr.w	r3, r2, r3
 80012e0:	4a0b      	ldr	r2, [pc, #44]	; (8001310 <HAL_Init+0x70>)
 80012e2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80012e4:	4a0b      	ldr	r2, [pc, #44]	; (8001314 <HAL_Init+0x74>)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80012ea:	200f      	movs	r0, #15
 80012ec:	f000 f814 	bl	8001318 <HAL_InitTick>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d001      	beq.n	80012fa <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80012f6:	2301      	movs	r3, #1
 80012f8:	e002      	b.n	8001300 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80012fa:	f7ff fb5b 	bl	80009b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012fe:	2300      	movs	r3, #0
}
 8001300:	4618      	mov	r0, r3
 8001302:	3708      	adds	r7, #8
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	58024400 	.word	0x58024400
 800130c:	08006f1c 	.word	0x08006f1c
 8001310:	24000008 	.word	0x24000008
 8001314:	24000004 	.word	0x24000004

08001318 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001320:	4b15      	ldr	r3, [pc, #84]	; (8001378 <HAL_InitTick+0x60>)
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d101      	bne.n	800132c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001328:	2301      	movs	r3, #1
 800132a:	e021      	b.n	8001370 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800132c:	4b13      	ldr	r3, [pc, #76]	; (800137c <HAL_InitTick+0x64>)
 800132e:	681a      	ldr	r2, [r3, #0]
 8001330:	4b11      	ldr	r3, [pc, #68]	; (8001378 <HAL_InitTick+0x60>)
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	4619      	mov	r1, r3
 8001336:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800133a:	fbb3 f3f1 	udiv	r3, r3, r1
 800133e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001342:	4618      	mov	r0, r3
 8001344:	f000 f939 	bl	80015ba <HAL_SYSTICK_Config>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800134e:	2301      	movs	r3, #1
 8001350:	e00e      	b.n	8001370 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	2b0f      	cmp	r3, #15
 8001356:	d80a      	bhi.n	800136e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001358:	2200      	movs	r2, #0
 800135a:	6879      	ldr	r1, [r7, #4]
 800135c:	f04f 30ff 	mov.w	r0, #4294967295
 8001360:	f000 f911 	bl	8001586 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001364:	4a06      	ldr	r2, [pc, #24]	; (8001380 <HAL_InitTick+0x68>)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800136a:	2300      	movs	r3, #0
 800136c:	e000      	b.n	8001370 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800136e:	2301      	movs	r3, #1
}
 8001370:	4618      	mov	r0, r3
 8001372:	3708      	adds	r7, #8
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	24000010 	.word	0x24000010
 800137c:	24000004 	.word	0x24000004
 8001380:	2400000c 	.word	0x2400000c

08001384 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001388:	4b06      	ldr	r3, [pc, #24]	; (80013a4 <HAL_IncTick+0x20>)
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	461a      	mov	r2, r3
 800138e:	4b06      	ldr	r3, [pc, #24]	; (80013a8 <HAL_IncTick+0x24>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4413      	add	r3, r2
 8001394:	4a04      	ldr	r2, [pc, #16]	; (80013a8 <HAL_IncTick+0x24>)
 8001396:	6013      	str	r3, [r2, #0]
}
 8001398:	bf00      	nop
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr
 80013a2:	bf00      	nop
 80013a4:	24000010 	.word	0x24000010
 80013a8:	240001a8 	.word	0x240001a8

080013ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0
  return uwTick;
 80013b0:	4b03      	ldr	r3, [pc, #12]	; (80013c0 <HAL_GetTick+0x14>)
 80013b2:	681b      	ldr	r3, [r3, #0]
}
 80013b4:	4618      	mov	r0, r3
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr
 80013be:	bf00      	nop
 80013c0:	240001a8 	.word	0x240001a8

080013c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b084      	sub	sp, #16
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013cc:	f7ff ffee 	bl	80013ac <HAL_GetTick>
 80013d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013dc:	d005      	beq.n	80013ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013de:	4b0a      	ldr	r3, [pc, #40]	; (8001408 <HAL_Delay+0x44>)
 80013e0:	781b      	ldrb	r3, [r3, #0]
 80013e2:	461a      	mov	r2, r3
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	4413      	add	r3, r2
 80013e8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80013ea:	bf00      	nop
 80013ec:	f7ff ffde 	bl	80013ac <HAL_GetTick>
 80013f0:	4602      	mov	r2, r0
 80013f2:	68bb      	ldr	r3, [r7, #8]
 80013f4:	1ad3      	subs	r3, r2, r3
 80013f6:	68fa      	ldr	r2, [r7, #12]
 80013f8:	429a      	cmp	r2, r3
 80013fa:	d8f7      	bhi.n	80013ec <HAL_Delay+0x28>
  {
  }
}
 80013fc:	bf00      	nop
 80013fe:	bf00      	nop
 8001400:	3710      	adds	r7, #16
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	24000010 	.word	0x24000010

0800140c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800140c:	b480      	push	{r7}
 800140e:	b085      	sub	sp, #20
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	f003 0307 	and.w	r3, r3, #7
 800141a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800141c:	4b0b      	ldr	r3, [pc, #44]	; (800144c <__NVIC_SetPriorityGrouping+0x40>)
 800141e:	68db      	ldr	r3, [r3, #12]
 8001420:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001422:	68ba      	ldr	r2, [r7, #8]
 8001424:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001428:	4013      	ands	r3, r2
 800142a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001430:	68bb      	ldr	r3, [r7, #8]
 8001432:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001434:	4b06      	ldr	r3, [pc, #24]	; (8001450 <__NVIC_SetPriorityGrouping+0x44>)
 8001436:	4313      	orrs	r3, r2
 8001438:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800143a:	4a04      	ldr	r2, [pc, #16]	; (800144c <__NVIC_SetPriorityGrouping+0x40>)
 800143c:	68bb      	ldr	r3, [r7, #8]
 800143e:	60d3      	str	r3, [r2, #12]
}
 8001440:	bf00      	nop
 8001442:	3714      	adds	r7, #20
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr
 800144c:	e000ed00 	.word	0xe000ed00
 8001450:	05fa0000 	.word	0x05fa0000

08001454 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001458:	4b04      	ldr	r3, [pc, #16]	; (800146c <__NVIC_GetPriorityGrouping+0x18>)
 800145a:	68db      	ldr	r3, [r3, #12]
 800145c:	0a1b      	lsrs	r3, r3, #8
 800145e:	f003 0307 	and.w	r3, r3, #7
}
 8001462:	4618      	mov	r0, r3
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr
 800146c:	e000ed00 	.word	0xe000ed00

08001470 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001470:	b480      	push	{r7}
 8001472:	b083      	sub	sp, #12
 8001474:	af00      	add	r7, sp, #0
 8001476:	4603      	mov	r3, r0
 8001478:	6039      	str	r1, [r7, #0]
 800147a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800147c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001480:	2b00      	cmp	r3, #0
 8001482:	db0a      	blt.n	800149a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	b2da      	uxtb	r2, r3
 8001488:	490c      	ldr	r1, [pc, #48]	; (80014bc <__NVIC_SetPriority+0x4c>)
 800148a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800148e:	0112      	lsls	r2, r2, #4
 8001490:	b2d2      	uxtb	r2, r2
 8001492:	440b      	add	r3, r1
 8001494:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001498:	e00a      	b.n	80014b0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	b2da      	uxtb	r2, r3
 800149e:	4908      	ldr	r1, [pc, #32]	; (80014c0 <__NVIC_SetPriority+0x50>)
 80014a0:	88fb      	ldrh	r3, [r7, #6]
 80014a2:	f003 030f 	and.w	r3, r3, #15
 80014a6:	3b04      	subs	r3, #4
 80014a8:	0112      	lsls	r2, r2, #4
 80014aa:	b2d2      	uxtb	r2, r2
 80014ac:	440b      	add	r3, r1
 80014ae:	761a      	strb	r2, [r3, #24]
}
 80014b0:	bf00      	nop
 80014b2:	370c      	adds	r7, #12
 80014b4:	46bd      	mov	sp, r7
 80014b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ba:	4770      	bx	lr
 80014bc:	e000e100 	.word	0xe000e100
 80014c0:	e000ed00 	.word	0xe000ed00

080014c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b089      	sub	sp, #36	; 0x24
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	60f8      	str	r0, [r7, #12]
 80014cc:	60b9      	str	r1, [r7, #8]
 80014ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	f003 0307 	and.w	r3, r3, #7
 80014d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014d8:	69fb      	ldr	r3, [r7, #28]
 80014da:	f1c3 0307 	rsb	r3, r3, #7
 80014de:	2b04      	cmp	r3, #4
 80014e0:	bf28      	it	cs
 80014e2:	2304      	movcs	r3, #4
 80014e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014e6:	69fb      	ldr	r3, [r7, #28]
 80014e8:	3304      	adds	r3, #4
 80014ea:	2b06      	cmp	r3, #6
 80014ec:	d902      	bls.n	80014f4 <NVIC_EncodePriority+0x30>
 80014ee:	69fb      	ldr	r3, [r7, #28]
 80014f0:	3b03      	subs	r3, #3
 80014f2:	e000      	b.n	80014f6 <NVIC_EncodePriority+0x32>
 80014f4:	2300      	movs	r3, #0
 80014f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014f8:	f04f 32ff 	mov.w	r2, #4294967295
 80014fc:	69bb      	ldr	r3, [r7, #24]
 80014fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001502:	43da      	mvns	r2, r3
 8001504:	68bb      	ldr	r3, [r7, #8]
 8001506:	401a      	ands	r2, r3
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800150c:	f04f 31ff 	mov.w	r1, #4294967295
 8001510:	697b      	ldr	r3, [r7, #20]
 8001512:	fa01 f303 	lsl.w	r3, r1, r3
 8001516:	43d9      	mvns	r1, r3
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800151c:	4313      	orrs	r3, r2
         );
}
 800151e:	4618      	mov	r0, r3
 8001520:	3724      	adds	r7, #36	; 0x24
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr
	...

0800152c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b082      	sub	sp, #8
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	3b01      	subs	r3, #1
 8001538:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800153c:	d301      	bcc.n	8001542 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800153e:	2301      	movs	r3, #1
 8001540:	e00f      	b.n	8001562 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001542:	4a0a      	ldr	r2, [pc, #40]	; (800156c <SysTick_Config+0x40>)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	3b01      	subs	r3, #1
 8001548:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800154a:	210f      	movs	r1, #15
 800154c:	f04f 30ff 	mov.w	r0, #4294967295
 8001550:	f7ff ff8e 	bl	8001470 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001554:	4b05      	ldr	r3, [pc, #20]	; (800156c <SysTick_Config+0x40>)
 8001556:	2200      	movs	r2, #0
 8001558:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800155a:	4b04      	ldr	r3, [pc, #16]	; (800156c <SysTick_Config+0x40>)
 800155c:	2207      	movs	r2, #7
 800155e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001560:	2300      	movs	r3, #0
}
 8001562:	4618      	mov	r0, r3
 8001564:	3708      	adds	r7, #8
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	e000e010 	.word	0xe000e010

08001570 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b082      	sub	sp, #8
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001578:	6878      	ldr	r0, [r7, #4]
 800157a:	f7ff ff47 	bl	800140c <__NVIC_SetPriorityGrouping>
}
 800157e:	bf00      	nop
 8001580:	3708      	adds	r7, #8
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}

08001586 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001586:	b580      	push	{r7, lr}
 8001588:	b086      	sub	sp, #24
 800158a:	af00      	add	r7, sp, #0
 800158c:	4603      	mov	r3, r0
 800158e:	60b9      	str	r1, [r7, #8]
 8001590:	607a      	str	r2, [r7, #4]
 8001592:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001594:	f7ff ff5e 	bl	8001454 <__NVIC_GetPriorityGrouping>
 8001598:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800159a:	687a      	ldr	r2, [r7, #4]
 800159c:	68b9      	ldr	r1, [r7, #8]
 800159e:	6978      	ldr	r0, [r7, #20]
 80015a0:	f7ff ff90 	bl	80014c4 <NVIC_EncodePriority>
 80015a4:	4602      	mov	r2, r0
 80015a6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80015aa:	4611      	mov	r1, r2
 80015ac:	4618      	mov	r0, r3
 80015ae:	f7ff ff5f 	bl	8001470 <__NVIC_SetPriority>
}
 80015b2:	bf00      	nop
 80015b4:	3718      	adds	r7, #24
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}

080015ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015ba:	b580      	push	{r7, lr}
 80015bc:	b082      	sub	sp, #8
 80015be:	af00      	add	r7, sp, #0
 80015c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015c2:	6878      	ldr	r0, [r7, #4]
 80015c4:	f7ff ffb2 	bl	800152c <SysTick_Config>
 80015c8:	4603      	mov	r3, r0
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	3708      	adds	r7, #8
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
	...

080015d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b089      	sub	sp, #36	; 0x24
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
 80015dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80015de:	2300      	movs	r3, #0
 80015e0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80015e2:	4b89      	ldr	r3, [pc, #548]	; (8001808 <HAL_GPIO_Init+0x234>)
 80015e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80015e6:	e194      	b.n	8001912 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	681a      	ldr	r2, [r3, #0]
 80015ec:	2101      	movs	r1, #1
 80015ee:	69fb      	ldr	r3, [r7, #28]
 80015f0:	fa01 f303 	lsl.w	r3, r1, r3
 80015f4:	4013      	ands	r3, r2
 80015f6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80015f8:	693b      	ldr	r3, [r7, #16]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	f000 8186 	beq.w	800190c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	f003 0303 	and.w	r3, r3, #3
 8001608:	2b01      	cmp	r3, #1
 800160a:	d005      	beq.n	8001618 <HAL_GPIO_Init+0x44>
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	f003 0303 	and.w	r3, r3, #3
 8001614:	2b02      	cmp	r3, #2
 8001616:	d130      	bne.n	800167a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	689b      	ldr	r3, [r3, #8]
 800161c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800161e:	69fb      	ldr	r3, [r7, #28]
 8001620:	005b      	lsls	r3, r3, #1
 8001622:	2203      	movs	r2, #3
 8001624:	fa02 f303 	lsl.w	r3, r2, r3
 8001628:	43db      	mvns	r3, r3
 800162a:	69ba      	ldr	r2, [r7, #24]
 800162c:	4013      	ands	r3, r2
 800162e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	68da      	ldr	r2, [r3, #12]
 8001634:	69fb      	ldr	r3, [r7, #28]
 8001636:	005b      	lsls	r3, r3, #1
 8001638:	fa02 f303 	lsl.w	r3, r2, r3
 800163c:	69ba      	ldr	r2, [r7, #24]
 800163e:	4313      	orrs	r3, r2
 8001640:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	69ba      	ldr	r2, [r7, #24]
 8001646:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800164e:	2201      	movs	r2, #1
 8001650:	69fb      	ldr	r3, [r7, #28]
 8001652:	fa02 f303 	lsl.w	r3, r2, r3
 8001656:	43db      	mvns	r3, r3
 8001658:	69ba      	ldr	r2, [r7, #24]
 800165a:	4013      	ands	r3, r2
 800165c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	091b      	lsrs	r3, r3, #4
 8001664:	f003 0201 	and.w	r2, r3, #1
 8001668:	69fb      	ldr	r3, [r7, #28]
 800166a:	fa02 f303 	lsl.w	r3, r2, r3
 800166e:	69ba      	ldr	r2, [r7, #24]
 8001670:	4313      	orrs	r3, r2
 8001672:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	69ba      	ldr	r2, [r7, #24]
 8001678:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	f003 0303 	and.w	r3, r3, #3
 8001682:	2b03      	cmp	r3, #3
 8001684:	d017      	beq.n	80016b6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	68db      	ldr	r3, [r3, #12]
 800168a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800168c:	69fb      	ldr	r3, [r7, #28]
 800168e:	005b      	lsls	r3, r3, #1
 8001690:	2203      	movs	r2, #3
 8001692:	fa02 f303 	lsl.w	r3, r2, r3
 8001696:	43db      	mvns	r3, r3
 8001698:	69ba      	ldr	r2, [r7, #24]
 800169a:	4013      	ands	r3, r2
 800169c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	689a      	ldr	r2, [r3, #8]
 80016a2:	69fb      	ldr	r3, [r7, #28]
 80016a4:	005b      	lsls	r3, r3, #1
 80016a6:	fa02 f303 	lsl.w	r3, r2, r3
 80016aa:	69ba      	ldr	r2, [r7, #24]
 80016ac:	4313      	orrs	r3, r2
 80016ae:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	69ba      	ldr	r2, [r7, #24]
 80016b4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	f003 0303 	and.w	r3, r3, #3
 80016be:	2b02      	cmp	r3, #2
 80016c0:	d123      	bne.n	800170a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80016c2:	69fb      	ldr	r3, [r7, #28]
 80016c4:	08da      	lsrs	r2, r3, #3
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	3208      	adds	r2, #8
 80016ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80016d0:	69fb      	ldr	r3, [r7, #28]
 80016d2:	f003 0307 	and.w	r3, r3, #7
 80016d6:	009b      	lsls	r3, r3, #2
 80016d8:	220f      	movs	r2, #15
 80016da:	fa02 f303 	lsl.w	r3, r2, r3
 80016de:	43db      	mvns	r3, r3
 80016e0:	69ba      	ldr	r2, [r7, #24]
 80016e2:	4013      	ands	r3, r2
 80016e4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	691a      	ldr	r2, [r3, #16]
 80016ea:	69fb      	ldr	r3, [r7, #28]
 80016ec:	f003 0307 	and.w	r3, r3, #7
 80016f0:	009b      	lsls	r3, r3, #2
 80016f2:	fa02 f303 	lsl.w	r3, r2, r3
 80016f6:	69ba      	ldr	r2, [r7, #24]
 80016f8:	4313      	orrs	r3, r2
 80016fa:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80016fc:	69fb      	ldr	r3, [r7, #28]
 80016fe:	08da      	lsrs	r2, r3, #3
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	3208      	adds	r2, #8
 8001704:	69b9      	ldr	r1, [r7, #24]
 8001706:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001710:	69fb      	ldr	r3, [r7, #28]
 8001712:	005b      	lsls	r3, r3, #1
 8001714:	2203      	movs	r2, #3
 8001716:	fa02 f303 	lsl.w	r3, r2, r3
 800171a:	43db      	mvns	r3, r3
 800171c:	69ba      	ldr	r2, [r7, #24]
 800171e:	4013      	ands	r3, r2
 8001720:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	f003 0203 	and.w	r2, r3, #3
 800172a:	69fb      	ldr	r3, [r7, #28]
 800172c:	005b      	lsls	r3, r3, #1
 800172e:	fa02 f303 	lsl.w	r3, r2, r3
 8001732:	69ba      	ldr	r2, [r7, #24]
 8001734:	4313      	orrs	r3, r2
 8001736:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	69ba      	ldr	r2, [r7, #24]
 800173c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001746:	2b00      	cmp	r3, #0
 8001748:	f000 80e0 	beq.w	800190c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800174c:	4b2f      	ldr	r3, [pc, #188]	; (800180c <HAL_GPIO_Init+0x238>)
 800174e:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001752:	4a2e      	ldr	r2, [pc, #184]	; (800180c <HAL_GPIO_Init+0x238>)
 8001754:	f043 0302 	orr.w	r3, r3, #2
 8001758:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 800175c:	4b2b      	ldr	r3, [pc, #172]	; (800180c <HAL_GPIO_Init+0x238>)
 800175e:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001762:	f003 0302 	and.w	r3, r3, #2
 8001766:	60fb      	str	r3, [r7, #12]
 8001768:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800176a:	4a29      	ldr	r2, [pc, #164]	; (8001810 <HAL_GPIO_Init+0x23c>)
 800176c:	69fb      	ldr	r3, [r7, #28]
 800176e:	089b      	lsrs	r3, r3, #2
 8001770:	3302      	adds	r3, #2
 8001772:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001776:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001778:	69fb      	ldr	r3, [r7, #28]
 800177a:	f003 0303 	and.w	r3, r3, #3
 800177e:	009b      	lsls	r3, r3, #2
 8001780:	220f      	movs	r2, #15
 8001782:	fa02 f303 	lsl.w	r3, r2, r3
 8001786:	43db      	mvns	r3, r3
 8001788:	69ba      	ldr	r2, [r7, #24]
 800178a:	4013      	ands	r3, r2
 800178c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	4a20      	ldr	r2, [pc, #128]	; (8001814 <HAL_GPIO_Init+0x240>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d052      	beq.n	800183c <HAL_GPIO_Init+0x268>
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	4a1f      	ldr	r2, [pc, #124]	; (8001818 <HAL_GPIO_Init+0x244>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d031      	beq.n	8001802 <HAL_GPIO_Init+0x22e>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	4a1e      	ldr	r2, [pc, #120]	; (800181c <HAL_GPIO_Init+0x248>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d02b      	beq.n	80017fe <HAL_GPIO_Init+0x22a>
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	4a1d      	ldr	r2, [pc, #116]	; (8001820 <HAL_GPIO_Init+0x24c>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d025      	beq.n	80017fa <HAL_GPIO_Init+0x226>
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	4a1c      	ldr	r2, [pc, #112]	; (8001824 <HAL_GPIO_Init+0x250>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d01f      	beq.n	80017f6 <HAL_GPIO_Init+0x222>
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	4a1b      	ldr	r2, [pc, #108]	; (8001828 <HAL_GPIO_Init+0x254>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d019      	beq.n	80017f2 <HAL_GPIO_Init+0x21e>
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	4a1a      	ldr	r2, [pc, #104]	; (800182c <HAL_GPIO_Init+0x258>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d013      	beq.n	80017ee <HAL_GPIO_Init+0x21a>
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	4a19      	ldr	r2, [pc, #100]	; (8001830 <HAL_GPIO_Init+0x25c>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d00d      	beq.n	80017ea <HAL_GPIO_Init+0x216>
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	4a18      	ldr	r2, [pc, #96]	; (8001834 <HAL_GPIO_Init+0x260>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d007      	beq.n	80017e6 <HAL_GPIO_Init+0x212>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	4a17      	ldr	r2, [pc, #92]	; (8001838 <HAL_GPIO_Init+0x264>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d101      	bne.n	80017e2 <HAL_GPIO_Init+0x20e>
 80017de:	2309      	movs	r3, #9
 80017e0:	e02d      	b.n	800183e <HAL_GPIO_Init+0x26a>
 80017e2:	230a      	movs	r3, #10
 80017e4:	e02b      	b.n	800183e <HAL_GPIO_Init+0x26a>
 80017e6:	2308      	movs	r3, #8
 80017e8:	e029      	b.n	800183e <HAL_GPIO_Init+0x26a>
 80017ea:	2307      	movs	r3, #7
 80017ec:	e027      	b.n	800183e <HAL_GPIO_Init+0x26a>
 80017ee:	2306      	movs	r3, #6
 80017f0:	e025      	b.n	800183e <HAL_GPIO_Init+0x26a>
 80017f2:	2305      	movs	r3, #5
 80017f4:	e023      	b.n	800183e <HAL_GPIO_Init+0x26a>
 80017f6:	2304      	movs	r3, #4
 80017f8:	e021      	b.n	800183e <HAL_GPIO_Init+0x26a>
 80017fa:	2303      	movs	r3, #3
 80017fc:	e01f      	b.n	800183e <HAL_GPIO_Init+0x26a>
 80017fe:	2302      	movs	r3, #2
 8001800:	e01d      	b.n	800183e <HAL_GPIO_Init+0x26a>
 8001802:	2301      	movs	r3, #1
 8001804:	e01b      	b.n	800183e <HAL_GPIO_Init+0x26a>
 8001806:	bf00      	nop
 8001808:	58000080 	.word	0x58000080
 800180c:	58024400 	.word	0x58024400
 8001810:	58000400 	.word	0x58000400
 8001814:	58020000 	.word	0x58020000
 8001818:	58020400 	.word	0x58020400
 800181c:	58020800 	.word	0x58020800
 8001820:	58020c00 	.word	0x58020c00
 8001824:	58021000 	.word	0x58021000
 8001828:	58021400 	.word	0x58021400
 800182c:	58021800 	.word	0x58021800
 8001830:	58021c00 	.word	0x58021c00
 8001834:	58022000 	.word	0x58022000
 8001838:	58022400 	.word	0x58022400
 800183c:	2300      	movs	r3, #0
 800183e:	69fa      	ldr	r2, [r7, #28]
 8001840:	f002 0203 	and.w	r2, r2, #3
 8001844:	0092      	lsls	r2, r2, #2
 8001846:	4093      	lsls	r3, r2
 8001848:	69ba      	ldr	r2, [r7, #24]
 800184a:	4313      	orrs	r3, r2
 800184c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800184e:	4938      	ldr	r1, [pc, #224]	; (8001930 <HAL_GPIO_Init+0x35c>)
 8001850:	69fb      	ldr	r3, [r7, #28]
 8001852:	089b      	lsrs	r3, r3, #2
 8001854:	3302      	adds	r3, #2
 8001856:	69ba      	ldr	r2, [r7, #24]
 8001858:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800185c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001864:	693b      	ldr	r3, [r7, #16]
 8001866:	43db      	mvns	r3, r3
 8001868:	69ba      	ldr	r2, [r7, #24]
 800186a:	4013      	ands	r3, r2
 800186c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001876:	2b00      	cmp	r3, #0
 8001878:	d003      	beq.n	8001882 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800187a:	69ba      	ldr	r2, [r7, #24]
 800187c:	693b      	ldr	r3, [r7, #16]
 800187e:	4313      	orrs	r3, r2
 8001880:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001882:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001886:	69bb      	ldr	r3, [r7, #24]
 8001888:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800188a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	43db      	mvns	r3, r3
 8001896:	69ba      	ldr	r2, [r7, #24]
 8001898:	4013      	ands	r3, r2
 800189a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d003      	beq.n	80018b0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80018a8:	69ba      	ldr	r2, [r7, #24]
 80018aa:	693b      	ldr	r3, [r7, #16]
 80018ac:	4313      	orrs	r3, r2
 80018ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80018b0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80018b4:	69bb      	ldr	r3, [r7, #24]
 80018b6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80018be:	693b      	ldr	r3, [r7, #16]
 80018c0:	43db      	mvns	r3, r3
 80018c2:	69ba      	ldr	r2, [r7, #24]
 80018c4:	4013      	ands	r3, r2
 80018c6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d003      	beq.n	80018dc <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80018d4:	69ba      	ldr	r2, [r7, #24]
 80018d6:	693b      	ldr	r3, [r7, #16]
 80018d8:	4313      	orrs	r3, r2
 80018da:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	69ba      	ldr	r2, [r7, #24]
 80018e0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80018e2:	697b      	ldr	r3, [r7, #20]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80018e8:	693b      	ldr	r3, [r7, #16]
 80018ea:	43db      	mvns	r3, r3
 80018ec:	69ba      	ldr	r2, [r7, #24]
 80018ee:	4013      	ands	r3, r2
 80018f0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d003      	beq.n	8001906 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80018fe:	69ba      	ldr	r2, [r7, #24]
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	4313      	orrs	r3, r2
 8001904:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	69ba      	ldr	r2, [r7, #24]
 800190a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800190c:	69fb      	ldr	r3, [r7, #28]
 800190e:	3301      	adds	r3, #1
 8001910:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	681a      	ldr	r2, [r3, #0]
 8001916:	69fb      	ldr	r3, [r7, #28]
 8001918:	fa22 f303 	lsr.w	r3, r2, r3
 800191c:	2b00      	cmp	r3, #0
 800191e:	f47f ae63 	bne.w	80015e8 <HAL_GPIO_Init+0x14>
  }
}
 8001922:	bf00      	nop
 8001924:	bf00      	nop
 8001926:	3724      	adds	r7, #36	; 0x24
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr
 8001930:	58000400 	.word	0x58000400

08001934 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b082      	sub	sp, #8
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d101      	bne.n	8001946 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001942:	2301      	movs	r3, #1
 8001944:	e07f      	b.n	8001a46 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800194c:	b2db      	uxtb	r3, r3
 800194e:	2b00      	cmp	r3, #0
 8001950:	d106      	bne.n	8001960 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2200      	movs	r2, #0
 8001956:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800195a:	6878      	ldr	r0, [r7, #4]
 800195c:	f7fe ff0c 	bl	8000778 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2224      	movs	r2, #36	; 0x24
 8001964:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	681a      	ldr	r2, [r3, #0]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f022 0201 	bic.w	r2, r2, #1
 8001976:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	685a      	ldr	r2, [r3, #4]
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001984:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	689a      	ldr	r2, [r3, #8]
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001994:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	68db      	ldr	r3, [r3, #12]
 800199a:	2b01      	cmp	r3, #1
 800199c:	d107      	bne.n	80019ae <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	689a      	ldr	r2, [r3, #8]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80019aa:	609a      	str	r2, [r3, #8]
 80019ac:	e006      	b.n	80019bc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	689a      	ldr	r2, [r3, #8]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80019ba:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	68db      	ldr	r3, [r3, #12]
 80019c0:	2b02      	cmp	r3, #2
 80019c2:	d104      	bne.n	80019ce <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80019cc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	6859      	ldr	r1, [r3, #4]
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681a      	ldr	r2, [r3, #0]
 80019d8:	4b1d      	ldr	r3, [pc, #116]	; (8001a50 <HAL_I2C_Init+0x11c>)
 80019da:	430b      	orrs	r3, r1
 80019dc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	68da      	ldr	r2, [r3, #12]
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80019ec:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	691a      	ldr	r2, [r3, #16]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	695b      	ldr	r3, [r3, #20]
 80019f6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	699b      	ldr	r3, [r3, #24]
 80019fe:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	430a      	orrs	r2, r1
 8001a06:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	69d9      	ldr	r1, [r3, #28]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6a1a      	ldr	r2, [r3, #32]
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	430a      	orrs	r2, r1
 8001a16:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	681a      	ldr	r2, [r3, #0]
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f042 0201 	orr.w	r2, r2, #1
 8001a26:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2220      	movs	r2, #32
 8001a32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2200      	movs	r2, #0
 8001a3a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2200      	movs	r2, #0
 8001a40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001a44:	2300      	movs	r3, #0
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	3708      	adds	r7, #8
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	02008000 	.word	0x02008000

08001a54 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b088      	sub	sp, #32
 8001a58:	af02      	add	r7, sp, #8
 8001a5a:	60f8      	str	r0, [r7, #12]
 8001a5c:	607a      	str	r2, [r7, #4]
 8001a5e:	461a      	mov	r2, r3
 8001a60:	460b      	mov	r3, r1
 8001a62:	817b      	strh	r3, [r7, #10]
 8001a64:	4613      	mov	r3, r2
 8001a66:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a6e:	b2db      	uxtb	r3, r3
 8001a70:	2b20      	cmp	r3, #32
 8001a72:	f040 80da 	bne.w	8001c2a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001a7c:	2b01      	cmp	r3, #1
 8001a7e:	d101      	bne.n	8001a84 <HAL_I2C_Master_Transmit+0x30>
 8001a80:	2302      	movs	r3, #2
 8001a82:	e0d3      	b.n	8001c2c <HAL_I2C_Master_Transmit+0x1d8>
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	2201      	movs	r2, #1
 8001a88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001a8c:	f7ff fc8e 	bl	80013ac <HAL_GetTick>
 8001a90:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	9300      	str	r3, [sp, #0]
 8001a96:	2319      	movs	r3, #25
 8001a98:	2201      	movs	r2, #1
 8001a9a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a9e:	68f8      	ldr	r0, [r7, #12]
 8001aa0:	f000 f9e6 	bl	8001e70 <I2C_WaitOnFlagUntilTimeout>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d001      	beq.n	8001aae <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e0be      	b.n	8001c2c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	2221      	movs	r2, #33	; 0x21
 8001ab2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	2210      	movs	r2, #16
 8001aba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	687a      	ldr	r2, [r7, #4]
 8001ac8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	893a      	ldrh	r2, [r7, #8]
 8001ace:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ada:	b29b      	uxth	r3, r3
 8001adc:	2bff      	cmp	r3, #255	; 0xff
 8001ade:	d90e      	bls.n	8001afe <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	22ff      	movs	r2, #255	; 0xff
 8001ae4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001aea:	b2da      	uxtb	r2, r3
 8001aec:	8979      	ldrh	r1, [r7, #10]
 8001aee:	4b51      	ldr	r3, [pc, #324]	; (8001c34 <HAL_I2C_Master_Transmit+0x1e0>)
 8001af0:	9300      	str	r3, [sp, #0]
 8001af2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001af6:	68f8      	ldr	r0, [r7, #12]
 8001af8:	f000 fbdc 	bl	80022b4 <I2C_TransferConfig>
 8001afc:	e06c      	b.n	8001bd8 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b02:	b29a      	uxth	r2, r3
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b0c:	b2da      	uxtb	r2, r3
 8001b0e:	8979      	ldrh	r1, [r7, #10]
 8001b10:	4b48      	ldr	r3, [pc, #288]	; (8001c34 <HAL_I2C_Master_Transmit+0x1e0>)
 8001b12:	9300      	str	r3, [sp, #0]
 8001b14:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b18:	68f8      	ldr	r0, [r7, #12]
 8001b1a:	f000 fbcb 	bl	80022b4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001b1e:	e05b      	b.n	8001bd8 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b20:	697a      	ldr	r2, [r7, #20]
 8001b22:	6a39      	ldr	r1, [r7, #32]
 8001b24:	68f8      	ldr	r0, [r7, #12]
 8001b26:	f000 f9e3 	bl	8001ef0 <I2C_WaitOnTXISFlagUntilTimeout>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d001      	beq.n	8001b34 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8001b30:	2301      	movs	r3, #1
 8001b32:	e07b      	b.n	8001c2c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b38:	781a      	ldrb	r2, [r3, #0]
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b44:	1c5a      	adds	r2, r3, #1
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b4e:	b29b      	uxth	r3, r3
 8001b50:	3b01      	subs	r3, #1
 8001b52:	b29a      	uxth	r2, r3
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b5c:	3b01      	subs	r3, #1
 8001b5e:	b29a      	uxth	r2, r3
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b68:	b29b      	uxth	r3, r3
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d034      	beq.n	8001bd8 <HAL_I2C_Master_Transmit+0x184>
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d130      	bne.n	8001bd8 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	9300      	str	r3, [sp, #0]
 8001b7a:	6a3b      	ldr	r3, [r7, #32]
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	2180      	movs	r1, #128	; 0x80
 8001b80:	68f8      	ldr	r0, [r7, #12]
 8001b82:	f000 f975 	bl	8001e70 <I2C_WaitOnFlagUntilTimeout>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d001      	beq.n	8001b90 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	e04d      	b.n	8001c2c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b94:	b29b      	uxth	r3, r3
 8001b96:	2bff      	cmp	r3, #255	; 0xff
 8001b98:	d90e      	bls.n	8001bb8 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	22ff      	movs	r2, #255	; 0xff
 8001b9e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ba4:	b2da      	uxtb	r2, r3
 8001ba6:	8979      	ldrh	r1, [r7, #10]
 8001ba8:	2300      	movs	r3, #0
 8001baa:	9300      	str	r3, [sp, #0]
 8001bac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001bb0:	68f8      	ldr	r0, [r7, #12]
 8001bb2:	f000 fb7f 	bl	80022b4 <I2C_TransferConfig>
 8001bb6:	e00f      	b.n	8001bd8 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bbc:	b29a      	uxth	r2, r3
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bc6:	b2da      	uxtb	r2, r3
 8001bc8:	8979      	ldrh	r1, [r7, #10]
 8001bca:	2300      	movs	r3, #0
 8001bcc:	9300      	str	r3, [sp, #0]
 8001bce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001bd2:	68f8      	ldr	r0, [r7, #12]
 8001bd4:	f000 fb6e 	bl	80022b4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bdc:	b29b      	uxth	r3, r3
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d19e      	bne.n	8001b20 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001be2:	697a      	ldr	r2, [r7, #20]
 8001be4:	6a39      	ldr	r1, [r7, #32]
 8001be6:	68f8      	ldr	r0, [r7, #12]
 8001be8:	f000 f9c2 	bl	8001f70 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001bec:	4603      	mov	r3, r0
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d001      	beq.n	8001bf6 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e01a      	b.n	8001c2c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	2220      	movs	r2, #32
 8001bfc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	6859      	ldr	r1, [r3, #4]
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	681a      	ldr	r2, [r3, #0]
 8001c08:	4b0b      	ldr	r3, [pc, #44]	; (8001c38 <HAL_I2C_Master_Transmit+0x1e4>)
 8001c0a:	400b      	ands	r3, r1
 8001c0c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	2220      	movs	r2, #32
 8001c12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	2200      	movs	r2, #0
 8001c1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	2200      	movs	r2, #0
 8001c22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001c26:	2300      	movs	r3, #0
 8001c28:	e000      	b.n	8001c2c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8001c2a:	2302      	movs	r3, #2
  }
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	3718      	adds	r7, #24
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	80002000 	.word	0x80002000
 8001c38:	fe00e800 	.word	0xfe00e800

08001c3c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b088      	sub	sp, #32
 8001c40:	af02      	add	r7, sp, #8
 8001c42:	60f8      	str	r0, [r7, #12]
 8001c44:	607a      	str	r2, [r7, #4]
 8001c46:	461a      	mov	r2, r3
 8001c48:	460b      	mov	r3, r1
 8001c4a:	817b      	strh	r3, [r7, #10]
 8001c4c:	4613      	mov	r3, r2
 8001c4e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c56:	b2db      	uxtb	r3, r3
 8001c58:	2b20      	cmp	r3, #32
 8001c5a:	f040 80db 	bne.w	8001e14 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001c64:	2b01      	cmp	r3, #1
 8001c66:	d101      	bne.n	8001c6c <HAL_I2C_Master_Receive+0x30>
 8001c68:	2302      	movs	r3, #2
 8001c6a:	e0d4      	b.n	8001e16 <HAL_I2C_Master_Receive+0x1da>
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	2201      	movs	r2, #1
 8001c70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001c74:	f7ff fb9a 	bl	80013ac <HAL_GetTick>
 8001c78:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	9300      	str	r3, [sp, #0]
 8001c7e:	2319      	movs	r3, #25
 8001c80:	2201      	movs	r2, #1
 8001c82:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c86:	68f8      	ldr	r0, [r7, #12]
 8001c88:	f000 f8f2 	bl	8001e70 <I2C_WaitOnFlagUntilTimeout>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d001      	beq.n	8001c96 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8001c92:	2301      	movs	r3, #1
 8001c94:	e0bf      	b.n	8001e16 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	2222      	movs	r2, #34	; 0x22
 8001c9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	2210      	movs	r2, #16
 8001ca2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	2200      	movs	r2, #0
 8001caa:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	687a      	ldr	r2, [r7, #4]
 8001cb0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	893a      	ldrh	r2, [r7, #8]
 8001cb6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	2200      	movs	r2, #0
 8001cbc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cc2:	b29b      	uxth	r3, r3
 8001cc4:	2bff      	cmp	r3, #255	; 0xff
 8001cc6:	d90e      	bls.n	8001ce6 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	22ff      	movs	r2, #255	; 0xff
 8001ccc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cd2:	b2da      	uxtb	r2, r3
 8001cd4:	8979      	ldrh	r1, [r7, #10]
 8001cd6:	4b52      	ldr	r3, [pc, #328]	; (8001e20 <HAL_I2C_Master_Receive+0x1e4>)
 8001cd8:	9300      	str	r3, [sp, #0]
 8001cda:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001cde:	68f8      	ldr	r0, [r7, #12]
 8001ce0:	f000 fae8 	bl	80022b4 <I2C_TransferConfig>
 8001ce4:	e06d      	b.n	8001dc2 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cea:	b29a      	uxth	r2, r3
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cf4:	b2da      	uxtb	r2, r3
 8001cf6:	8979      	ldrh	r1, [r7, #10]
 8001cf8:	4b49      	ldr	r3, [pc, #292]	; (8001e20 <HAL_I2C_Master_Receive+0x1e4>)
 8001cfa:	9300      	str	r3, [sp, #0]
 8001cfc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d00:	68f8      	ldr	r0, [r7, #12]
 8001d02:	f000 fad7 	bl	80022b4 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8001d06:	e05c      	b.n	8001dc2 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d08:	697a      	ldr	r2, [r7, #20]
 8001d0a:	6a39      	ldr	r1, [r7, #32]
 8001d0c:	68f8      	ldr	r0, [r7, #12]
 8001d0e:	f000 f96b 	bl	8001fe8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001d12:	4603      	mov	r3, r0
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d001      	beq.n	8001d1c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	e07c      	b.n	8001e16 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d26:	b2d2      	uxtb	r2, r2
 8001d28:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d2e:	1c5a      	adds	r2, r3, #1
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d38:	3b01      	subs	r3, #1
 8001d3a:	b29a      	uxth	r2, r3
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d44:	b29b      	uxth	r3, r3
 8001d46:	3b01      	subs	r3, #1
 8001d48:	b29a      	uxth	r2, r3
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d52:	b29b      	uxth	r3, r3
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d034      	beq.n	8001dc2 <HAL_I2C_Master_Receive+0x186>
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d130      	bne.n	8001dc2 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	9300      	str	r3, [sp, #0]
 8001d64:	6a3b      	ldr	r3, [r7, #32]
 8001d66:	2200      	movs	r2, #0
 8001d68:	2180      	movs	r1, #128	; 0x80
 8001d6a:	68f8      	ldr	r0, [r7, #12]
 8001d6c:	f000 f880 	bl	8001e70 <I2C_WaitOnFlagUntilTimeout>
 8001d70:	4603      	mov	r3, r0
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d001      	beq.n	8001d7a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8001d76:	2301      	movs	r3, #1
 8001d78:	e04d      	b.n	8001e16 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d7e:	b29b      	uxth	r3, r3
 8001d80:	2bff      	cmp	r3, #255	; 0xff
 8001d82:	d90e      	bls.n	8001da2 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	22ff      	movs	r2, #255	; 0xff
 8001d88:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d8e:	b2da      	uxtb	r2, r3
 8001d90:	8979      	ldrh	r1, [r7, #10]
 8001d92:	2300      	movs	r3, #0
 8001d94:	9300      	str	r3, [sp, #0]
 8001d96:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001d9a:	68f8      	ldr	r0, [r7, #12]
 8001d9c:	f000 fa8a 	bl	80022b4 <I2C_TransferConfig>
 8001da0:	e00f      	b.n	8001dc2 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001da6:	b29a      	uxth	r2, r3
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001db0:	b2da      	uxtb	r2, r3
 8001db2:	8979      	ldrh	r1, [r7, #10]
 8001db4:	2300      	movs	r3, #0
 8001db6:	9300      	str	r3, [sp, #0]
 8001db8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001dbc:	68f8      	ldr	r0, [r7, #12]
 8001dbe:	f000 fa79 	bl	80022b4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dc6:	b29b      	uxth	r3, r3
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d19d      	bne.n	8001d08 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001dcc:	697a      	ldr	r2, [r7, #20]
 8001dce:	6a39      	ldr	r1, [r7, #32]
 8001dd0:	68f8      	ldr	r0, [r7, #12]
 8001dd2:	f000 f8cd 	bl	8001f70 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d001      	beq.n	8001de0 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	e01a      	b.n	8001e16 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	2220      	movs	r2, #32
 8001de6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	6859      	ldr	r1, [r3, #4]
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	681a      	ldr	r2, [r3, #0]
 8001df2:	4b0c      	ldr	r3, [pc, #48]	; (8001e24 <HAL_I2C_Master_Receive+0x1e8>)
 8001df4:	400b      	ands	r3, r1
 8001df6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	2220      	movs	r2, #32
 8001dfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	2200      	movs	r2, #0
 8001e04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001e10:	2300      	movs	r3, #0
 8001e12:	e000      	b.n	8001e16 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8001e14:	2302      	movs	r3, #2
  }
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	3718      	adds	r7, #24
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	80002400 	.word	0x80002400
 8001e24:	fe00e800 	.word	0xfe00e800

08001e28 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b083      	sub	sp, #12
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	699b      	ldr	r3, [r3, #24]
 8001e36:	f003 0302 	and.w	r3, r3, #2
 8001e3a:	2b02      	cmp	r3, #2
 8001e3c:	d103      	bne.n	8001e46 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	2200      	movs	r2, #0
 8001e44:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	699b      	ldr	r3, [r3, #24]
 8001e4c:	f003 0301 	and.w	r3, r3, #1
 8001e50:	2b01      	cmp	r3, #1
 8001e52:	d007      	beq.n	8001e64 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	699a      	ldr	r2, [r3, #24]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f042 0201 	orr.w	r2, r2, #1
 8001e62:	619a      	str	r2, [r3, #24]
  }
}
 8001e64:	bf00      	nop
 8001e66:	370c      	adds	r7, #12
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6e:	4770      	bx	lr

08001e70 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b084      	sub	sp, #16
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	60f8      	str	r0, [r7, #12]
 8001e78:	60b9      	str	r1, [r7, #8]
 8001e7a:	603b      	str	r3, [r7, #0]
 8001e7c:	4613      	mov	r3, r2
 8001e7e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001e80:	e022      	b.n	8001ec8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e88:	d01e      	beq.n	8001ec8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e8a:	f7ff fa8f 	bl	80013ac <HAL_GetTick>
 8001e8e:	4602      	mov	r2, r0
 8001e90:	69bb      	ldr	r3, [r7, #24]
 8001e92:	1ad3      	subs	r3, r2, r3
 8001e94:	683a      	ldr	r2, [r7, #0]
 8001e96:	429a      	cmp	r2, r3
 8001e98:	d302      	bcc.n	8001ea0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d113      	bne.n	8001ec8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ea4:	f043 0220 	orr.w	r2, r3, #32
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	2220      	movs	r2, #32
 8001eb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	e00f      	b.n	8001ee8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	699a      	ldr	r2, [r3, #24]
 8001ece:	68bb      	ldr	r3, [r7, #8]
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	68ba      	ldr	r2, [r7, #8]
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	bf0c      	ite	eq
 8001ed8:	2301      	moveq	r3, #1
 8001eda:	2300      	movne	r3, #0
 8001edc:	b2db      	uxtb	r3, r3
 8001ede:	461a      	mov	r2, r3
 8001ee0:	79fb      	ldrb	r3, [r7, #7]
 8001ee2:	429a      	cmp	r2, r3
 8001ee4:	d0cd      	beq.n	8001e82 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001ee6:	2300      	movs	r3, #0
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	3710      	adds	r7, #16
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}

08001ef0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b084      	sub	sp, #16
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	60f8      	str	r0, [r7, #12]
 8001ef8:	60b9      	str	r1, [r7, #8]
 8001efa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001efc:	e02c      	b.n	8001f58 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001efe:	687a      	ldr	r2, [r7, #4]
 8001f00:	68b9      	ldr	r1, [r7, #8]
 8001f02:	68f8      	ldr	r0, [r7, #12]
 8001f04:	f000 f8ea 	bl	80020dc <I2C_IsErrorOccurred>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d001      	beq.n	8001f12 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	e02a      	b.n	8001f68 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f12:	68bb      	ldr	r3, [r7, #8]
 8001f14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f18:	d01e      	beq.n	8001f58 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f1a:	f7ff fa47 	bl	80013ac <HAL_GetTick>
 8001f1e:	4602      	mov	r2, r0
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	1ad3      	subs	r3, r2, r3
 8001f24:	68ba      	ldr	r2, [r7, #8]
 8001f26:	429a      	cmp	r2, r3
 8001f28:	d302      	bcc.n	8001f30 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001f2a:	68bb      	ldr	r3, [r7, #8]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d113      	bne.n	8001f58 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f34:	f043 0220 	orr.w	r2, r3, #32
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	2220      	movs	r2, #32
 8001f40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	2200      	movs	r2, #0
 8001f48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	2200      	movs	r2, #0
 8001f50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001f54:	2301      	movs	r3, #1
 8001f56:	e007      	b.n	8001f68 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	699b      	ldr	r3, [r3, #24]
 8001f5e:	f003 0302 	and.w	r3, r3, #2
 8001f62:	2b02      	cmp	r3, #2
 8001f64:	d1cb      	bne.n	8001efe <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001f66:	2300      	movs	r3, #0
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	3710      	adds	r7, #16
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}

08001f70 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b084      	sub	sp, #16
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	60f8      	str	r0, [r7, #12]
 8001f78:	60b9      	str	r1, [r7, #8]
 8001f7a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001f7c:	e028      	b.n	8001fd0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f7e:	687a      	ldr	r2, [r7, #4]
 8001f80:	68b9      	ldr	r1, [r7, #8]
 8001f82:	68f8      	ldr	r0, [r7, #12]
 8001f84:	f000 f8aa 	bl	80020dc <I2C_IsErrorOccurred>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d001      	beq.n	8001f92 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e026      	b.n	8001fe0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f92:	f7ff fa0b 	bl	80013ac <HAL_GetTick>
 8001f96:	4602      	mov	r2, r0
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	1ad3      	subs	r3, r2, r3
 8001f9c:	68ba      	ldr	r2, [r7, #8]
 8001f9e:	429a      	cmp	r2, r3
 8001fa0:	d302      	bcc.n	8001fa8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001fa2:	68bb      	ldr	r3, [r7, #8]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d113      	bne.n	8001fd0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fac:	f043 0220 	orr.w	r2, r3, #32
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	2220      	movs	r2, #32
 8001fb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	e007      	b.n	8001fe0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	699b      	ldr	r3, [r3, #24]
 8001fd6:	f003 0320 	and.w	r3, r3, #32
 8001fda:	2b20      	cmp	r3, #32
 8001fdc:	d1cf      	bne.n	8001f7e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001fde:	2300      	movs	r3, #0
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	3710      	adds	r7, #16
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}

08001fe8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b084      	sub	sp, #16
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	60f8      	str	r0, [r7, #12]
 8001ff0:	60b9      	str	r1, [r7, #8]
 8001ff2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001ff4:	e064      	b.n	80020c0 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ff6:	687a      	ldr	r2, [r7, #4]
 8001ff8:	68b9      	ldr	r1, [r7, #8]
 8001ffa:	68f8      	ldr	r0, [r7, #12]
 8001ffc:	f000 f86e 	bl	80020dc <I2C_IsErrorOccurred>
 8002000:	4603      	mov	r3, r0
 8002002:	2b00      	cmp	r3, #0
 8002004:	d001      	beq.n	800200a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	e062      	b.n	80020d0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	699b      	ldr	r3, [r3, #24]
 8002010:	f003 0320 	and.w	r3, r3, #32
 8002014:	2b20      	cmp	r3, #32
 8002016:	d138      	bne.n	800208a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	699b      	ldr	r3, [r3, #24]
 800201e:	f003 0304 	and.w	r3, r3, #4
 8002022:	2b04      	cmp	r3, #4
 8002024:	d105      	bne.n	8002032 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800202a:	2b00      	cmp	r3, #0
 800202c:	d001      	beq.n	8002032 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800202e:	2300      	movs	r3, #0
 8002030:	e04e      	b.n	80020d0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	699b      	ldr	r3, [r3, #24]
 8002038:	f003 0310 	and.w	r3, r3, #16
 800203c:	2b10      	cmp	r3, #16
 800203e:	d107      	bne.n	8002050 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	2210      	movs	r2, #16
 8002046:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	2204      	movs	r2, #4
 800204c:	645a      	str	r2, [r3, #68]	; 0x44
 800204e:	e002      	b.n	8002056 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	2200      	movs	r2, #0
 8002054:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	2220      	movs	r2, #32
 800205c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	6859      	ldr	r1, [r3, #4]
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	681a      	ldr	r2, [r3, #0]
 8002068:	4b1b      	ldr	r3, [pc, #108]	; (80020d8 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 800206a:	400b      	ands	r3, r1
 800206c:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	2220      	movs	r2, #32
 8002072:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	2200      	movs	r2, #0
 800207a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	2200      	movs	r2, #0
 8002082:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	e022      	b.n	80020d0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800208a:	f7ff f98f 	bl	80013ac <HAL_GetTick>
 800208e:	4602      	mov	r2, r0
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	1ad3      	subs	r3, r2, r3
 8002094:	68ba      	ldr	r2, [r7, #8]
 8002096:	429a      	cmp	r2, r3
 8002098:	d302      	bcc.n	80020a0 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 800209a:	68bb      	ldr	r3, [r7, #8]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d10f      	bne.n	80020c0 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020a4:	f043 0220 	orr.w	r2, r3, #32
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	2220      	movs	r2, #32
 80020b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	2200      	movs	r2, #0
 80020b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80020bc:	2301      	movs	r3, #1
 80020be:	e007      	b.n	80020d0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	699b      	ldr	r3, [r3, #24]
 80020c6:	f003 0304 	and.w	r3, r3, #4
 80020ca:	2b04      	cmp	r3, #4
 80020cc:	d193      	bne.n	8001ff6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80020ce:	2300      	movs	r3, #0
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	3710      	adds	r7, #16
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}
 80020d8:	fe00e800 	.word	0xfe00e800

080020dc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b08a      	sub	sp, #40	; 0x28
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	60f8      	str	r0, [r7, #12]
 80020e4:	60b9      	str	r1, [r7, #8]
 80020e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020e8:	2300      	movs	r3, #0
 80020ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	699b      	ldr	r3, [r3, #24]
 80020f4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80020f6:	2300      	movs	r3, #0
 80020f8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80020fe:	69bb      	ldr	r3, [r7, #24]
 8002100:	f003 0310 	and.w	r3, r3, #16
 8002104:	2b00      	cmp	r3, #0
 8002106:	d075      	beq.n	80021f4 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	2210      	movs	r2, #16
 800210e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002110:	e056      	b.n	80021c0 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002112:	68bb      	ldr	r3, [r7, #8]
 8002114:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002118:	d052      	beq.n	80021c0 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800211a:	f7ff f947 	bl	80013ac <HAL_GetTick>
 800211e:	4602      	mov	r2, r0
 8002120:	69fb      	ldr	r3, [r7, #28]
 8002122:	1ad3      	subs	r3, r2, r3
 8002124:	68ba      	ldr	r2, [r7, #8]
 8002126:	429a      	cmp	r2, r3
 8002128:	d302      	bcc.n	8002130 <I2C_IsErrorOccurred+0x54>
 800212a:	68bb      	ldr	r3, [r7, #8]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d147      	bne.n	80021c0 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800213a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002142:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	699b      	ldr	r3, [r3, #24]
 800214a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800214e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002152:	d12e      	bne.n	80021b2 <I2C_IsErrorOccurred+0xd6>
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800215a:	d02a      	beq.n	80021b2 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 800215c:	7cfb      	ldrb	r3, [r7, #19]
 800215e:	2b20      	cmp	r3, #32
 8002160:	d027      	beq.n	80021b2 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	685a      	ldr	r2, [r3, #4]
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002170:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002172:	f7ff f91b 	bl	80013ac <HAL_GetTick>
 8002176:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002178:	e01b      	b.n	80021b2 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800217a:	f7ff f917 	bl	80013ac <HAL_GetTick>
 800217e:	4602      	mov	r2, r0
 8002180:	69fb      	ldr	r3, [r7, #28]
 8002182:	1ad3      	subs	r3, r2, r3
 8002184:	2b19      	cmp	r3, #25
 8002186:	d914      	bls.n	80021b2 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800218c:	f043 0220 	orr.w	r2, r3, #32
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	2220      	movs	r2, #32
 8002198:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	2200      	movs	r2, #0
 80021a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	2200      	movs	r2, #0
 80021a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
 80021ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	699b      	ldr	r3, [r3, #24]
 80021b8:	f003 0320 	and.w	r3, r3, #32
 80021bc:	2b20      	cmp	r3, #32
 80021be:	d1dc      	bne.n	800217a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	699b      	ldr	r3, [r3, #24]
 80021c6:	f003 0320 	and.w	r3, r3, #32
 80021ca:	2b20      	cmp	r3, #32
 80021cc:	d003      	beq.n	80021d6 <I2C_IsErrorOccurred+0xfa>
 80021ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d09d      	beq.n	8002112 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80021d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d103      	bne.n	80021e6 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	2220      	movs	r2, #32
 80021e4:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80021e6:	6a3b      	ldr	r3, [r7, #32]
 80021e8:	f043 0304 	orr.w	r3, r3, #4
 80021ec:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	699b      	ldr	r3, [r3, #24]
 80021fa:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80021fc:	69bb      	ldr	r3, [r7, #24]
 80021fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002202:	2b00      	cmp	r3, #0
 8002204:	d00b      	beq.n	800221e <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002206:	6a3b      	ldr	r3, [r7, #32]
 8002208:	f043 0301 	orr.w	r3, r3, #1
 800220c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002216:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002218:	2301      	movs	r3, #1
 800221a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800221e:	69bb      	ldr	r3, [r7, #24]
 8002220:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002224:	2b00      	cmp	r3, #0
 8002226:	d00b      	beq.n	8002240 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002228:	6a3b      	ldr	r3, [r7, #32]
 800222a:	f043 0308 	orr.w	r3, r3, #8
 800222e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002238:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800223a:	2301      	movs	r3, #1
 800223c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002240:	69bb      	ldr	r3, [r7, #24]
 8002242:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002246:	2b00      	cmp	r3, #0
 8002248:	d00b      	beq.n	8002262 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800224a:	6a3b      	ldr	r3, [r7, #32]
 800224c:	f043 0302 	orr.w	r3, r3, #2
 8002250:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f44f 7200 	mov.w	r2, #512	; 0x200
 800225a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800225c:	2301      	movs	r3, #1
 800225e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002262:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002266:	2b00      	cmp	r3, #0
 8002268:	d01c      	beq.n	80022a4 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800226a:	68f8      	ldr	r0, [r7, #12]
 800226c:	f7ff fddc 	bl	8001e28 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	6859      	ldr	r1, [r3, #4]
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681a      	ldr	r2, [r3, #0]
 800227a:	4b0d      	ldr	r3, [pc, #52]	; (80022b0 <I2C_IsErrorOccurred+0x1d4>)
 800227c:	400b      	ands	r3, r1
 800227e:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002284:	6a3b      	ldr	r3, [r7, #32]
 8002286:	431a      	orrs	r2, r3
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	2220      	movs	r2, #32
 8002290:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	2200      	movs	r2, #0
 8002298:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	2200      	movs	r2, #0
 80022a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80022a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	3728      	adds	r7, #40	; 0x28
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}
 80022b0:	fe00e800 	.word	0xfe00e800

080022b4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b087      	sub	sp, #28
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	60f8      	str	r0, [r7, #12]
 80022bc:	607b      	str	r3, [r7, #4]
 80022be:	460b      	mov	r3, r1
 80022c0:	817b      	strh	r3, [r7, #10]
 80022c2:	4613      	mov	r3, r2
 80022c4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80022c6:	897b      	ldrh	r3, [r7, #10]
 80022c8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80022cc:	7a7b      	ldrb	r3, [r7, #9]
 80022ce:	041b      	lsls	r3, r3, #16
 80022d0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80022d4:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80022da:	6a3b      	ldr	r3, [r7, #32]
 80022dc:	4313      	orrs	r3, r2
 80022de:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80022e2:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	685a      	ldr	r2, [r3, #4]
 80022ea:	6a3b      	ldr	r3, [r7, #32]
 80022ec:	0d5b      	lsrs	r3, r3, #21
 80022ee:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80022f2:	4b08      	ldr	r3, [pc, #32]	; (8002314 <I2C_TransferConfig+0x60>)
 80022f4:	430b      	orrs	r3, r1
 80022f6:	43db      	mvns	r3, r3
 80022f8:	ea02 0103 	and.w	r1, r2, r3
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	697a      	ldr	r2, [r7, #20]
 8002302:	430a      	orrs	r2, r1
 8002304:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002306:	bf00      	nop
 8002308:	371c      	adds	r7, #28
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr
 8002312:	bf00      	nop
 8002314:	03ff63ff 	.word	0x03ff63ff

08002318 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002318:	b480      	push	{r7}
 800231a:	b083      	sub	sp, #12
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
 8002320:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002328:	b2db      	uxtb	r3, r3
 800232a:	2b20      	cmp	r3, #32
 800232c:	d138      	bne.n	80023a0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002334:	2b01      	cmp	r3, #1
 8002336:	d101      	bne.n	800233c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002338:	2302      	movs	r3, #2
 800233a:	e032      	b.n	80023a2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2201      	movs	r2, #1
 8002340:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2224      	movs	r2, #36	; 0x24
 8002348:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	681a      	ldr	r2, [r3, #0]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f022 0201 	bic.w	r2, r2, #1
 800235a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	681a      	ldr	r2, [r3, #0]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800236a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	6819      	ldr	r1, [r3, #0]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	683a      	ldr	r2, [r7, #0]
 8002378:	430a      	orrs	r2, r1
 800237a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	681a      	ldr	r2, [r3, #0]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f042 0201 	orr.w	r2, r2, #1
 800238a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2220      	movs	r2, #32
 8002390:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2200      	movs	r2, #0
 8002398:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800239c:	2300      	movs	r3, #0
 800239e:	e000      	b.n	80023a2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80023a0:	2302      	movs	r3, #2
  }
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	370c      	adds	r7, #12
 80023a6:	46bd      	mov	sp, r7
 80023a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ac:	4770      	bx	lr

080023ae <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80023ae:	b480      	push	{r7}
 80023b0:	b085      	sub	sp, #20
 80023b2:	af00      	add	r7, sp, #0
 80023b4:	6078      	str	r0, [r7, #4]
 80023b6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80023be:	b2db      	uxtb	r3, r3
 80023c0:	2b20      	cmp	r3, #32
 80023c2:	d139      	bne.n	8002438 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80023ca:	2b01      	cmp	r3, #1
 80023cc:	d101      	bne.n	80023d2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80023ce:	2302      	movs	r3, #2
 80023d0:	e033      	b.n	800243a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2201      	movs	r2, #1
 80023d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2224      	movs	r2, #36	; 0x24
 80023de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	681a      	ldr	r2, [r3, #0]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f022 0201 	bic.w	r2, r2, #1
 80023f0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002400:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	021b      	lsls	r3, r3, #8
 8002406:	68fa      	ldr	r2, [r7, #12]
 8002408:	4313      	orrs	r3, r2
 800240a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	68fa      	ldr	r2, [r7, #12]
 8002412:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	681a      	ldr	r2, [r3, #0]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f042 0201 	orr.w	r2, r2, #1
 8002422:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2220      	movs	r2, #32
 8002428:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2200      	movs	r2, #0
 8002430:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002434:	2300      	movs	r3, #0
 8002436:	e000      	b.n	800243a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002438:	2302      	movs	r3, #2
  }
}
 800243a:	4618      	mov	r0, r3
 800243c:	3714      	adds	r7, #20
 800243e:	46bd      	mov	sp, r7
 8002440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002444:	4770      	bx	lr
	...

08002448 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b084      	sub	sp, #16
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8002450:	4b29      	ldr	r3, [pc, #164]	; (80024f8 <HAL_PWREx_ConfigSupply+0xb0>)
 8002452:	68db      	ldr	r3, [r3, #12]
 8002454:	f003 0307 	and.w	r3, r3, #7
 8002458:	2b06      	cmp	r3, #6
 800245a:	d00a      	beq.n	8002472 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800245c:	4b26      	ldr	r3, [pc, #152]	; (80024f8 <HAL_PWREx_ConfigSupply+0xb0>)
 800245e:	68db      	ldr	r3, [r3, #12]
 8002460:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002464:	687a      	ldr	r2, [r7, #4]
 8002466:	429a      	cmp	r2, r3
 8002468:	d001      	beq.n	800246e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	e040      	b.n	80024f0 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800246e:	2300      	movs	r3, #0
 8002470:	e03e      	b.n	80024f0 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002472:	4b21      	ldr	r3, [pc, #132]	; (80024f8 <HAL_PWREx_ConfigSupply+0xb0>)
 8002474:	68db      	ldr	r3, [r3, #12]
 8002476:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800247a:	491f      	ldr	r1, [pc, #124]	; (80024f8 <HAL_PWREx_ConfigSupply+0xb0>)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	4313      	orrs	r3, r2
 8002480:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002482:	f7fe ff93 	bl	80013ac <HAL_GetTick>
 8002486:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002488:	e009      	b.n	800249e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800248a:	f7fe ff8f 	bl	80013ac <HAL_GetTick>
 800248e:	4602      	mov	r2, r0
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	1ad3      	subs	r3, r2, r3
 8002494:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002498:	d901      	bls.n	800249e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	e028      	b.n	80024f0 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800249e:	4b16      	ldr	r3, [pc, #88]	; (80024f8 <HAL_PWREx_ConfigSupply+0xb0>)
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80024a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024aa:	d1ee      	bne.n	800248a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2b1e      	cmp	r3, #30
 80024b0:	d008      	beq.n	80024c4 <HAL_PWREx_ConfigSupply+0x7c>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2b2e      	cmp	r3, #46	; 0x2e
 80024b6:	d005      	beq.n	80024c4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2b1d      	cmp	r3, #29
 80024bc:	d002      	beq.n	80024c4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2b2d      	cmp	r3, #45	; 0x2d
 80024c2:	d114      	bne.n	80024ee <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80024c4:	f7fe ff72 	bl	80013ac <HAL_GetTick>
 80024c8:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80024ca:	e009      	b.n	80024e0 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80024cc:	f7fe ff6e 	bl	80013ac <HAL_GetTick>
 80024d0:	4602      	mov	r2, r0
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	1ad3      	subs	r3, r2, r3
 80024d6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80024da:	d901      	bls.n	80024e0 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80024dc:	2301      	movs	r3, #1
 80024de:	e007      	b.n	80024f0 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80024e0:	4b05      	ldr	r3, [pc, #20]	; (80024f8 <HAL_PWREx_ConfigSupply+0xb0>)
 80024e2:	68db      	ldr	r3, [r3, #12]
 80024e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024ec:	d1ee      	bne.n	80024cc <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80024ee:	2300      	movs	r3, #0
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	3710      	adds	r7, #16
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}
 80024f8:	58024800 	.word	0x58024800

080024fc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b08c      	sub	sp, #48	; 0x30
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d101      	bne.n	800250e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	e3f3      	b.n	8002cf6 <HAL_RCC_OscConfig+0x7fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 0301 	and.w	r3, r3, #1
 8002516:	2b00      	cmp	r3, #0
 8002518:	f000 80b3 	beq.w	8002682 <HAL_RCC_OscConfig+0x186>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800251c:	4b9e      	ldr	r3, [pc, #632]	; (8002798 <HAL_RCC_OscConfig+0x29c>)
 800251e:	691b      	ldr	r3, [r3, #16]
 8002520:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002524:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002526:	4b9c      	ldr	r3, [pc, #624]	; (8002798 <HAL_RCC_OscConfig+0x29c>)
 8002528:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800252a:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800252c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800252e:	2b10      	cmp	r3, #16
 8002530:	d007      	beq.n	8002542 <HAL_RCC_OscConfig+0x46>
 8002532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002534:	2b18      	cmp	r3, #24
 8002536:	d112      	bne.n	800255e <HAL_RCC_OscConfig+0x62>
 8002538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800253a:	f003 0303 	and.w	r3, r3, #3
 800253e:	2b02      	cmp	r3, #2
 8002540:	d10d      	bne.n	800255e <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002542:	4b95      	ldr	r3, [pc, #596]	; (8002798 <HAL_RCC_OscConfig+0x29c>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800254a:	2b00      	cmp	r3, #0
 800254c:	f000 8098 	beq.w	8002680 <HAL_RCC_OscConfig+0x184>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	2b00      	cmp	r3, #0
 8002556:	f040 8093 	bne.w	8002680 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	e3cb      	b.n	8002cf6 <HAL_RCC_OscConfig+0x7fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002566:	d106      	bne.n	8002576 <HAL_RCC_OscConfig+0x7a>
 8002568:	4b8b      	ldr	r3, [pc, #556]	; (8002798 <HAL_RCC_OscConfig+0x29c>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a8a      	ldr	r2, [pc, #552]	; (8002798 <HAL_RCC_OscConfig+0x29c>)
 800256e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002572:	6013      	str	r3, [r2, #0]
 8002574:	e058      	b.n	8002628 <HAL_RCC_OscConfig+0x12c>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d112      	bne.n	80025a4 <HAL_RCC_OscConfig+0xa8>
 800257e:	4b86      	ldr	r3, [pc, #536]	; (8002798 <HAL_RCC_OscConfig+0x29c>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a85      	ldr	r2, [pc, #532]	; (8002798 <HAL_RCC_OscConfig+0x29c>)
 8002584:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002588:	6013      	str	r3, [r2, #0]
 800258a:	4b83      	ldr	r3, [pc, #524]	; (8002798 <HAL_RCC_OscConfig+0x29c>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a82      	ldr	r2, [pc, #520]	; (8002798 <HAL_RCC_OscConfig+0x29c>)
 8002590:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002594:	6013      	str	r3, [r2, #0]
 8002596:	4b80      	ldr	r3, [pc, #512]	; (8002798 <HAL_RCC_OscConfig+0x29c>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a7f      	ldr	r2, [pc, #508]	; (8002798 <HAL_RCC_OscConfig+0x29c>)
 800259c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025a0:	6013      	str	r3, [r2, #0]
 80025a2:	e041      	b.n	8002628 <HAL_RCC_OscConfig+0x12c>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80025ac:	d112      	bne.n	80025d4 <HAL_RCC_OscConfig+0xd8>
 80025ae:	4b7a      	ldr	r3, [pc, #488]	; (8002798 <HAL_RCC_OscConfig+0x29c>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4a79      	ldr	r2, [pc, #484]	; (8002798 <HAL_RCC_OscConfig+0x29c>)
 80025b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025b8:	6013      	str	r3, [r2, #0]
 80025ba:	4b77      	ldr	r3, [pc, #476]	; (8002798 <HAL_RCC_OscConfig+0x29c>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a76      	ldr	r2, [pc, #472]	; (8002798 <HAL_RCC_OscConfig+0x29c>)
 80025c0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80025c4:	6013      	str	r3, [r2, #0]
 80025c6:	4b74      	ldr	r3, [pc, #464]	; (8002798 <HAL_RCC_OscConfig+0x29c>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a73      	ldr	r2, [pc, #460]	; (8002798 <HAL_RCC_OscConfig+0x29c>)
 80025cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025d0:	6013      	str	r3, [r2, #0]
 80025d2:	e029      	b.n	8002628 <HAL_RCC_OscConfig+0x12c>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 80025dc:	d112      	bne.n	8002604 <HAL_RCC_OscConfig+0x108>
 80025de:	4b6e      	ldr	r3, [pc, #440]	; (8002798 <HAL_RCC_OscConfig+0x29c>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a6d      	ldr	r2, [pc, #436]	; (8002798 <HAL_RCC_OscConfig+0x29c>)
 80025e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025e8:	6013      	str	r3, [r2, #0]
 80025ea:	4b6b      	ldr	r3, [pc, #428]	; (8002798 <HAL_RCC_OscConfig+0x29c>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4a6a      	ldr	r2, [pc, #424]	; (8002798 <HAL_RCC_OscConfig+0x29c>)
 80025f0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80025f4:	6013      	str	r3, [r2, #0]
 80025f6:	4b68      	ldr	r3, [pc, #416]	; (8002798 <HAL_RCC_OscConfig+0x29c>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a67      	ldr	r2, [pc, #412]	; (8002798 <HAL_RCC_OscConfig+0x29c>)
 80025fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002600:	6013      	str	r3, [r2, #0]
 8002602:	e011      	b.n	8002628 <HAL_RCC_OscConfig+0x12c>
 8002604:	4b64      	ldr	r3, [pc, #400]	; (8002798 <HAL_RCC_OscConfig+0x29c>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a63      	ldr	r2, [pc, #396]	; (8002798 <HAL_RCC_OscConfig+0x29c>)
 800260a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800260e:	6013      	str	r3, [r2, #0]
 8002610:	4b61      	ldr	r3, [pc, #388]	; (8002798 <HAL_RCC_OscConfig+0x29c>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a60      	ldr	r2, [pc, #384]	; (8002798 <HAL_RCC_OscConfig+0x29c>)
 8002616:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800261a:	6013      	str	r3, [r2, #0]
 800261c:	4b5e      	ldr	r3, [pc, #376]	; (8002798 <HAL_RCC_OscConfig+0x29c>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a5d      	ldr	r2, [pc, #372]	; (8002798 <HAL_RCC_OscConfig+0x29c>)
 8002622:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002626:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d013      	beq.n	8002658 <HAL_RCC_OscConfig+0x15c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002630:	f7fe febc 	bl	80013ac <HAL_GetTick>
 8002634:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002636:	e008      	b.n	800264a <HAL_RCC_OscConfig+0x14e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002638:	f7fe feb8 	bl	80013ac <HAL_GetTick>
 800263c:	4602      	mov	r2, r0
 800263e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002640:	1ad3      	subs	r3, r2, r3
 8002642:	2b64      	cmp	r3, #100	; 0x64
 8002644:	d901      	bls.n	800264a <HAL_RCC_OscConfig+0x14e>
          {
            return HAL_TIMEOUT;
 8002646:	2303      	movs	r3, #3
 8002648:	e355      	b.n	8002cf6 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800264a:	4b53      	ldr	r3, [pc, #332]	; (8002798 <HAL_RCC_OscConfig+0x29c>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002652:	2b00      	cmp	r3, #0
 8002654:	d0f0      	beq.n	8002638 <HAL_RCC_OscConfig+0x13c>
 8002656:	e014      	b.n	8002682 <HAL_RCC_OscConfig+0x186>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002658:	f7fe fea8 	bl	80013ac <HAL_GetTick>
 800265c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800265e:	e008      	b.n	8002672 <HAL_RCC_OscConfig+0x176>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002660:	f7fe fea4 	bl	80013ac <HAL_GetTick>
 8002664:	4602      	mov	r2, r0
 8002666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002668:	1ad3      	subs	r3, r2, r3
 800266a:	2b64      	cmp	r3, #100	; 0x64
 800266c:	d901      	bls.n	8002672 <HAL_RCC_OscConfig+0x176>
          {
            return HAL_TIMEOUT;
 800266e:	2303      	movs	r3, #3
 8002670:	e341      	b.n	8002cf6 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002672:	4b49      	ldr	r3, [pc, #292]	; (8002798 <HAL_RCC_OscConfig+0x29c>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800267a:	2b00      	cmp	r3, #0
 800267c:	d1f0      	bne.n	8002660 <HAL_RCC_OscConfig+0x164>
 800267e:	e000      	b.n	8002682 <HAL_RCC_OscConfig+0x186>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002680:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f003 0302 	and.w	r3, r3, #2
 800268a:	2b00      	cmp	r3, #0
 800268c:	f000 808c 	beq.w	80027a8 <HAL_RCC_OscConfig+0x2ac>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002690:	4b41      	ldr	r3, [pc, #260]	; (8002798 <HAL_RCC_OscConfig+0x29c>)
 8002692:	691b      	ldr	r3, [r3, #16]
 8002694:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002698:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800269a:	4b3f      	ldr	r3, [pc, #252]	; (8002798 <HAL_RCC_OscConfig+0x29c>)
 800269c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800269e:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80026a0:	6a3b      	ldr	r3, [r7, #32]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d007      	beq.n	80026b6 <HAL_RCC_OscConfig+0x1ba>
 80026a6:	6a3b      	ldr	r3, [r7, #32]
 80026a8:	2b18      	cmp	r3, #24
 80026aa:	d137      	bne.n	800271c <HAL_RCC_OscConfig+0x220>
 80026ac:	69fb      	ldr	r3, [r7, #28]
 80026ae:	f003 0303 	and.w	r3, r3, #3
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d132      	bne.n	800271c <HAL_RCC_OscConfig+0x220>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80026b6:	4b38      	ldr	r3, [pc, #224]	; (8002798 <HAL_RCC_OscConfig+0x29c>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f003 0304 	and.w	r3, r3, #4
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d005      	beq.n	80026ce <HAL_RCC_OscConfig+0x1d2>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	68db      	ldr	r3, [r3, #12]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d101      	bne.n	80026ce <HAL_RCC_OscConfig+0x1d2>
      {
        return HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	e313      	b.n	8002cf6 <HAL_RCC_OscConfig+0x7fa>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80026ce:	4b32      	ldr	r3, [pc, #200]	; (8002798 <HAL_RCC_OscConfig+0x29c>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f023 0219 	bic.w	r2, r3, #25
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	68db      	ldr	r3, [r3, #12]
 80026da:	492f      	ldr	r1, [pc, #188]	; (8002798 <HAL_RCC_OscConfig+0x29c>)
 80026dc:	4313      	orrs	r3, r2
 80026de:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80026e0:	f7fe fe64 	bl	80013ac <HAL_GetTick>
 80026e4:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80026e6:	e008      	b.n	80026fa <HAL_RCC_OscConfig+0x1fe>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026e8:	f7fe fe60 	bl	80013ac <HAL_GetTick>
 80026ec:	4602      	mov	r2, r0
 80026ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f0:	1ad3      	subs	r3, r2, r3
 80026f2:	2b02      	cmp	r3, #2
 80026f4:	d901      	bls.n	80026fa <HAL_RCC_OscConfig+0x1fe>
            {
              return HAL_TIMEOUT;
 80026f6:	2303      	movs	r3, #3
 80026f8:	e2fd      	b.n	8002cf6 <HAL_RCC_OscConfig+0x7fa>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80026fa:	4b27      	ldr	r3, [pc, #156]	; (8002798 <HAL_RCC_OscConfig+0x29c>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f003 0304 	and.w	r3, r3, #4
 8002702:	2b00      	cmp	r3, #0
 8002704:	d0f0      	beq.n	80026e8 <HAL_RCC_OscConfig+0x1ec>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002706:	4b24      	ldr	r3, [pc, #144]	; (8002798 <HAL_RCC_OscConfig+0x29c>)
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	691b      	ldr	r3, [r3, #16]
 8002712:	061b      	lsls	r3, r3, #24
 8002714:	4920      	ldr	r1, [pc, #128]	; (8002798 <HAL_RCC_OscConfig+0x29c>)
 8002716:	4313      	orrs	r3, r2
 8002718:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800271a:	e045      	b.n	80027a8 <HAL_RCC_OscConfig+0x2ac>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	68db      	ldr	r3, [r3, #12]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d026      	beq.n	8002772 <HAL_RCC_OscConfig+0x276>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002724:	4b1c      	ldr	r3, [pc, #112]	; (8002798 <HAL_RCC_OscConfig+0x29c>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f023 0219 	bic.w	r2, r3, #25
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	68db      	ldr	r3, [r3, #12]
 8002730:	4919      	ldr	r1, [pc, #100]	; (8002798 <HAL_RCC_OscConfig+0x29c>)
 8002732:	4313      	orrs	r3, r2
 8002734:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002736:	f7fe fe39 	bl	80013ac <HAL_GetTick>
 800273a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800273c:	e008      	b.n	8002750 <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800273e:	f7fe fe35 	bl	80013ac <HAL_GetTick>
 8002742:	4602      	mov	r2, r0
 8002744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002746:	1ad3      	subs	r3, r2, r3
 8002748:	2b02      	cmp	r3, #2
 800274a:	d901      	bls.n	8002750 <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 800274c:	2303      	movs	r3, #3
 800274e:	e2d2      	b.n	8002cf6 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002750:	4b11      	ldr	r3, [pc, #68]	; (8002798 <HAL_RCC_OscConfig+0x29c>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f003 0304 	and.w	r3, r3, #4
 8002758:	2b00      	cmp	r3, #0
 800275a:	d0f0      	beq.n	800273e <HAL_RCC_OscConfig+0x242>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800275c:	4b0e      	ldr	r3, [pc, #56]	; (8002798 <HAL_RCC_OscConfig+0x29c>)
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	691b      	ldr	r3, [r3, #16]
 8002768:	061b      	lsls	r3, r3, #24
 800276a:	490b      	ldr	r1, [pc, #44]	; (8002798 <HAL_RCC_OscConfig+0x29c>)
 800276c:	4313      	orrs	r3, r2
 800276e:	604b      	str	r3, [r1, #4]
 8002770:	e01a      	b.n	80027a8 <HAL_RCC_OscConfig+0x2ac>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002772:	4b09      	ldr	r3, [pc, #36]	; (8002798 <HAL_RCC_OscConfig+0x29c>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a08      	ldr	r2, [pc, #32]	; (8002798 <HAL_RCC_OscConfig+0x29c>)
 8002778:	f023 0301 	bic.w	r3, r3, #1
 800277c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800277e:	f7fe fe15 	bl	80013ac <HAL_GetTick>
 8002782:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002784:	e00a      	b.n	800279c <HAL_RCC_OscConfig+0x2a0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002786:	f7fe fe11 	bl	80013ac <HAL_GetTick>
 800278a:	4602      	mov	r2, r0
 800278c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800278e:	1ad3      	subs	r3, r2, r3
 8002790:	2b02      	cmp	r3, #2
 8002792:	d903      	bls.n	800279c <HAL_RCC_OscConfig+0x2a0>
          {
            return HAL_TIMEOUT;
 8002794:	2303      	movs	r3, #3
 8002796:	e2ae      	b.n	8002cf6 <HAL_RCC_OscConfig+0x7fa>
 8002798:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800279c:	4b99      	ldr	r3, [pc, #612]	; (8002a04 <HAL_RCC_OscConfig+0x508>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f003 0304 	and.w	r3, r3, #4
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d1ee      	bne.n	8002786 <HAL_RCC_OscConfig+0x28a>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f003 0310 	and.w	r3, r3, #16
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d06a      	beq.n	800288a <HAL_RCC_OscConfig+0x38e>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027b4:	4b93      	ldr	r3, [pc, #588]	; (8002a04 <HAL_RCC_OscConfig+0x508>)
 80027b6:	691b      	ldr	r3, [r3, #16]
 80027b8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80027bc:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80027be:	4b91      	ldr	r3, [pc, #580]	; (8002a04 <HAL_RCC_OscConfig+0x508>)
 80027c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027c2:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80027c4:	69bb      	ldr	r3, [r7, #24]
 80027c6:	2b08      	cmp	r3, #8
 80027c8:	d007      	beq.n	80027da <HAL_RCC_OscConfig+0x2de>
 80027ca:	69bb      	ldr	r3, [r7, #24]
 80027cc:	2b18      	cmp	r3, #24
 80027ce:	d11b      	bne.n	8002808 <HAL_RCC_OscConfig+0x30c>
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	f003 0303 	and.w	r3, r3, #3
 80027d6:	2b01      	cmp	r3, #1
 80027d8:	d116      	bne.n	8002808 <HAL_RCC_OscConfig+0x30c>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80027da:	4b8a      	ldr	r3, [pc, #552]	; (8002a04 <HAL_RCC_OscConfig+0x508>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d005      	beq.n	80027f2 <HAL_RCC_OscConfig+0x2f6>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	69db      	ldr	r3, [r3, #28]
 80027ea:	2b80      	cmp	r3, #128	; 0x80
 80027ec:	d001      	beq.n	80027f2 <HAL_RCC_OscConfig+0x2f6>
      {
        return HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	e281      	b.n	8002cf6 <HAL_RCC_OscConfig+0x7fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80027f2:	4b84      	ldr	r3, [pc, #528]	; (8002a04 <HAL_RCC_OscConfig+0x508>)
 80027f4:	68db      	ldr	r3, [r3, #12]
 80027f6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6a1b      	ldr	r3, [r3, #32]
 80027fe:	061b      	lsls	r3, r3, #24
 8002800:	4980      	ldr	r1, [pc, #512]	; (8002a04 <HAL_RCC_OscConfig+0x508>)
 8002802:	4313      	orrs	r3, r2
 8002804:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002806:	e040      	b.n	800288a <HAL_RCC_OscConfig+0x38e>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	69db      	ldr	r3, [r3, #28]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d023      	beq.n	8002858 <HAL_RCC_OscConfig+0x35c>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002810:	4b7c      	ldr	r3, [pc, #496]	; (8002a04 <HAL_RCC_OscConfig+0x508>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a7b      	ldr	r2, [pc, #492]	; (8002a04 <HAL_RCC_OscConfig+0x508>)
 8002816:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800281a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800281c:	f7fe fdc6 	bl	80013ac <HAL_GetTick>
 8002820:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002822:	e008      	b.n	8002836 <HAL_RCC_OscConfig+0x33a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002824:	f7fe fdc2 	bl	80013ac <HAL_GetTick>
 8002828:	4602      	mov	r2, r0
 800282a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800282c:	1ad3      	subs	r3, r2, r3
 800282e:	2b02      	cmp	r3, #2
 8002830:	d901      	bls.n	8002836 <HAL_RCC_OscConfig+0x33a>
          {
            return HAL_TIMEOUT;
 8002832:	2303      	movs	r3, #3
 8002834:	e25f      	b.n	8002cf6 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002836:	4b73      	ldr	r3, [pc, #460]	; (8002a04 <HAL_RCC_OscConfig+0x508>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800283e:	2b00      	cmp	r3, #0
 8002840:	d0f0      	beq.n	8002824 <HAL_RCC_OscConfig+0x328>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002842:	4b70      	ldr	r3, [pc, #448]	; (8002a04 <HAL_RCC_OscConfig+0x508>)
 8002844:	68db      	ldr	r3, [r3, #12]
 8002846:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6a1b      	ldr	r3, [r3, #32]
 800284e:	061b      	lsls	r3, r3, #24
 8002850:	496c      	ldr	r1, [pc, #432]	; (8002a04 <HAL_RCC_OscConfig+0x508>)
 8002852:	4313      	orrs	r3, r2
 8002854:	60cb      	str	r3, [r1, #12]
 8002856:	e018      	b.n	800288a <HAL_RCC_OscConfig+0x38e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002858:	4b6a      	ldr	r3, [pc, #424]	; (8002a04 <HAL_RCC_OscConfig+0x508>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a69      	ldr	r2, [pc, #420]	; (8002a04 <HAL_RCC_OscConfig+0x508>)
 800285e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002862:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002864:	f7fe fda2 	bl	80013ac <HAL_GetTick>
 8002868:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800286a:	e008      	b.n	800287e <HAL_RCC_OscConfig+0x382>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800286c:	f7fe fd9e 	bl	80013ac <HAL_GetTick>
 8002870:	4602      	mov	r2, r0
 8002872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002874:	1ad3      	subs	r3, r2, r3
 8002876:	2b02      	cmp	r3, #2
 8002878:	d901      	bls.n	800287e <HAL_RCC_OscConfig+0x382>
          {
            return HAL_TIMEOUT;
 800287a:	2303      	movs	r3, #3
 800287c:	e23b      	b.n	8002cf6 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800287e:	4b61      	ldr	r3, [pc, #388]	; (8002a04 <HAL_RCC_OscConfig+0x508>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002886:	2b00      	cmp	r3, #0
 8002888:	d1f0      	bne.n	800286c <HAL_RCC_OscConfig+0x370>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f003 0308 	and.w	r3, r3, #8
 8002892:	2b00      	cmp	r3, #0
 8002894:	d036      	beq.n	8002904 <HAL_RCC_OscConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	695b      	ldr	r3, [r3, #20]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d019      	beq.n	80028d2 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800289e:	4b59      	ldr	r3, [pc, #356]	; (8002a04 <HAL_RCC_OscConfig+0x508>)
 80028a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028a2:	4a58      	ldr	r2, [pc, #352]	; (8002a04 <HAL_RCC_OscConfig+0x508>)
 80028a4:	f043 0301 	orr.w	r3, r3, #1
 80028a8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028aa:	f7fe fd7f 	bl	80013ac <HAL_GetTick>
 80028ae:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80028b0:	e008      	b.n	80028c4 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028b2:	f7fe fd7b 	bl	80013ac <HAL_GetTick>
 80028b6:	4602      	mov	r2, r0
 80028b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ba:	1ad3      	subs	r3, r2, r3
 80028bc:	2b02      	cmp	r3, #2
 80028be:	d901      	bls.n	80028c4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80028c0:	2303      	movs	r3, #3
 80028c2:	e218      	b.n	8002cf6 <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80028c4:	4b4f      	ldr	r3, [pc, #316]	; (8002a04 <HAL_RCC_OscConfig+0x508>)
 80028c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028c8:	f003 0302 	and.w	r3, r3, #2
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d0f0      	beq.n	80028b2 <HAL_RCC_OscConfig+0x3b6>
 80028d0:	e018      	b.n	8002904 <HAL_RCC_OscConfig+0x408>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028d2:	4b4c      	ldr	r3, [pc, #304]	; (8002a04 <HAL_RCC_OscConfig+0x508>)
 80028d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028d6:	4a4b      	ldr	r2, [pc, #300]	; (8002a04 <HAL_RCC_OscConfig+0x508>)
 80028d8:	f023 0301 	bic.w	r3, r3, #1
 80028dc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028de:	f7fe fd65 	bl	80013ac <HAL_GetTick>
 80028e2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80028e4:	e008      	b.n	80028f8 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028e6:	f7fe fd61 	bl	80013ac <HAL_GetTick>
 80028ea:	4602      	mov	r2, r0
 80028ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ee:	1ad3      	subs	r3, r2, r3
 80028f0:	2b02      	cmp	r3, #2
 80028f2:	d901      	bls.n	80028f8 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 80028f4:	2303      	movs	r3, #3
 80028f6:	e1fe      	b.n	8002cf6 <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80028f8:	4b42      	ldr	r3, [pc, #264]	; (8002a04 <HAL_RCC_OscConfig+0x508>)
 80028fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028fc:	f003 0302 	and.w	r3, r3, #2
 8002900:	2b00      	cmp	r3, #0
 8002902:	d1f0      	bne.n	80028e6 <HAL_RCC_OscConfig+0x3ea>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f003 0320 	and.w	r3, r3, #32
 800290c:	2b00      	cmp	r3, #0
 800290e:	d036      	beq.n	800297e <HAL_RCC_OscConfig+0x482>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	699b      	ldr	r3, [r3, #24]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d019      	beq.n	800294c <HAL_RCC_OscConfig+0x450>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002918:	4b3a      	ldr	r3, [pc, #232]	; (8002a04 <HAL_RCC_OscConfig+0x508>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a39      	ldr	r2, [pc, #228]	; (8002a04 <HAL_RCC_OscConfig+0x508>)
 800291e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002922:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002924:	f7fe fd42 	bl	80013ac <HAL_GetTick>
 8002928:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800292a:	e008      	b.n	800293e <HAL_RCC_OscConfig+0x442>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800292c:	f7fe fd3e 	bl	80013ac <HAL_GetTick>
 8002930:	4602      	mov	r2, r0
 8002932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002934:	1ad3      	subs	r3, r2, r3
 8002936:	2b02      	cmp	r3, #2
 8002938:	d901      	bls.n	800293e <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 800293a:	2303      	movs	r3, #3
 800293c:	e1db      	b.n	8002cf6 <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800293e:	4b31      	ldr	r3, [pc, #196]	; (8002a04 <HAL_RCC_OscConfig+0x508>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002946:	2b00      	cmp	r3, #0
 8002948:	d0f0      	beq.n	800292c <HAL_RCC_OscConfig+0x430>
 800294a:	e018      	b.n	800297e <HAL_RCC_OscConfig+0x482>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800294c:	4b2d      	ldr	r3, [pc, #180]	; (8002a04 <HAL_RCC_OscConfig+0x508>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a2c      	ldr	r2, [pc, #176]	; (8002a04 <HAL_RCC_OscConfig+0x508>)
 8002952:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002956:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002958:	f7fe fd28 	bl	80013ac <HAL_GetTick>
 800295c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800295e:	e008      	b.n	8002972 <HAL_RCC_OscConfig+0x476>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002960:	f7fe fd24 	bl	80013ac <HAL_GetTick>
 8002964:	4602      	mov	r2, r0
 8002966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002968:	1ad3      	subs	r3, r2, r3
 800296a:	2b02      	cmp	r3, #2
 800296c:	d901      	bls.n	8002972 <HAL_RCC_OscConfig+0x476>
        {
          return HAL_TIMEOUT;
 800296e:	2303      	movs	r3, #3
 8002970:	e1c1      	b.n	8002cf6 <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002972:	4b24      	ldr	r3, [pc, #144]	; (8002a04 <HAL_RCC_OscConfig+0x508>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800297a:	2b00      	cmp	r3, #0
 800297c:	d1f0      	bne.n	8002960 <HAL_RCC_OscConfig+0x464>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f003 0304 	and.w	r3, r3, #4
 8002986:	2b00      	cmp	r3, #0
 8002988:	f000 80af 	beq.w	8002aea <HAL_RCC_OscConfig+0x5ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800298c:	4b1e      	ldr	r3, [pc, #120]	; (8002a08 <HAL_RCC_OscConfig+0x50c>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a1d      	ldr	r2, [pc, #116]	; (8002a08 <HAL_RCC_OscConfig+0x50c>)
 8002992:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002996:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002998:	f7fe fd08 	bl	80013ac <HAL_GetTick>
 800299c:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800299e:	e008      	b.n	80029b2 <HAL_RCC_OscConfig+0x4b6>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80029a0:	f7fe fd04 	bl	80013ac <HAL_GetTick>
 80029a4:	4602      	mov	r2, r0
 80029a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a8:	1ad3      	subs	r3, r2, r3
 80029aa:	2b64      	cmp	r3, #100	; 0x64
 80029ac:	d901      	bls.n	80029b2 <HAL_RCC_OscConfig+0x4b6>
      {
        return HAL_TIMEOUT;
 80029ae:	2303      	movs	r3, #3
 80029b0:	e1a1      	b.n	8002cf6 <HAL_RCC_OscConfig+0x7fa>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80029b2:	4b15      	ldr	r3, [pc, #84]	; (8002a08 <HAL_RCC_OscConfig+0x50c>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d0f0      	beq.n	80029a0 <HAL_RCC_OscConfig+0x4a4>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	689b      	ldr	r3, [r3, #8]
 80029c2:	2b01      	cmp	r3, #1
 80029c4:	d106      	bne.n	80029d4 <HAL_RCC_OscConfig+0x4d8>
 80029c6:	4b0f      	ldr	r3, [pc, #60]	; (8002a04 <HAL_RCC_OscConfig+0x508>)
 80029c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029ca:	4a0e      	ldr	r2, [pc, #56]	; (8002a04 <HAL_RCC_OscConfig+0x508>)
 80029cc:	f043 0301 	orr.w	r3, r3, #1
 80029d0:	6713      	str	r3, [r2, #112]	; 0x70
 80029d2:	e05b      	b.n	8002a8c <HAL_RCC_OscConfig+0x590>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	689b      	ldr	r3, [r3, #8]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d117      	bne.n	8002a0c <HAL_RCC_OscConfig+0x510>
 80029dc:	4b09      	ldr	r3, [pc, #36]	; (8002a04 <HAL_RCC_OscConfig+0x508>)
 80029de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029e0:	4a08      	ldr	r2, [pc, #32]	; (8002a04 <HAL_RCC_OscConfig+0x508>)
 80029e2:	f023 0301 	bic.w	r3, r3, #1
 80029e6:	6713      	str	r3, [r2, #112]	; 0x70
 80029e8:	4b06      	ldr	r3, [pc, #24]	; (8002a04 <HAL_RCC_OscConfig+0x508>)
 80029ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029ec:	4a05      	ldr	r2, [pc, #20]	; (8002a04 <HAL_RCC_OscConfig+0x508>)
 80029ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80029f2:	6713      	str	r3, [r2, #112]	; 0x70
 80029f4:	4b03      	ldr	r3, [pc, #12]	; (8002a04 <HAL_RCC_OscConfig+0x508>)
 80029f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029f8:	4a02      	ldr	r2, [pc, #8]	; (8002a04 <HAL_RCC_OscConfig+0x508>)
 80029fa:	f023 0304 	bic.w	r3, r3, #4
 80029fe:	6713      	str	r3, [r2, #112]	; 0x70
 8002a00:	e044      	b.n	8002a8c <HAL_RCC_OscConfig+0x590>
 8002a02:	bf00      	nop
 8002a04:	58024400 	.word	0x58024400
 8002a08:	58024800 	.word	0x58024800
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	689b      	ldr	r3, [r3, #8]
 8002a10:	2b05      	cmp	r3, #5
 8002a12:	d112      	bne.n	8002a3a <HAL_RCC_OscConfig+0x53e>
 8002a14:	4b95      	ldr	r3, [pc, #596]	; (8002c6c <HAL_RCC_OscConfig+0x770>)
 8002a16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a18:	4a94      	ldr	r2, [pc, #592]	; (8002c6c <HAL_RCC_OscConfig+0x770>)
 8002a1a:	f043 0304 	orr.w	r3, r3, #4
 8002a1e:	6713      	str	r3, [r2, #112]	; 0x70
 8002a20:	4b92      	ldr	r3, [pc, #584]	; (8002c6c <HAL_RCC_OscConfig+0x770>)
 8002a22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a24:	4a91      	ldr	r2, [pc, #580]	; (8002c6c <HAL_RCC_OscConfig+0x770>)
 8002a26:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a2a:	6713      	str	r3, [r2, #112]	; 0x70
 8002a2c:	4b8f      	ldr	r3, [pc, #572]	; (8002c6c <HAL_RCC_OscConfig+0x770>)
 8002a2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a30:	4a8e      	ldr	r2, [pc, #568]	; (8002c6c <HAL_RCC_OscConfig+0x770>)
 8002a32:	f043 0301 	orr.w	r3, r3, #1
 8002a36:	6713      	str	r3, [r2, #112]	; 0x70
 8002a38:	e028      	b.n	8002a8c <HAL_RCC_OscConfig+0x590>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	2b85      	cmp	r3, #133	; 0x85
 8002a40:	d112      	bne.n	8002a68 <HAL_RCC_OscConfig+0x56c>
 8002a42:	4b8a      	ldr	r3, [pc, #552]	; (8002c6c <HAL_RCC_OscConfig+0x770>)
 8002a44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a46:	4a89      	ldr	r2, [pc, #548]	; (8002c6c <HAL_RCC_OscConfig+0x770>)
 8002a48:	f043 0304 	orr.w	r3, r3, #4
 8002a4c:	6713      	str	r3, [r2, #112]	; 0x70
 8002a4e:	4b87      	ldr	r3, [pc, #540]	; (8002c6c <HAL_RCC_OscConfig+0x770>)
 8002a50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a52:	4a86      	ldr	r2, [pc, #536]	; (8002c6c <HAL_RCC_OscConfig+0x770>)
 8002a54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a58:	6713      	str	r3, [r2, #112]	; 0x70
 8002a5a:	4b84      	ldr	r3, [pc, #528]	; (8002c6c <HAL_RCC_OscConfig+0x770>)
 8002a5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a5e:	4a83      	ldr	r2, [pc, #524]	; (8002c6c <HAL_RCC_OscConfig+0x770>)
 8002a60:	f043 0301 	orr.w	r3, r3, #1
 8002a64:	6713      	str	r3, [r2, #112]	; 0x70
 8002a66:	e011      	b.n	8002a8c <HAL_RCC_OscConfig+0x590>
 8002a68:	4b80      	ldr	r3, [pc, #512]	; (8002c6c <HAL_RCC_OscConfig+0x770>)
 8002a6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a6c:	4a7f      	ldr	r2, [pc, #508]	; (8002c6c <HAL_RCC_OscConfig+0x770>)
 8002a6e:	f023 0301 	bic.w	r3, r3, #1
 8002a72:	6713      	str	r3, [r2, #112]	; 0x70
 8002a74:	4b7d      	ldr	r3, [pc, #500]	; (8002c6c <HAL_RCC_OscConfig+0x770>)
 8002a76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a78:	4a7c      	ldr	r2, [pc, #496]	; (8002c6c <HAL_RCC_OscConfig+0x770>)
 8002a7a:	f023 0304 	bic.w	r3, r3, #4
 8002a7e:	6713      	str	r3, [r2, #112]	; 0x70
 8002a80:	4b7a      	ldr	r3, [pc, #488]	; (8002c6c <HAL_RCC_OscConfig+0x770>)
 8002a82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a84:	4a79      	ldr	r2, [pc, #484]	; (8002c6c <HAL_RCC_OscConfig+0x770>)
 8002a86:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a8a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d015      	beq.n	8002ac0 <HAL_RCC_OscConfig+0x5c4>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a94:	f7fe fc8a 	bl	80013ac <HAL_GetTick>
 8002a98:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002a9a:	e00a      	b.n	8002ab2 <HAL_RCC_OscConfig+0x5b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a9c:	f7fe fc86 	bl	80013ac <HAL_GetTick>
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa4:	1ad3      	subs	r3, r2, r3
 8002aa6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d901      	bls.n	8002ab2 <HAL_RCC_OscConfig+0x5b6>
        {
          return HAL_TIMEOUT;
 8002aae:	2303      	movs	r3, #3
 8002ab0:	e121      	b.n	8002cf6 <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002ab2:	4b6e      	ldr	r3, [pc, #440]	; (8002c6c <HAL_RCC_OscConfig+0x770>)
 8002ab4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ab6:	f003 0302 	and.w	r3, r3, #2
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d0ee      	beq.n	8002a9c <HAL_RCC_OscConfig+0x5a0>
 8002abe:	e014      	b.n	8002aea <HAL_RCC_OscConfig+0x5ee>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ac0:	f7fe fc74 	bl	80013ac <HAL_GetTick>
 8002ac4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002ac6:	e00a      	b.n	8002ade <HAL_RCC_OscConfig+0x5e2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ac8:	f7fe fc70 	bl	80013ac <HAL_GetTick>
 8002acc:	4602      	mov	r2, r0
 8002ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad0:	1ad3      	subs	r3, r2, r3
 8002ad2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d901      	bls.n	8002ade <HAL_RCC_OscConfig+0x5e2>
        {
          return HAL_TIMEOUT;
 8002ada:	2303      	movs	r3, #3
 8002adc:	e10b      	b.n	8002cf6 <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002ade:	4b63      	ldr	r3, [pc, #396]	; (8002c6c <HAL_RCC_OscConfig+0x770>)
 8002ae0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ae2:	f003 0302 	and.w	r3, r3, #2
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d1ee      	bne.n	8002ac8 <HAL_RCC_OscConfig+0x5cc>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	f000 8100 	beq.w	8002cf4 <HAL_RCC_OscConfig+0x7f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002af4:	4b5d      	ldr	r3, [pc, #372]	; (8002c6c <HAL_RCC_OscConfig+0x770>)
 8002af6:	691b      	ldr	r3, [r3, #16]
 8002af8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002afc:	2b18      	cmp	r3, #24
 8002afe:	f000 80bb 	beq.w	8002c78 <HAL_RCC_OscConfig+0x77c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b06:	2b02      	cmp	r3, #2
 8002b08:	f040 8095 	bne.w	8002c36 <HAL_RCC_OscConfig+0x73a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b0c:	4b57      	ldr	r3, [pc, #348]	; (8002c6c <HAL_RCC_OscConfig+0x770>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a56      	ldr	r2, [pc, #344]	; (8002c6c <HAL_RCC_OscConfig+0x770>)
 8002b12:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b18:	f7fe fc48 	bl	80013ac <HAL_GetTick>
 8002b1c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002b1e:	e008      	b.n	8002b32 <HAL_RCC_OscConfig+0x636>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b20:	f7fe fc44 	bl	80013ac <HAL_GetTick>
 8002b24:	4602      	mov	r2, r0
 8002b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b28:	1ad3      	subs	r3, r2, r3
 8002b2a:	2b02      	cmp	r3, #2
 8002b2c:	d901      	bls.n	8002b32 <HAL_RCC_OscConfig+0x636>
          {
            return HAL_TIMEOUT;
 8002b2e:	2303      	movs	r3, #3
 8002b30:	e0e1      	b.n	8002cf6 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002b32:	4b4e      	ldr	r3, [pc, #312]	; (8002c6c <HAL_RCC_OscConfig+0x770>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d1f0      	bne.n	8002b20 <HAL_RCC_OscConfig+0x624>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b3e:	4b4b      	ldr	r3, [pc, #300]	; (8002c6c <HAL_RCC_OscConfig+0x770>)
 8002b40:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b42:	4b4b      	ldr	r3, [pc, #300]	; (8002c70 <HAL_RCC_OscConfig+0x774>)
 8002b44:	4013      	ands	r3, r2
 8002b46:	687a      	ldr	r2, [r7, #4]
 8002b48:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002b4a:	687a      	ldr	r2, [r7, #4]
 8002b4c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002b4e:	0112      	lsls	r2, r2, #4
 8002b50:	430a      	orrs	r2, r1
 8002b52:	4946      	ldr	r1, [pc, #280]	; (8002c6c <HAL_RCC_OscConfig+0x770>)
 8002b54:	4313      	orrs	r3, r2
 8002b56:	628b      	str	r3, [r1, #40]	; 0x28
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b5c:	3b01      	subs	r3, #1
 8002b5e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b66:	3b01      	subs	r3, #1
 8002b68:	025b      	lsls	r3, r3, #9
 8002b6a:	b29b      	uxth	r3, r3
 8002b6c:	431a      	orrs	r2, r3
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b72:	3b01      	subs	r3, #1
 8002b74:	041b      	lsls	r3, r3, #16
 8002b76:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002b7a:	431a      	orrs	r2, r3
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b80:	3b01      	subs	r3, #1
 8002b82:	061b      	lsls	r3, r3, #24
 8002b84:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002b88:	4938      	ldr	r1, [pc, #224]	; (8002c6c <HAL_RCC_OscConfig+0x770>)
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8002b8e:	4b37      	ldr	r3, [pc, #220]	; (8002c6c <HAL_RCC_OscConfig+0x770>)
 8002b90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b92:	4a36      	ldr	r2, [pc, #216]	; (8002c6c <HAL_RCC_OscConfig+0x770>)
 8002b94:	f023 0301 	bic.w	r3, r3, #1
 8002b98:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002b9a:	4b34      	ldr	r3, [pc, #208]	; (8002c6c <HAL_RCC_OscConfig+0x770>)
 8002b9c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b9e:	4b35      	ldr	r3, [pc, #212]	; (8002c74 <HAL_RCC_OscConfig+0x778>)
 8002ba0:	4013      	ands	r3, r2
 8002ba2:	687a      	ldr	r2, [r7, #4]
 8002ba4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002ba6:	00d2      	lsls	r2, r2, #3
 8002ba8:	4930      	ldr	r1, [pc, #192]	; (8002c6c <HAL_RCC_OscConfig+0x770>)
 8002baa:	4313      	orrs	r3, r2
 8002bac:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002bae:	4b2f      	ldr	r3, [pc, #188]	; (8002c6c <HAL_RCC_OscConfig+0x770>)
 8002bb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bb2:	f023 020c 	bic.w	r2, r3, #12
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bba:	492c      	ldr	r1, [pc, #176]	; (8002c6c <HAL_RCC_OscConfig+0x770>)
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002bc0:	4b2a      	ldr	r3, [pc, #168]	; (8002c6c <HAL_RCC_OscConfig+0x770>)
 8002bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bc4:	f023 0202 	bic.w	r2, r3, #2
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bcc:	4927      	ldr	r1, [pc, #156]	; (8002c6c <HAL_RCC_OscConfig+0x770>)
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002bd2:	4b26      	ldr	r3, [pc, #152]	; (8002c6c <HAL_RCC_OscConfig+0x770>)
 8002bd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bd6:	4a25      	ldr	r2, [pc, #148]	; (8002c6c <HAL_RCC_OscConfig+0x770>)
 8002bd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bdc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002bde:	4b23      	ldr	r3, [pc, #140]	; (8002c6c <HAL_RCC_OscConfig+0x770>)
 8002be0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002be2:	4a22      	ldr	r2, [pc, #136]	; (8002c6c <HAL_RCC_OscConfig+0x770>)
 8002be4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002be8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002bea:	4b20      	ldr	r3, [pc, #128]	; (8002c6c <HAL_RCC_OscConfig+0x770>)
 8002bec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bee:	4a1f      	ldr	r2, [pc, #124]	; (8002c6c <HAL_RCC_OscConfig+0x770>)
 8002bf0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002bf4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8002bf6:	4b1d      	ldr	r3, [pc, #116]	; (8002c6c <HAL_RCC_OscConfig+0x770>)
 8002bf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bfa:	4a1c      	ldr	r2, [pc, #112]	; (8002c6c <HAL_RCC_OscConfig+0x770>)
 8002bfc:	f043 0301 	orr.w	r3, r3, #1
 8002c00:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c02:	4b1a      	ldr	r3, [pc, #104]	; (8002c6c <HAL_RCC_OscConfig+0x770>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a19      	ldr	r2, [pc, #100]	; (8002c6c <HAL_RCC_OscConfig+0x770>)
 8002c08:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c0e:	f7fe fbcd 	bl	80013ac <HAL_GetTick>
 8002c12:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002c14:	e008      	b.n	8002c28 <HAL_RCC_OscConfig+0x72c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c16:	f7fe fbc9 	bl	80013ac <HAL_GetTick>
 8002c1a:	4602      	mov	r2, r0
 8002c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c1e:	1ad3      	subs	r3, r2, r3
 8002c20:	2b02      	cmp	r3, #2
 8002c22:	d901      	bls.n	8002c28 <HAL_RCC_OscConfig+0x72c>
          {
            return HAL_TIMEOUT;
 8002c24:	2303      	movs	r3, #3
 8002c26:	e066      	b.n	8002cf6 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002c28:	4b10      	ldr	r3, [pc, #64]	; (8002c6c <HAL_RCC_OscConfig+0x770>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d0f0      	beq.n	8002c16 <HAL_RCC_OscConfig+0x71a>
 8002c34:	e05e      	b.n	8002cf4 <HAL_RCC_OscConfig+0x7f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c36:	4b0d      	ldr	r3, [pc, #52]	; (8002c6c <HAL_RCC_OscConfig+0x770>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a0c      	ldr	r2, [pc, #48]	; (8002c6c <HAL_RCC_OscConfig+0x770>)
 8002c3c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c42:	f7fe fbb3 	bl	80013ac <HAL_GetTick>
 8002c46:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002c48:	e008      	b.n	8002c5c <HAL_RCC_OscConfig+0x760>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c4a:	f7fe fbaf 	bl	80013ac <HAL_GetTick>
 8002c4e:	4602      	mov	r2, r0
 8002c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c52:	1ad3      	subs	r3, r2, r3
 8002c54:	2b02      	cmp	r3, #2
 8002c56:	d901      	bls.n	8002c5c <HAL_RCC_OscConfig+0x760>
          {
            return HAL_TIMEOUT;
 8002c58:	2303      	movs	r3, #3
 8002c5a:	e04c      	b.n	8002cf6 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002c5c:	4b03      	ldr	r3, [pc, #12]	; (8002c6c <HAL_RCC_OscConfig+0x770>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d1f0      	bne.n	8002c4a <HAL_RCC_OscConfig+0x74e>
 8002c68:	e044      	b.n	8002cf4 <HAL_RCC_OscConfig+0x7f8>
 8002c6a:	bf00      	nop
 8002c6c:	58024400 	.word	0x58024400
 8002c70:	fffffc0c 	.word	0xfffffc0c
 8002c74:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002c78:	4b21      	ldr	r3, [pc, #132]	; (8002d00 <HAL_RCC_OscConfig+0x804>)
 8002c7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c7c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002c7e:	4b20      	ldr	r3, [pc, #128]	; (8002d00 <HAL_RCC_OscConfig+0x804>)
 8002c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c82:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c88:	2b01      	cmp	r3, #1
 8002c8a:	d031      	beq.n	8002cf0 <HAL_RCC_OscConfig+0x7f4>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c8c:	693b      	ldr	r3, [r7, #16]
 8002c8e:	f003 0203 	and.w	r2, r3, #3
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c96:	429a      	cmp	r2, r3
 8002c98:	d12a      	bne.n	8002cf0 <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	091b      	lsrs	r3, r3, #4
 8002c9e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ca6:	429a      	cmp	r2, r3
 8002ca8:	d122      	bne.n	8002cf0 <HAL_RCC_OscConfig+0x7f4>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb4:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002cb6:	429a      	cmp	r2, r3
 8002cb8:	d11a      	bne.n	8002cf0 <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	0a5b      	lsrs	r3, r3, #9
 8002cbe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cc6:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002cc8:	429a      	cmp	r2, r3
 8002cca:	d111      	bne.n	8002cf0 <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	0c1b      	lsrs	r3, r3, #16
 8002cd0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cd8:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002cda:	429a      	cmp	r2, r3
 8002cdc:	d108      	bne.n	8002cf0 <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	0e1b      	lsrs	r3, r3, #24
 8002ce2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cea:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002cec:	429a      	cmp	r2, r3
 8002cee:	d001      	beq.n	8002cf4 <HAL_RCC_OscConfig+0x7f8>
      {
        return HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	e000      	b.n	8002cf6 <HAL_RCC_OscConfig+0x7fa>
      }
    }
  }
  return HAL_OK;
 8002cf4:	2300      	movs	r3, #0
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	3730      	adds	r7, #48	; 0x30
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}
 8002cfe:	bf00      	nop
 8002d00:	58024400 	.word	0x58024400

08002d04 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b086      	sub	sp, #24
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
 8002d0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d101      	bne.n	8002d18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	e19c      	b.n	8003052 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d18:	4b8a      	ldr	r3, [pc, #552]	; (8002f44 <HAL_RCC_ClockConfig+0x240>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f003 030f 	and.w	r3, r3, #15
 8002d20:	683a      	ldr	r2, [r7, #0]
 8002d22:	429a      	cmp	r2, r3
 8002d24:	d910      	bls.n	8002d48 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d26:	4b87      	ldr	r3, [pc, #540]	; (8002f44 <HAL_RCC_ClockConfig+0x240>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f023 020f 	bic.w	r2, r3, #15
 8002d2e:	4985      	ldr	r1, [pc, #532]	; (8002f44 <HAL_RCC_ClockConfig+0x240>)
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	4313      	orrs	r3, r2
 8002d34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d36:	4b83      	ldr	r3, [pc, #524]	; (8002f44 <HAL_RCC_ClockConfig+0x240>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f003 030f 	and.w	r3, r3, #15
 8002d3e:	683a      	ldr	r2, [r7, #0]
 8002d40:	429a      	cmp	r2, r3
 8002d42:	d001      	beq.n	8002d48 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002d44:	2301      	movs	r3, #1
 8002d46:	e184      	b.n	8003052 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f003 0304 	and.w	r3, r3, #4
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d010      	beq.n	8002d76 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	691a      	ldr	r2, [r3, #16]
 8002d58:	4b7b      	ldr	r3, [pc, #492]	; (8002f48 <HAL_RCC_ClockConfig+0x244>)
 8002d5a:	699b      	ldr	r3, [r3, #24]
 8002d5c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002d60:	429a      	cmp	r2, r3
 8002d62:	d908      	bls.n	8002d76 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002d64:	4b78      	ldr	r3, [pc, #480]	; (8002f48 <HAL_RCC_ClockConfig+0x244>)
 8002d66:	699b      	ldr	r3, [r3, #24]
 8002d68:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	691b      	ldr	r3, [r3, #16]
 8002d70:	4975      	ldr	r1, [pc, #468]	; (8002f48 <HAL_RCC_ClockConfig+0x244>)
 8002d72:	4313      	orrs	r3, r2
 8002d74:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f003 0308 	and.w	r3, r3, #8
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d010      	beq.n	8002da4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	695a      	ldr	r2, [r3, #20]
 8002d86:	4b70      	ldr	r3, [pc, #448]	; (8002f48 <HAL_RCC_ClockConfig+0x244>)
 8002d88:	69db      	ldr	r3, [r3, #28]
 8002d8a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002d8e:	429a      	cmp	r2, r3
 8002d90:	d908      	bls.n	8002da4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002d92:	4b6d      	ldr	r3, [pc, #436]	; (8002f48 <HAL_RCC_ClockConfig+0x244>)
 8002d94:	69db      	ldr	r3, [r3, #28]
 8002d96:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	695b      	ldr	r3, [r3, #20]
 8002d9e:	496a      	ldr	r1, [pc, #424]	; (8002f48 <HAL_RCC_ClockConfig+0x244>)
 8002da0:	4313      	orrs	r3, r2
 8002da2:	61cb      	str	r3, [r1, #28]
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f003 0310 	and.w	r3, r3, #16
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d010      	beq.n	8002dd2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
     if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	699a      	ldr	r2, [r3, #24]
 8002db4:	4b64      	ldr	r3, [pc, #400]	; (8002f48 <HAL_RCC_ClockConfig+0x244>)
 8002db6:	69db      	ldr	r3, [r3, #28]
 8002db8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002dbc:	429a      	cmp	r2, r3
 8002dbe:	d908      	bls.n	8002dd2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002dc0:	4b61      	ldr	r3, [pc, #388]	; (8002f48 <HAL_RCC_ClockConfig+0x244>)
 8002dc2:	69db      	ldr	r3, [r3, #28]
 8002dc4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	699b      	ldr	r3, [r3, #24]
 8002dcc:	495e      	ldr	r1, [pc, #376]	; (8002f48 <HAL_RCC_ClockConfig+0x244>)
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f003 0320 	and.w	r3, r3, #32
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d010      	beq.n	8002e00 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
    }
#else
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	69da      	ldr	r2, [r3, #28]
 8002de2:	4b59      	ldr	r3, [pc, #356]	; (8002f48 <HAL_RCC_ClockConfig+0x244>)
 8002de4:	6a1b      	ldr	r3, [r3, #32]
 8002de6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002dea:	429a      	cmp	r2, r3
 8002dec:	d908      	bls.n	8002e00 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002dee:	4b56      	ldr	r3, [pc, #344]	; (8002f48 <HAL_RCC_ClockConfig+0x244>)
 8002df0:	6a1b      	ldr	r3, [r3, #32]
 8002df2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	69db      	ldr	r3, [r3, #28]
 8002dfa:	4953      	ldr	r1, [pc, #332]	; (8002f48 <HAL_RCC_ClockConfig+0x244>)
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f003 0302 	and.w	r3, r3, #2
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d010      	beq.n	8002e2e <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
        if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	68da      	ldr	r2, [r3, #12]
 8002e10:	4b4d      	ldr	r3, [pc, #308]	; (8002f48 <HAL_RCC_ClockConfig+0x244>)
 8002e12:	699b      	ldr	r3, [r3, #24]
 8002e14:	f003 030f 	and.w	r3, r3, #15
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	d908      	bls.n	8002e2e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e1c:	4b4a      	ldr	r3, [pc, #296]	; (8002f48 <HAL_RCC_ClockConfig+0x244>)
 8002e1e:	699b      	ldr	r3, [r3, #24]
 8002e20:	f023 020f 	bic.w	r2, r3, #15
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	68db      	ldr	r3, [r3, #12]
 8002e28:	4947      	ldr	r1, [pc, #284]	; (8002f48 <HAL_RCC_ClockConfig+0x244>)
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f003 0301 	and.w	r3, r3, #1
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d055      	beq.n	8002ee6 <HAL_RCC_ClockConfig+0x1e2>
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002e3a:	4b43      	ldr	r3, [pc, #268]	; (8002f48 <HAL_RCC_ClockConfig+0x244>)
 8002e3c:	699b      	ldr	r3, [r3, #24]
 8002e3e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	689b      	ldr	r3, [r3, #8]
 8002e46:	4940      	ldr	r1, [pc, #256]	; (8002f48 <HAL_RCC_ClockConfig+0x244>)
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	618b      	str	r3, [r1, #24]
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	2b02      	cmp	r3, #2
 8002e52:	d107      	bne.n	8002e64 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002e54:	4b3c      	ldr	r3, [pc, #240]	; (8002f48 <HAL_RCC_ClockConfig+0x244>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d121      	bne.n	8002ea4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002e60:	2301      	movs	r3, #1
 8002e62:	e0f6      	b.n	8003052 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	2b03      	cmp	r3, #3
 8002e6a:	d107      	bne.n	8002e7c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002e6c:	4b36      	ldr	r3, [pc, #216]	; (8002f48 <HAL_RCC_ClockConfig+0x244>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d115      	bne.n	8002ea4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	e0ea      	b.n	8003052 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	2b01      	cmp	r3, #1
 8002e82:	d107      	bne.n	8002e94 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002e84:	4b30      	ldr	r3, [pc, #192]	; (8002f48 <HAL_RCC_ClockConfig+0x244>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d109      	bne.n	8002ea4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002e90:	2301      	movs	r3, #1
 8002e92:	e0de      	b.n	8003052 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002e94:	4b2c      	ldr	r3, [pc, #176]	; (8002f48 <HAL_RCC_ClockConfig+0x244>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f003 0304 	and.w	r3, r3, #4
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d101      	bne.n	8002ea4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	e0d6      	b.n	8003052 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002ea4:	4b28      	ldr	r3, [pc, #160]	; (8002f48 <HAL_RCC_ClockConfig+0x244>)
 8002ea6:	691b      	ldr	r3, [r3, #16]
 8002ea8:	f023 0207 	bic.w	r2, r3, #7
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	4925      	ldr	r1, [pc, #148]	; (8002f48 <HAL_RCC_ClockConfig+0x244>)
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eb6:	f7fe fa79 	bl	80013ac <HAL_GetTick>
 8002eba:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ebc:	e00a      	b.n	8002ed4 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ebe:	f7fe fa75 	bl	80013ac <HAL_GetTick>
 8002ec2:	4602      	mov	r2, r0
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	1ad3      	subs	r3, r2, r3
 8002ec8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d901      	bls.n	8002ed4 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002ed0:	2303      	movs	r3, #3
 8002ed2:	e0be      	b.n	8003052 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ed4:	4b1c      	ldr	r3, [pc, #112]	; (8002f48 <HAL_RCC_ClockConfig+0x244>)
 8002ed6:	691b      	ldr	r3, [r3, #16]
 8002ed8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	00db      	lsls	r3, r3, #3
 8002ee2:	429a      	cmp	r2, r3
 8002ee4:	d1eb      	bne.n	8002ebe <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f003 0302 	and.w	r3, r3, #2
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d010      	beq.n	8002f14 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	68da      	ldr	r2, [r3, #12]
 8002ef6:	4b14      	ldr	r3, [pc, #80]	; (8002f48 <HAL_RCC_ClockConfig+0x244>)
 8002ef8:	699b      	ldr	r3, [r3, #24]
 8002efa:	f003 030f 	and.w	r3, r3, #15
 8002efe:	429a      	cmp	r2, r3
 8002f00:	d208      	bcs.n	8002f14 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f02:	4b11      	ldr	r3, [pc, #68]	; (8002f48 <HAL_RCC_ClockConfig+0x244>)
 8002f04:	699b      	ldr	r3, [r3, #24]
 8002f06:	f023 020f 	bic.w	r2, r3, #15
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	68db      	ldr	r3, [r3, #12]
 8002f0e:	490e      	ldr	r1, [pc, #56]	; (8002f48 <HAL_RCC_ClockConfig+0x244>)
 8002f10:	4313      	orrs	r3, r2
 8002f12:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f14:	4b0b      	ldr	r3, [pc, #44]	; (8002f44 <HAL_RCC_ClockConfig+0x240>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f003 030f 	and.w	r3, r3, #15
 8002f1c:	683a      	ldr	r2, [r7, #0]
 8002f1e:	429a      	cmp	r2, r3
 8002f20:	d214      	bcs.n	8002f4c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f22:	4b08      	ldr	r3, [pc, #32]	; (8002f44 <HAL_RCC_ClockConfig+0x240>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f023 020f 	bic.w	r2, r3, #15
 8002f2a:	4906      	ldr	r1, [pc, #24]	; (8002f44 <HAL_RCC_ClockConfig+0x240>)
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f32:	4b04      	ldr	r3, [pc, #16]	; (8002f44 <HAL_RCC_ClockConfig+0x240>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f003 030f 	and.w	r3, r3, #15
 8002f3a:	683a      	ldr	r2, [r7, #0]
 8002f3c:	429a      	cmp	r2, r3
 8002f3e:	d005      	beq.n	8002f4c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002f40:	2301      	movs	r3, #1
 8002f42:	e086      	b.n	8003052 <HAL_RCC_ClockConfig+0x34e>
 8002f44:	52002000 	.word	0x52002000
 8002f48:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f003 0304 	and.w	r3, r3, #4
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d010      	beq.n	8002f7a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
   }
#else
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	691a      	ldr	r2, [r3, #16]
 8002f5c:	4b3f      	ldr	r3, [pc, #252]	; (800305c <HAL_RCC_ClockConfig+0x358>)
 8002f5e:	699b      	ldr	r3, [r3, #24]
 8002f60:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002f64:	429a      	cmp	r2, r3
 8002f66:	d208      	bcs.n	8002f7a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002f68:	4b3c      	ldr	r3, [pc, #240]	; (800305c <HAL_RCC_ClockConfig+0x358>)
 8002f6a:	699b      	ldr	r3, [r3, #24]
 8002f6c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	691b      	ldr	r3, [r3, #16]
 8002f74:	4939      	ldr	r1, [pc, #228]	; (800305c <HAL_RCC_ClockConfig+0x358>)
 8002f76:	4313      	orrs	r3, r2
 8002f78:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f003 0308 	and.w	r3, r3, #8
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d010      	beq.n	8002fa8 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	695a      	ldr	r2, [r3, #20]
 8002f8a:	4b34      	ldr	r3, [pc, #208]	; (800305c <HAL_RCC_ClockConfig+0x358>)
 8002f8c:	69db      	ldr	r3, [r3, #28]
 8002f8e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002f92:	429a      	cmp	r2, r3
 8002f94:	d208      	bcs.n	8002fa8 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002f96:	4b31      	ldr	r3, [pc, #196]	; (800305c <HAL_RCC_ClockConfig+0x358>)
 8002f98:	69db      	ldr	r3, [r3, #28]
 8002f9a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	695b      	ldr	r3, [r3, #20]
 8002fa2:	492e      	ldr	r1, [pc, #184]	; (800305c <HAL_RCC_ClockConfig+0x358>)
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f003 0310 	and.w	r3, r3, #16
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d010      	beq.n	8002fd6 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	699a      	ldr	r2, [r3, #24]
 8002fb8:	4b28      	ldr	r3, [pc, #160]	; (800305c <HAL_RCC_ClockConfig+0x358>)
 8002fba:	69db      	ldr	r3, [r3, #28]
 8002fbc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002fc0:	429a      	cmp	r2, r3
 8002fc2:	d208      	bcs.n	8002fd6 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002fc4:	4b25      	ldr	r3, [pc, #148]	; (800305c <HAL_RCC_ClockConfig+0x358>)
 8002fc6:	69db      	ldr	r3, [r3, #28]
 8002fc8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	699b      	ldr	r3, [r3, #24]
 8002fd0:	4922      	ldr	r1, [pc, #136]	; (800305c <HAL_RCC_ClockConfig+0x358>)
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f003 0320 	and.w	r3, r3, #32
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d010      	beq.n	8003004 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
   }
#else
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	69da      	ldr	r2, [r3, #28]
 8002fe6:	4b1d      	ldr	r3, [pc, #116]	; (800305c <HAL_RCC_ClockConfig+0x358>)
 8002fe8:	6a1b      	ldr	r3, [r3, #32]
 8002fea:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002fee:	429a      	cmp	r2, r3
 8002ff0:	d208      	bcs.n	8003004 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002ff2:	4b1a      	ldr	r3, [pc, #104]	; (800305c <HAL_RCC_ClockConfig+0x358>)
 8002ff4:	6a1b      	ldr	r3, [r3, #32]
 8002ff6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	69db      	ldr	r3, [r3, #28]
 8002ffe:	4917      	ldr	r1, [pc, #92]	; (800305c <HAL_RCC_ClockConfig+0x358>)
 8003000:	4313      	orrs	r3, r2
 8003002:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8003004:	f000 f834 	bl	8003070 <HAL_RCC_GetSysClockFreq>
 8003008:	4602      	mov	r2, r0
 800300a:	4b14      	ldr	r3, [pc, #80]	; (800305c <HAL_RCC_ClockConfig+0x358>)
 800300c:	699b      	ldr	r3, [r3, #24]
 800300e:	0a1b      	lsrs	r3, r3, #8
 8003010:	f003 030f 	and.w	r3, r3, #15
 8003014:	4912      	ldr	r1, [pc, #72]	; (8003060 <HAL_RCC_ClockConfig+0x35c>)
 8003016:	5ccb      	ldrb	r3, [r1, r3]
 8003018:	f003 031f 	and.w	r3, r3, #31
 800301c:	fa22 f303 	lsr.w	r3, r2, r3
 8003020:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8003022:	4b0e      	ldr	r3, [pc, #56]	; (800305c <HAL_RCC_ClockConfig+0x358>)
 8003024:	699b      	ldr	r3, [r3, #24]
 8003026:	f003 030f 	and.w	r3, r3, #15
 800302a:	4a0d      	ldr	r2, [pc, #52]	; (8003060 <HAL_RCC_ClockConfig+0x35c>)
 800302c:	5cd3      	ldrb	r3, [r2, r3]
 800302e:	f003 031f 	and.w	r3, r3, #31
 8003032:	693a      	ldr	r2, [r7, #16]
 8003034:	fa22 f303 	lsr.w	r3, r2, r3
 8003038:	4a0a      	ldr	r2, [pc, #40]	; (8003064 <HAL_RCC_ClockConfig+0x360>)
 800303a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800303c:	4a0a      	ldr	r2, [pc, #40]	; (8003068 <HAL_RCC_ClockConfig+0x364>)
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8003042:	4b0a      	ldr	r3, [pc, #40]	; (800306c <HAL_RCC_ClockConfig+0x368>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4618      	mov	r0, r3
 8003048:	f7fe f966 	bl	8001318 <HAL_InitTick>
 800304c:	4603      	mov	r3, r0
 800304e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003050:	7bfb      	ldrb	r3, [r7, #15]
}
 8003052:	4618      	mov	r0, r3
 8003054:	3718      	adds	r7, #24
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}
 800305a:	bf00      	nop
 800305c:	58024400 	.word	0x58024400
 8003060:	08006f1c 	.word	0x08006f1c
 8003064:	24000008 	.word	0x24000008
 8003068:	24000004 	.word	0x24000004
 800306c:	2400000c 	.word	0x2400000c

08003070 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003070:	b480      	push	{r7}
 8003072:	b089      	sub	sp, #36	; 0x24
 8003074:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003076:	4bb3      	ldr	r3, [pc, #716]	; (8003344 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003078:	691b      	ldr	r3, [r3, #16]
 800307a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800307e:	2b18      	cmp	r3, #24
 8003080:	f200 8155 	bhi.w	800332e <HAL_RCC_GetSysClockFreq+0x2be>
 8003084:	a201      	add	r2, pc, #4	; (adr r2, 800308c <HAL_RCC_GetSysClockFreq+0x1c>)
 8003086:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800308a:	bf00      	nop
 800308c:	080030f1 	.word	0x080030f1
 8003090:	0800332f 	.word	0x0800332f
 8003094:	0800332f 	.word	0x0800332f
 8003098:	0800332f 	.word	0x0800332f
 800309c:	0800332f 	.word	0x0800332f
 80030a0:	0800332f 	.word	0x0800332f
 80030a4:	0800332f 	.word	0x0800332f
 80030a8:	0800332f 	.word	0x0800332f
 80030ac:	08003117 	.word	0x08003117
 80030b0:	0800332f 	.word	0x0800332f
 80030b4:	0800332f 	.word	0x0800332f
 80030b8:	0800332f 	.word	0x0800332f
 80030bc:	0800332f 	.word	0x0800332f
 80030c0:	0800332f 	.word	0x0800332f
 80030c4:	0800332f 	.word	0x0800332f
 80030c8:	0800332f 	.word	0x0800332f
 80030cc:	0800311d 	.word	0x0800311d
 80030d0:	0800332f 	.word	0x0800332f
 80030d4:	0800332f 	.word	0x0800332f
 80030d8:	0800332f 	.word	0x0800332f
 80030dc:	0800332f 	.word	0x0800332f
 80030e0:	0800332f 	.word	0x0800332f
 80030e4:	0800332f 	.word	0x0800332f
 80030e8:	0800332f 	.word	0x0800332f
 80030ec:	08003123 	.word	0x08003123
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80030f0:	4b94      	ldr	r3, [pc, #592]	; (8003344 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f003 0320 	and.w	r3, r3, #32
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d009      	beq.n	8003110 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80030fc:	4b91      	ldr	r3, [pc, #580]	; (8003344 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	08db      	lsrs	r3, r3, #3
 8003102:	f003 0303 	and.w	r3, r3, #3
 8003106:	4a90      	ldr	r2, [pc, #576]	; (8003348 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003108:	fa22 f303 	lsr.w	r3, r2, r3
 800310c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800310e:	e111      	b.n	8003334 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003110:	4b8d      	ldr	r3, [pc, #564]	; (8003348 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003112:	61bb      	str	r3, [r7, #24]
    break;
 8003114:	e10e      	b.n	8003334 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8003116:	4b8d      	ldr	r3, [pc, #564]	; (800334c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003118:	61bb      	str	r3, [r7, #24]
    break;
 800311a:	e10b      	b.n	8003334 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800311c:	4b8c      	ldr	r3, [pc, #560]	; (8003350 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800311e:	61bb      	str	r3, [r7, #24]
    break;
 8003120:	e108      	b.n	8003334 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003122:	4b88      	ldr	r3, [pc, #544]	; (8003344 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003124:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003126:	f003 0303 	and.w	r3, r3, #3
 800312a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800312c:	4b85      	ldr	r3, [pc, #532]	; (8003344 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800312e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003130:	091b      	lsrs	r3, r3, #4
 8003132:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003136:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003138:	4b82      	ldr	r3, [pc, #520]	; (8003344 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800313a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800313c:	f003 0301 	and.w	r3, r3, #1
 8003140:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003142:	4b80      	ldr	r3, [pc, #512]	; (8003344 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003144:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003146:	08db      	lsrs	r3, r3, #3
 8003148:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800314c:	68fa      	ldr	r2, [r7, #12]
 800314e:	fb02 f303 	mul.w	r3, r2, r3
 8003152:	ee07 3a90 	vmov	s15, r3
 8003156:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800315a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	2b00      	cmp	r3, #0
 8003162:	f000 80e1 	beq.w	8003328 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	2b02      	cmp	r3, #2
 800316a:	f000 8083 	beq.w	8003274 <HAL_RCC_GetSysClockFreq+0x204>
 800316e:	697b      	ldr	r3, [r7, #20]
 8003170:	2b02      	cmp	r3, #2
 8003172:	f200 80a1 	bhi.w	80032b8 <HAL_RCC_GetSysClockFreq+0x248>
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d003      	beq.n	8003184 <HAL_RCC_GetSysClockFreq+0x114>
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	2b01      	cmp	r3, #1
 8003180:	d056      	beq.n	8003230 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003182:	e099      	b.n	80032b8 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003184:	4b6f      	ldr	r3, [pc, #444]	; (8003344 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f003 0320 	and.w	r3, r3, #32
 800318c:	2b00      	cmp	r3, #0
 800318e:	d02d      	beq.n	80031ec <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003190:	4b6c      	ldr	r3, [pc, #432]	; (8003344 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	08db      	lsrs	r3, r3, #3
 8003196:	f003 0303 	and.w	r3, r3, #3
 800319a:	4a6b      	ldr	r2, [pc, #428]	; (8003348 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800319c:	fa22 f303 	lsr.w	r3, r2, r3
 80031a0:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	ee07 3a90 	vmov	s15, r3
 80031a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80031ac:	693b      	ldr	r3, [r7, #16]
 80031ae:	ee07 3a90 	vmov	s15, r3
 80031b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80031ba:	4b62      	ldr	r3, [pc, #392]	; (8003344 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031c2:	ee07 3a90 	vmov	s15, r3
 80031c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80031ca:	ed97 6a02 	vldr	s12, [r7, #8]
 80031ce:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003354 <HAL_RCC_GetSysClockFreq+0x2e4>
 80031d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80031d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80031da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80031de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80031e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031e6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80031ea:	e087      	b.n	80032fc <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80031ec:	693b      	ldr	r3, [r7, #16]
 80031ee:	ee07 3a90 	vmov	s15, r3
 80031f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031f6:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003358 <HAL_RCC_GetSysClockFreq+0x2e8>
 80031fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80031fe:	4b51      	ldr	r3, [pc, #324]	; (8003344 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003202:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003206:	ee07 3a90 	vmov	s15, r3
 800320a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800320e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003212:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003354 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003216:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800321a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800321e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003222:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003226:	ee67 7a27 	vmul.f32	s15, s14, s15
 800322a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800322e:	e065      	b.n	80032fc <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003230:	693b      	ldr	r3, [r7, #16]
 8003232:	ee07 3a90 	vmov	s15, r3
 8003236:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800323a:	eddf 6a48 	vldr	s13, [pc, #288]	; 800335c <HAL_RCC_GetSysClockFreq+0x2ec>
 800323e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003242:	4b40      	ldr	r3, [pc, #256]	; (8003344 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003246:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800324a:	ee07 3a90 	vmov	s15, r3
 800324e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003252:	ed97 6a02 	vldr	s12, [r7, #8]
 8003256:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003354 <HAL_RCC_GetSysClockFreq+0x2e4>
 800325a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800325e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003262:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003266:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800326a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800326e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003272:	e043      	b.n	80032fc <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	ee07 3a90 	vmov	s15, r3
 800327a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800327e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003360 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003282:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003286:	4b2f      	ldr	r3, [pc, #188]	; (8003344 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800328a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800328e:	ee07 3a90 	vmov	s15, r3
 8003292:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003296:	ed97 6a02 	vldr	s12, [r7, #8]
 800329a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003354 <HAL_RCC_GetSysClockFreq+0x2e4>
 800329e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80032a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80032a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80032aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80032ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80032b6:	e021      	b.n	80032fc <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80032b8:	693b      	ldr	r3, [r7, #16]
 80032ba:	ee07 3a90 	vmov	s15, r3
 80032be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032c2:	eddf 6a26 	vldr	s13, [pc, #152]	; 800335c <HAL_RCC_GetSysClockFreq+0x2ec>
 80032c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80032ca:	4b1e      	ldr	r3, [pc, #120]	; (8003344 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032d2:	ee07 3a90 	vmov	s15, r3
 80032d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80032da:	ed97 6a02 	vldr	s12, [r7, #8]
 80032de:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003354 <HAL_RCC_GetSysClockFreq+0x2e4>
 80032e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80032e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80032ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80032ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80032f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80032fa:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80032fc:	4b11      	ldr	r3, [pc, #68]	; (8003344 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003300:	0a5b      	lsrs	r3, r3, #9
 8003302:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003306:	3301      	adds	r3, #1
 8003308:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	ee07 3a90 	vmov	s15, r3
 8003310:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003314:	edd7 6a07 	vldr	s13, [r7, #28]
 8003318:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800331c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003320:	ee17 3a90 	vmov	r3, s15
 8003324:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8003326:	e005      	b.n	8003334 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8003328:	2300      	movs	r3, #0
 800332a:	61bb      	str	r3, [r7, #24]
    break;
 800332c:	e002      	b.n	8003334 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800332e:	4b07      	ldr	r3, [pc, #28]	; (800334c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003330:	61bb      	str	r3, [r7, #24]
    break;
 8003332:	bf00      	nop
  }

  return sysclockfreq;
 8003334:	69bb      	ldr	r3, [r7, #24]
}
 8003336:	4618      	mov	r0, r3
 8003338:	3724      	adds	r7, #36	; 0x24
 800333a:	46bd      	mov	sp, r7
 800333c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003340:	4770      	bx	lr
 8003342:	bf00      	nop
 8003344:	58024400 	.word	0x58024400
 8003348:	03d09000 	.word	0x03d09000
 800334c:	003d0900 	.word	0x003d0900
 8003350:	016e3600 	.word	0x016e3600
 8003354:	46000000 	.word	0x46000000
 8003358:	4c742400 	.word	0x4c742400
 800335c:	4a742400 	.word	0x4a742400
 8003360:	4bb71b00 	.word	0x4bb71b00

08003364 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b082      	sub	sp, #8
 8003368:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 800336a:	f7ff fe81 	bl	8003070 <HAL_RCC_GetSysClockFreq>
 800336e:	4602      	mov	r2, r0
 8003370:	4b10      	ldr	r3, [pc, #64]	; (80033b4 <HAL_RCC_GetHCLKFreq+0x50>)
 8003372:	699b      	ldr	r3, [r3, #24]
 8003374:	0a1b      	lsrs	r3, r3, #8
 8003376:	f003 030f 	and.w	r3, r3, #15
 800337a:	490f      	ldr	r1, [pc, #60]	; (80033b8 <HAL_RCC_GetHCLKFreq+0x54>)
 800337c:	5ccb      	ldrb	r3, [r1, r3]
 800337e:	f003 031f 	and.w	r3, r3, #31
 8003382:	fa22 f303 	lsr.w	r3, r2, r3
 8003386:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8003388:	4b0a      	ldr	r3, [pc, #40]	; (80033b4 <HAL_RCC_GetHCLKFreq+0x50>)
 800338a:	699b      	ldr	r3, [r3, #24]
 800338c:	f003 030f 	and.w	r3, r3, #15
 8003390:	4a09      	ldr	r2, [pc, #36]	; (80033b8 <HAL_RCC_GetHCLKFreq+0x54>)
 8003392:	5cd3      	ldrb	r3, [r2, r3]
 8003394:	f003 031f 	and.w	r3, r3, #31
 8003398:	687a      	ldr	r2, [r7, #4]
 800339a:	fa22 f303 	lsr.w	r3, r2, r3
 800339e:	4a07      	ldr	r2, [pc, #28]	; (80033bc <HAL_RCC_GetHCLKFreq+0x58>)
 80033a0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80033a2:	4a07      	ldr	r2, [pc, #28]	; (80033c0 <HAL_RCC_GetHCLKFreq+0x5c>)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80033a8:	4b04      	ldr	r3, [pc, #16]	; (80033bc <HAL_RCC_GetHCLKFreq+0x58>)
 80033aa:	681b      	ldr	r3, [r3, #0]
}
 80033ac:	4618      	mov	r0, r3
 80033ae:	3708      	adds	r7, #8
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bd80      	pop	{r7, pc}
 80033b4:	58024400 	.word	0x58024400
 80033b8:	08006f1c 	.word	0x08006f1c
 80033bc:	24000008 	.word	0x24000008
 80033c0:	24000004 	.word	0x24000004

080033c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 80033c8:	f7ff ffcc 	bl	8003364 <HAL_RCC_GetHCLKFreq>
 80033cc:	4602      	mov	r2, r0
 80033ce:	4b06      	ldr	r3, [pc, #24]	; (80033e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80033d0:	69db      	ldr	r3, [r3, #28]
 80033d2:	091b      	lsrs	r3, r3, #4
 80033d4:	f003 0307 	and.w	r3, r3, #7
 80033d8:	4904      	ldr	r1, [pc, #16]	; (80033ec <HAL_RCC_GetPCLK1Freq+0x28>)
 80033da:	5ccb      	ldrb	r3, [r1, r3]
 80033dc:	f003 031f 	and.w	r3, r3, #31
 80033e0:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80033e4:	4618      	mov	r0, r3
 80033e6:	bd80      	pop	{r7, pc}
 80033e8:	58024400 	.word	0x58024400
 80033ec:	08006f1c 	.word	0x08006f1c

080033f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 80033f4:	f7ff ffb6 	bl	8003364 <HAL_RCC_GetHCLKFreq>
 80033f8:	4602      	mov	r2, r0
 80033fa:	4b06      	ldr	r3, [pc, #24]	; (8003414 <HAL_RCC_GetPCLK2Freq+0x24>)
 80033fc:	69db      	ldr	r3, [r3, #28]
 80033fe:	0a1b      	lsrs	r3, r3, #8
 8003400:	f003 0307 	and.w	r3, r3, #7
 8003404:	4904      	ldr	r1, [pc, #16]	; (8003418 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003406:	5ccb      	ldrb	r3, [r1, r3]
 8003408:	f003 031f 	and.w	r3, r3, #31
 800340c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8003410:	4618      	mov	r0, r3
 8003412:	bd80      	pop	{r7, pc}
 8003414:	58024400 	.word	0x58024400
 8003418:	08006f1c 	.word	0x08006f1c

0800341c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b086      	sub	sp, #24
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003424:	2300      	movs	r3, #0
 8003426:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003428:	2300      	movs	r3, #0
 800342a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003434:	2b00      	cmp	r3, #0
 8003436:	d03f      	beq.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800343c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003440:	d02a      	beq.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003442:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003446:	d824      	bhi.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003448:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800344c:	d018      	beq.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800344e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003452:	d81e      	bhi.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003454:	2b00      	cmp	r3, #0
 8003456:	d003      	beq.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003458:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800345c:	d007      	beq.n	800346e <HAL_RCCEx_PeriphCLKConfig+0x52>
 800345e:	e018      	b.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003460:	4ba6      	ldr	r3, [pc, #664]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003464:	4aa5      	ldr	r2, [pc, #660]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003466:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800346a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800346c:	e015      	b.n	800349a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	3304      	adds	r3, #4
 8003472:	2102      	movs	r1, #2
 8003474:	4618      	mov	r0, r3
 8003476:	f001 f99b 	bl	80047b0 <RCCEx_PLL2_Config>
 800347a:	4603      	mov	r3, r0
 800347c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800347e:	e00c      	b.n	800349a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	3324      	adds	r3, #36	; 0x24
 8003484:	2102      	movs	r1, #2
 8003486:	4618      	mov	r0, r3
 8003488:	f001 fa44 	bl	8004914 <RCCEx_PLL3_Config>
 800348c:	4603      	mov	r3, r0
 800348e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003490:	e003      	b.n	800349a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	75fb      	strb	r3, [r7, #23]
      break;
 8003496:	e000      	b.n	800349a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003498:	bf00      	nop
    }

    if(ret == HAL_OK)
 800349a:	7dfb      	ldrb	r3, [r7, #23]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d109      	bne.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80034a0:	4b96      	ldr	r3, [pc, #600]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80034a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034a4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80034ac:	4993      	ldr	r1, [pc, #588]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80034ae:	4313      	orrs	r3, r2
 80034b0:	650b      	str	r3, [r1, #80]	; 0x50
 80034b2:	e001      	b.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034b4:	7dfb      	ldrb	r3, [r7, #23]
 80034b6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d03d      	beq.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034c8:	2b04      	cmp	r3, #4
 80034ca:	d826      	bhi.n	800351a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80034cc:	a201      	add	r2, pc, #4	; (adr r2, 80034d4 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80034ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034d2:	bf00      	nop
 80034d4:	080034e9 	.word	0x080034e9
 80034d8:	080034f7 	.word	0x080034f7
 80034dc:	08003509 	.word	0x08003509
 80034e0:	08003521 	.word	0x08003521
 80034e4:	08003521 	.word	0x08003521
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80034e8:	4b84      	ldr	r3, [pc, #528]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80034ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ec:	4a83      	ldr	r2, [pc, #524]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80034ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034f2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80034f4:	e015      	b.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	3304      	adds	r3, #4
 80034fa:	2100      	movs	r1, #0
 80034fc:	4618      	mov	r0, r3
 80034fe:	f001 f957 	bl	80047b0 <RCCEx_PLL2_Config>
 8003502:	4603      	mov	r3, r0
 8003504:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003506:	e00c      	b.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	3324      	adds	r3, #36	; 0x24
 800350c:	2100      	movs	r1, #0
 800350e:	4618      	mov	r0, r3
 8003510:	f001 fa00 	bl	8004914 <RCCEx_PLL3_Config>
 8003514:	4603      	mov	r3, r0
 8003516:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003518:	e003      	b.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	75fb      	strb	r3, [r7, #23]
      break;
 800351e:	e000      	b.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8003520:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003522:	7dfb      	ldrb	r3, [r7, #23]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d109      	bne.n	800353c <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003528:	4b74      	ldr	r3, [pc, #464]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800352a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800352c:	f023 0207 	bic.w	r2, r3, #7
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003534:	4971      	ldr	r1, [pc, #452]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003536:	4313      	orrs	r3, r2
 8003538:	650b      	str	r3, [r1, #80]	; 0x50
 800353a:	e001      	b.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800353c:	7dfb      	ldrb	r3, [r7, #23]
 800353e:	75bb      	strb	r3, [r7, #22]

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003548:	2b00      	cmp	r3, #0
 800354a:	d04a      	beq.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    switch(PeriphClkInit->Sai2AClockSelection)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003550:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8003554:	d031      	beq.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0x19e>
 8003556:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800355a:	d82b      	bhi.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x198>
 800355c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003560:	d02d      	beq.n	80035be <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 8003562:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003566:	d825      	bhi.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003568:	2bc0      	cmp	r3, #192	; 0xc0
 800356a:	d02a      	beq.n	80035c2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800356c:	2bc0      	cmp	r3, #192	; 0xc0
 800356e:	d821      	bhi.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003570:	2b80      	cmp	r3, #128	; 0x80
 8003572:	d016      	beq.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8003574:	2b80      	cmp	r3, #128	; 0x80
 8003576:	d81d      	bhi.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003578:	2b00      	cmp	r3, #0
 800357a:	d002      	beq.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x166>
 800357c:	2b40      	cmp	r3, #64	; 0x40
 800357e:	d007      	beq.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x174>
 8003580:	e018      	b.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
    case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
      /* Enable SAI2A Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003582:	4b5e      	ldr	r3, [pc, #376]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003586:	4a5d      	ldr	r2, [pc, #372]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003588:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800358c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 800358e:	e019      	b.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	3304      	adds	r3, #4
 8003594:	2100      	movs	r1, #0
 8003596:	4618      	mov	r0, r3
 8003598:	f001 f90a 	bl	80047b0 <RCCEx_PLL2_Config>
 800359c:	4603      	mov	r3, r0
 800359e:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 80035a0:	e010      	b.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	3324      	adds	r3, #36	; 0x24
 80035a6:	2100      	movs	r1, #0
 80035a8:	4618      	mov	r0, r3
 80035aa:	f001 f9b3 	bl	8004914 <RCCEx_PLL3_Config>
 80035ae:	4603      	mov	r3, r0
 80035b0:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 80035b2:	e007      	b.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      /* SPDIF clock is used as source of SAI2A clock */
      /* SAI2A clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80035b4:	2301      	movs	r3, #1
 80035b6:	75fb      	strb	r3, [r7, #23]
      break;
 80035b8:	e004      	b.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 80035ba:	bf00      	nop
 80035bc:	e002      	b.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 80035be:	bf00      	nop
 80035c0:	e000      	b.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 80035c2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80035c4:	7dfb      	ldrb	r3, [r7, #23]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d109      	bne.n	80035de <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 80035ca:	4b4c      	ldr	r3, [pc, #304]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80035cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035ce:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035d6:	4949      	ldr	r1, [pc, #292]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80035d8:	4313      	orrs	r3, r2
 80035da:	650b      	str	r3, [r1, #80]	; 0x50
 80035dc:	e001      	b.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035de:	7dfb      	ldrb	r3, [r7, #23]
 80035e0:	75bb      	strb	r3, [r7, #22]
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d04f      	beq.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    switch(PeriphClkInit->Sai2BClockSelection)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035f2:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80035f6:	d036      	beq.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 80035f8:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80035fc:	d830      	bhi.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x244>
 80035fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003602:	d032      	beq.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x24e>
 8003604:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003608:	d82a      	bhi.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x244>
 800360a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800360e:	d02e      	beq.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x252>
 8003610:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003614:	d824      	bhi.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8003616:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800361a:	d018      	beq.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x232>
 800361c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003620:	d81e      	bhi.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8003622:	2b00      	cmp	r3, #0
 8003624:	d003      	beq.n	800362e <HAL_RCCEx_PeriphCLKConfig+0x212>
 8003626:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800362a:	d007      	beq.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x220>
 800362c:	e018      	b.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x244>
    {
    case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800362e:	4b33      	ldr	r3, [pc, #204]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003630:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003632:	4a32      	ldr	r2, [pc, #200]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003634:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003638:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 800363a:	e019      	b.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	3304      	adds	r3, #4
 8003640:	2100      	movs	r1, #0
 8003642:	4618      	mov	r0, r3
 8003644:	f001 f8b4 	bl	80047b0 <RCCEx_PLL2_Config>
 8003648:	4603      	mov	r3, r0
 800364a:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 800364c:	e010      	b.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	3324      	adds	r3, #36	; 0x24
 8003652:	2100      	movs	r1, #0
 8003654:	4618      	mov	r0, r3
 8003656:	f001 f95d 	bl	8004914 <RCCEx_PLL3_Config>
 800365a:	4603      	mov	r3, r0
 800365c:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 800365e:	e007      	b.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x254>
      /* SPDIF clock is used as source of SAI2B clock */
      /* SAI2B clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003660:	2301      	movs	r3, #1
 8003662:	75fb      	strb	r3, [r7, #23]
      break;
 8003664:	e004      	b.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 8003666:	bf00      	nop
 8003668:	e002      	b.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 800366a:	bf00      	nop
 800366c:	e000      	b.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 800366e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003670:	7dfb      	ldrb	r3, [r7, #23]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d109      	bne.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x26e>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8003676:	4b21      	ldr	r3, [pc, #132]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003678:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800367a:	f423 6260 	bic.w	r2, r3, #3584	; 0xe00
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003682:	491e      	ldr	r1, [pc, #120]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003684:	4313      	orrs	r3, r2
 8003686:	650b      	str	r3, [r1, #80]	; 0x50
 8003688:	e001      	b.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x272>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800368a:	7dfb      	ldrb	r3, [r7, #23]
 800368c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003696:	2b00      	cmp	r3, #0
 8003698:	d034      	beq.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    switch(PeriphClkInit->OspiClockSelection)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800369e:	2b30      	cmp	r3, #48	; 0x30
 80036a0:	d01c      	beq.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 80036a2:	2b30      	cmp	r3, #48	; 0x30
 80036a4:	d817      	bhi.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 80036a6:	2b20      	cmp	r3, #32
 80036a8:	d00c      	beq.n	80036c4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80036aa:	2b20      	cmp	r3, #32
 80036ac:	d813      	bhi.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d016      	beq.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
 80036b2:	2b10      	cmp	r3, #16
 80036b4:	d10f      	bne.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036b6:	4b11      	ldr	r3, [pc, #68]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80036b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ba:	4a10      	ldr	r2, [pc, #64]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80036bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036c0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 80036c2:	e00e      	b.n	80036e2 <HAL_RCCEx_PeriphCLKConfig+0x2c6>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	3304      	adds	r3, #4
 80036c8:	2102      	movs	r1, #2
 80036ca:	4618      	mov	r0, r3
 80036cc:	f001 f870 	bl	80047b0 <RCCEx_PLL2_Config>
 80036d0:	4603      	mov	r3, r0
 80036d2:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 80036d4:	e005      	b.n	80036e2 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	75fb      	strb	r3, [r7, #23]
      break;
 80036da:	e002      	b.n	80036e2 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
      break;
 80036dc:	bf00      	nop
 80036de:	e000      	b.n	80036e2 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
      break;
 80036e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80036e2:	7dfb      	ldrb	r3, [r7, #23]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d10b      	bne.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80036e8:	4b04      	ldr	r3, [pc, #16]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80036ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036ec:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036f4:	4901      	ldr	r1, [pc, #4]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80036f6:	4313      	orrs	r3, r2
 80036f8:	64cb      	str	r3, [r1, #76]	; 0x4c
 80036fa:	e003      	b.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 80036fc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003700:	7dfb      	ldrb	r3, [r7, #23]
 8003702:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800370c:	2b00      	cmp	r3, #0
 800370e:	d047      	beq.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x384>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003714:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003718:	d030      	beq.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x360>
 800371a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800371e:	d82a      	bhi.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8003720:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003724:	d02c      	beq.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0x364>
 8003726:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800372a:	d824      	bhi.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 800372c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003730:	d018      	beq.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8003732:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003736:	d81e      	bhi.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8003738:	2b00      	cmp	r3, #0
 800373a:	d003      	beq.n	8003744 <HAL_RCCEx_PeriphCLKConfig+0x328>
 800373c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003740:	d007      	beq.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0x336>
 8003742:	e018      	b.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003744:	4bb0      	ldr	r3, [pc, #704]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003748:	4aaf      	ldr	r2, [pc, #700]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800374a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800374e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003750:	e017      	b.n	8003782 <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	3304      	adds	r3, #4
 8003756:	2100      	movs	r1, #0
 8003758:	4618      	mov	r0, r3
 800375a:	f001 f829 	bl	80047b0 <RCCEx_PLL2_Config>
 800375e:	4603      	mov	r3, r0
 8003760:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003762:	e00e      	b.n	8003782 <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	3324      	adds	r3, #36	; 0x24
 8003768:	2100      	movs	r1, #0
 800376a:	4618      	mov	r0, r3
 800376c:	f001 f8d2 	bl	8004914 <RCCEx_PLL3_Config>
 8003770:	4603      	mov	r3, r0
 8003772:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003774:	e005      	b.n	8003782 <HAL_RCCEx_PeriphCLKConfig+0x366>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	75fb      	strb	r3, [r7, #23]
      break;
 800377a:	e002      	b.n	8003782 <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 800377c:	bf00      	nop
 800377e:	e000      	b.n	8003782 <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 8003780:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003782:	7dfb      	ldrb	r3, [r7, #23]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d109      	bne.n	800379c <HAL_RCCEx_PeriphCLKConfig+0x380>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003788:	4b9f      	ldr	r3, [pc, #636]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800378a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800378c:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003794:	499c      	ldr	r1, [pc, #624]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003796:	4313      	orrs	r3, r2
 8003798:	650b      	str	r3, [r1, #80]	; 0x50
 800379a:	e001      	b.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x384>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800379c:	7dfb      	ldrb	r3, [r7, #23]
 800379e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d049      	beq.n	8003840 <HAL_RCCEx_PeriphCLKConfig+0x424>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80037b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80037b4:	d02e      	beq.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80037b6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80037ba:	d828      	bhi.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 80037bc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80037c0:	d02a      	beq.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 80037c2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80037c6:	d822      	bhi.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 80037c8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80037cc:	d026      	beq.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x400>
 80037ce:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80037d2:	d81c      	bhi.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 80037d4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80037d8:	d010      	beq.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80037da:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80037de:	d816      	bhi.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d01d      	beq.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0x404>
 80037e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037e8:	d111      	bne.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	3304      	adds	r3, #4
 80037ee:	2101      	movs	r1, #1
 80037f0:	4618      	mov	r0, r3
 80037f2:	f000 ffdd 	bl	80047b0 <RCCEx_PLL2_Config>
 80037f6:	4603      	mov	r3, r0
 80037f8:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80037fa:	e012      	b.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0x406>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	3324      	adds	r3, #36	; 0x24
 8003800:	2101      	movs	r1, #1
 8003802:	4618      	mov	r0, r3
 8003804:	f001 f886 	bl	8004914 <RCCEx_PLL3_Config>
 8003808:	4603      	mov	r3, r0
 800380a:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800380c:	e009      	b.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	75fb      	strb	r3, [r7, #23]
      break;
 8003812:	e006      	b.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8003814:	bf00      	nop
 8003816:	e004      	b.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8003818:	bf00      	nop
 800381a:	e002      	b.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 800381c:	bf00      	nop
 800381e:	e000      	b.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8003820:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003822:	7dfb      	ldrb	r3, [r7, #23]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d109      	bne.n	800383c <HAL_RCCEx_PeriphCLKConfig+0x420>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003828:	4b77      	ldr	r3, [pc, #476]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800382a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800382c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003834:	4974      	ldr	r1, [pc, #464]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003836:	4313      	orrs	r3, r2
 8003838:	650b      	str	r3, [r1, #80]	; 0x50
 800383a:	e001      	b.n	8003840 <HAL_RCCEx_PeriphCLKConfig+0x424>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800383c:	7dfb      	ldrb	r3, [r7, #23]
 800383e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003848:	2b00      	cmp	r3, #0
 800384a:	d053      	beq.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003852:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8003856:	d034      	beq.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8003858:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 800385c:	d82e      	bhi.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 800385e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003862:	d030      	beq.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 8003864:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003868:	d828      	bhi.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 800386a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800386e:	d02c      	beq.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8003870:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003874:	d822      	bhi.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8003876:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800387a:	d028      	beq.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 800387c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003880:	d81c      	bhi.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8003882:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003886:	d010      	beq.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x48e>
 8003888:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800388c:	d816      	bhi.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 800388e:	2b00      	cmp	r3, #0
 8003890:	d01f      	beq.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8003892:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003896:	d111      	bne.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x4a0>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	3304      	adds	r3, #4
 800389c:	2101      	movs	r1, #1
 800389e:	4618      	mov	r0, r3
 80038a0:	f000 ff86 	bl	80047b0 <RCCEx_PLL2_Config>
 80038a4:	4603      	mov	r3, r0
 80038a6:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80038a8:	e014      	b.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	3324      	adds	r3, #36	; 0x24
 80038ae:	2101      	movs	r1, #1
 80038b0:	4618      	mov	r0, r3
 80038b2:	f001 f82f 	bl	8004914 <RCCEx_PLL3_Config>
 80038b6:	4603      	mov	r3, r0
 80038b8:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80038ba:	e00b      	b.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80038bc:	2301      	movs	r3, #1
 80038be:	75fb      	strb	r3, [r7, #23]
      break;
 80038c0:	e008      	b.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 80038c2:	bf00      	nop
 80038c4:	e006      	b.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 80038c6:	bf00      	nop
 80038c8:	e004      	b.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 80038ca:	bf00      	nop
 80038cc:	e002      	b.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 80038ce:	bf00      	nop
 80038d0:	e000      	b.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 80038d2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80038d4:	7dfb      	ldrb	r3, [r7, #23]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d10a      	bne.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80038da:	4b4b      	ldr	r3, [pc, #300]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80038dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038de:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80038e8:	4947      	ldr	r1, [pc, #284]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80038ea:	4313      	orrs	r3, r2
 80038ec:	658b      	str	r3, [r1, #88]	; 0x58
 80038ee:	e001      	b.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038f0:	7dfb      	ldrb	r3, [r7, #23]
 80038f2:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d02f      	beq.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x544>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003904:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003908:	d00e      	beq.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 800390a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800390e:	d814      	bhi.n	800393a <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8003910:	2b00      	cmp	r3, #0
 8003912:	d015      	beq.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8003914:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003918:	d10f      	bne.n	800393a <HAL_RCCEx_PeriphCLKConfig+0x51e>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800391a:	4b3b      	ldr	r3, [pc, #236]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800391c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800391e:	4a3a      	ldr	r2, [pc, #232]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003920:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003924:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003926:	e00c      	b.n	8003942 <HAL_RCCEx_PeriphCLKConfig+0x526>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	3304      	adds	r3, #4
 800392c:	2101      	movs	r1, #1
 800392e:	4618      	mov	r0, r3
 8003930:	f000 ff3e 	bl	80047b0 <RCCEx_PLL2_Config>
 8003934:	4603      	mov	r3, r0
 8003936:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003938:	e003      	b.n	8003942 <HAL_RCCEx_PeriphCLKConfig+0x526>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	75fb      	strb	r3, [r7, #23]
      break;
 800393e:	e000      	b.n	8003942 <HAL_RCCEx_PeriphCLKConfig+0x526>
      break;
 8003940:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003942:	7dfb      	ldrb	r3, [r7, #23]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d109      	bne.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x540>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003948:	4b2f      	ldr	r3, [pc, #188]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800394a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800394c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003954:	492c      	ldr	r1, [pc, #176]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003956:	4313      	orrs	r3, r2
 8003958:	650b      	str	r3, [r1, #80]	; 0x50
 800395a:	e001      	b.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x544>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800395c:	7dfb      	ldrb	r3, [r7, #23]
 800395e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003968:	2b00      	cmp	r3, #0
 800396a:	d032      	beq.n	80039d2 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003970:	2b03      	cmp	r3, #3
 8003972:	d81b      	bhi.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x590>
 8003974:	a201      	add	r2, pc, #4	; (adr r2, 800397c <HAL_RCCEx_PeriphCLKConfig+0x560>)
 8003976:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800397a:	bf00      	nop
 800397c:	080039b3 	.word	0x080039b3
 8003980:	0800398d 	.word	0x0800398d
 8003984:	0800399b 	.word	0x0800399b
 8003988:	080039b3 	.word	0x080039b3
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800398c:	4b1e      	ldr	r3, [pc, #120]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800398e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003990:	4a1d      	ldr	r2, [pc, #116]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003992:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003996:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003998:	e00c      	b.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x598>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	3304      	adds	r3, #4
 800399e:	2102      	movs	r1, #2
 80039a0:	4618      	mov	r0, r3
 80039a2:	f000 ff05 	bl	80047b0 <RCCEx_PLL2_Config>
 80039a6:	4603      	mov	r3, r0
 80039a8:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80039aa:	e003      	b.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x598>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80039ac:	2301      	movs	r3, #1
 80039ae:	75fb      	strb	r3, [r7, #23]
      break;
 80039b0:	e000      	b.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x598>
      break;
 80039b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80039b4:	7dfb      	ldrb	r3, [r7, #23]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d109      	bne.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0x5b2>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80039ba:	4b13      	ldr	r3, [pc, #76]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80039bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039be:	f023 0203 	bic.w	r2, r3, #3
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039c6:	4910      	ldr	r1, [pc, #64]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80039c8:	4313      	orrs	r3, r2
 80039ca:	64cb      	str	r3, [r1, #76]	; 0x4c
 80039cc:	e001      	b.n	80039d2 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039ce:	7dfb      	ldrb	r3, [r7, #23]
 80039d0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039da:	2b00      	cmp	r3, #0
 80039dc:	f000 808a 	beq.w	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80039e0:	4b0a      	ldr	r3, [pc, #40]	; (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a09      	ldr	r2, [pc, #36]	; (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80039e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039ea:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80039ec:	f7fd fcde 	bl	80013ac <HAL_GetTick>
 80039f0:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80039f2:	e00d      	b.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039f4:	f7fd fcda 	bl	80013ac <HAL_GetTick>
 80039f8:	4602      	mov	r2, r0
 80039fa:	693b      	ldr	r3, [r7, #16]
 80039fc:	1ad3      	subs	r3, r2, r3
 80039fe:	2b64      	cmp	r3, #100	; 0x64
 8003a00:	d906      	bls.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      {
        ret = HAL_TIMEOUT;
 8003a02:	2303      	movs	r3, #3
 8003a04:	75fb      	strb	r3, [r7, #23]
        break;
 8003a06:	e009      	b.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x600>
 8003a08:	58024400 	.word	0x58024400
 8003a0c:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a10:	4bba      	ldr	r3, [pc, #744]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d0eb      	beq.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x5d8>
      }
    }

    if(ret == HAL_OK)
 8003a1c:	7dfb      	ldrb	r3, [r7, #23]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d166      	bne.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003a22:	4bb7      	ldr	r3, [pc, #732]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003a24:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003a2c:	4053      	eors	r3, r2
 8003a2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d013      	beq.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0x642>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003a36:	4bb2      	ldr	r3, [pc, #712]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003a38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a3e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003a40:	4baf      	ldr	r3, [pc, #700]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003a42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a44:	4aae      	ldr	r2, [pc, #696]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003a46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a4a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003a4c:	4bac      	ldr	r3, [pc, #688]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003a4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a50:	4aab      	ldr	r2, [pc, #684]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003a52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a56:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003a58:	4aa9      	ldr	r2, [pc, #676]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003a64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a68:	d115      	bne.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x67a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a6a:	f7fd fc9f 	bl	80013ac <HAL_GetTick>
 8003a6e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003a70:	e00b      	b.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a72:	f7fd fc9b 	bl	80013ac <HAL_GetTick>
 8003a76:	4602      	mov	r2, r0
 8003a78:	693b      	ldr	r3, [r7, #16]
 8003a7a:	1ad3      	subs	r3, r2, r3
 8003a7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d902      	bls.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x66e>
          {
            ret = HAL_TIMEOUT;
 8003a84:	2303      	movs	r3, #3
 8003a86:	75fb      	strb	r3, [r7, #23]
            break;
 8003a88:	e005      	b.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x67a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003a8a:	4b9d      	ldr	r3, [pc, #628]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003a8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a8e:	f003 0302 	and.w	r3, r3, #2
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d0ed      	beq.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if(ret == HAL_OK)
 8003a96:	7dfb      	ldrb	r3, [r7, #23]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d126      	bne.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0x6ce>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003aa2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003aa6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003aaa:	d10d      	bne.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x6ac>
 8003aac:	4b94      	ldr	r3, [pc, #592]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003aae:	691b      	ldr	r3, [r3, #16]
 8003ab0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003aba:	0919      	lsrs	r1, r3, #4
 8003abc:	4b91      	ldr	r3, [pc, #580]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8003abe:	400b      	ands	r3, r1
 8003ac0:	498f      	ldr	r1, [pc, #572]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	610b      	str	r3, [r1, #16]
 8003ac6:	e005      	b.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 8003ac8:	4b8d      	ldr	r3, [pc, #564]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003aca:	691b      	ldr	r3, [r3, #16]
 8003acc:	4a8c      	ldr	r2, [pc, #560]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003ace:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003ad2:	6113      	str	r3, [r2, #16]
 8003ad4:	4b8a      	ldr	r3, [pc, #552]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003ad6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003ade:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ae2:	4987      	ldr	r1, [pc, #540]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	670b      	str	r3, [r1, #112]	; 0x70
 8003ae8:	e004      	b.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003aea:	7dfb      	ldrb	r3, [r7, #23]
 8003aec:	75bb      	strb	r3, [r7, #22]
 8003aee:	e001      	b.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003af0:	7dfb      	ldrb	r3, [r7, #23]
 8003af2:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f003 0301 	and.w	r3, r3, #1
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d07f      	beq.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b06:	2b28      	cmp	r3, #40	; 0x28
 8003b08:	d866      	bhi.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 8003b0a:	a201      	add	r2, pc, #4	; (adr r2, 8003b10 <HAL_RCCEx_PeriphCLKConfig+0x6f4>)
 8003b0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b10:	08003bdf 	.word	0x08003bdf
 8003b14:	08003bd9 	.word	0x08003bd9
 8003b18:	08003bd9 	.word	0x08003bd9
 8003b1c:	08003bd9 	.word	0x08003bd9
 8003b20:	08003bd9 	.word	0x08003bd9
 8003b24:	08003bd9 	.word	0x08003bd9
 8003b28:	08003bd9 	.word	0x08003bd9
 8003b2c:	08003bd9 	.word	0x08003bd9
 8003b30:	08003bb5 	.word	0x08003bb5
 8003b34:	08003bd9 	.word	0x08003bd9
 8003b38:	08003bd9 	.word	0x08003bd9
 8003b3c:	08003bd9 	.word	0x08003bd9
 8003b40:	08003bd9 	.word	0x08003bd9
 8003b44:	08003bd9 	.word	0x08003bd9
 8003b48:	08003bd9 	.word	0x08003bd9
 8003b4c:	08003bd9 	.word	0x08003bd9
 8003b50:	08003bc7 	.word	0x08003bc7
 8003b54:	08003bd9 	.word	0x08003bd9
 8003b58:	08003bd9 	.word	0x08003bd9
 8003b5c:	08003bd9 	.word	0x08003bd9
 8003b60:	08003bd9 	.word	0x08003bd9
 8003b64:	08003bd9 	.word	0x08003bd9
 8003b68:	08003bd9 	.word	0x08003bd9
 8003b6c:	08003bd9 	.word	0x08003bd9
 8003b70:	08003bdf 	.word	0x08003bdf
 8003b74:	08003bd9 	.word	0x08003bd9
 8003b78:	08003bd9 	.word	0x08003bd9
 8003b7c:	08003bd9 	.word	0x08003bd9
 8003b80:	08003bd9 	.word	0x08003bd9
 8003b84:	08003bd9 	.word	0x08003bd9
 8003b88:	08003bd9 	.word	0x08003bd9
 8003b8c:	08003bd9 	.word	0x08003bd9
 8003b90:	08003bdf 	.word	0x08003bdf
 8003b94:	08003bd9 	.word	0x08003bd9
 8003b98:	08003bd9 	.word	0x08003bd9
 8003b9c:	08003bd9 	.word	0x08003bd9
 8003ba0:	08003bd9 	.word	0x08003bd9
 8003ba4:	08003bd9 	.word	0x08003bd9
 8003ba8:	08003bd9 	.word	0x08003bd9
 8003bac:	08003bd9 	.word	0x08003bd9
 8003bb0:	08003bdf 	.word	0x08003bdf
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	3304      	adds	r3, #4
 8003bb8:	2101      	movs	r1, #1
 8003bba:	4618      	mov	r0, r3
 8003bbc:	f000 fdf8 	bl	80047b0 <RCCEx_PLL2_Config>
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003bc4:	e00c      	b.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	3324      	adds	r3, #36	; 0x24
 8003bca:	2101      	movs	r1, #1
 8003bcc:	4618      	mov	r0, r3
 8003bce:	f000 fea1 	bl	8004914 <RCCEx_PLL3_Config>
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003bd6:	e003      	b.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	75fb      	strb	r3, [r7, #23]
      break;
 8003bdc:	e000      	b.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      break;
 8003bde:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003be0:	7dfb      	ldrb	r3, [r7, #23]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d10a      	bne.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0x7e0>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003be6:	4b46      	ldr	r3, [pc, #280]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003be8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bea:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003bf4:	4942      	ldr	r1, [pc, #264]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	654b      	str	r3, [r1, #84]	; 0x54
 8003bfa:	e001      	b.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bfc:	7dfb      	ldrb	r3, [r7, #23]
 8003bfe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f003 0302 	and.w	r3, r3, #2
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d038      	beq.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x862>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c10:	2b05      	cmp	r3, #5
 8003c12:	d821      	bhi.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8003c14:	a201      	add	r2, pc, #4	; (adr r2, 8003c1c <HAL_RCCEx_PeriphCLKConfig+0x800>)
 8003c16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c1a:	bf00      	nop
 8003c1c:	08003c5f 	.word	0x08003c5f
 8003c20:	08003c35 	.word	0x08003c35
 8003c24:	08003c47 	.word	0x08003c47
 8003c28:	08003c5f 	.word	0x08003c5f
 8003c2c:	08003c5f 	.word	0x08003c5f
 8003c30:	08003c5f 	.word	0x08003c5f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	3304      	adds	r3, #4
 8003c38:	2101      	movs	r1, #1
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	f000 fdb8 	bl	80047b0 <RCCEx_PLL2_Config>
 8003c40:	4603      	mov	r3, r0
 8003c42:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003c44:	e00c      	b.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x844>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	3324      	adds	r3, #36	; 0x24
 8003c4a:	2101      	movs	r1, #1
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	f000 fe61 	bl	8004914 <RCCEx_PLL3_Config>
 8003c52:	4603      	mov	r3, r0
 8003c54:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003c56:	e003      	b.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x844>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c58:	2301      	movs	r3, #1
 8003c5a:	75fb      	strb	r3, [r7, #23]
      break;
 8003c5c:	e000      	b.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x844>
      break;
 8003c5e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c60:	7dfb      	ldrb	r3, [r7, #23]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d109      	bne.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003c66:	4b26      	ldr	r3, [pc, #152]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003c68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c6a:	f023 0207 	bic.w	r2, r3, #7
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c72:	4923      	ldr	r1, [pc, #140]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003c74:	4313      	orrs	r3, r2
 8003c76:	654b      	str	r3, [r1, #84]	; 0x54
 8003c78:	e001      	b.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x862>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c7a:	7dfb      	ldrb	r3, [r7, #23]
 8003c7c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f003 0304 	and.w	r3, r3, #4
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d040      	beq.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x8f0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003c90:	2b05      	cmp	r3, #5
 8003c92:	d821      	bhi.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8003c94:	a201      	add	r2, pc, #4	; (adr r2, 8003c9c <HAL_RCCEx_PeriphCLKConfig+0x880>)
 8003c96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c9a:	bf00      	nop
 8003c9c:	08003cdf 	.word	0x08003cdf
 8003ca0:	08003cb5 	.word	0x08003cb5
 8003ca4:	08003cc7 	.word	0x08003cc7
 8003ca8:	08003cdf 	.word	0x08003cdf
 8003cac:	08003cdf 	.word	0x08003cdf
 8003cb0:	08003cdf 	.word	0x08003cdf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	3304      	adds	r3, #4
 8003cb8:	2101      	movs	r1, #1
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f000 fd78 	bl	80047b0 <RCCEx_PLL2_Config>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003cc4:	e00c      	b.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x8c4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	3324      	adds	r3, #36	; 0x24
 8003cca:	2101      	movs	r1, #1
 8003ccc:	4618      	mov	r0, r3
 8003cce:	f000 fe21 	bl	8004914 <RCCEx_PLL3_Config>
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003cd6:	e003      	b.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	75fb      	strb	r3, [r7, #23]
      break;
 8003cdc:	e000      	b.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      break;
 8003cde:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ce0:	7dfb      	ldrb	r3, [r7, #23]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d110      	bne.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003ce6:	4b06      	ldr	r3, [pc, #24]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003ce8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cea:	f023 0207 	bic.w	r2, r3, #7
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003cf4:	4902      	ldr	r1, [pc, #8]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	658b      	str	r3, [r1, #88]	; 0x58
 8003cfa:	e007      	b.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 8003cfc:	58024800 	.word	0x58024800
 8003d00:	58024400 	.word	0x58024400
 8003d04:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d08:	7dfb      	ldrb	r3, [r7, #23]
 8003d0a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f003 0320 	and.w	r3, r3, #32
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d04b      	beq.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0x994>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d1e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003d22:	d02e      	beq.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0x966>
 8003d24:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003d28:	d828      	bhi.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x960>
 8003d2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d2e:	d02a      	beq.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8003d30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d34:	d822      	bhi.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x960>
 8003d36:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003d3a:	d026      	beq.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8003d3c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003d40:	d81c      	bhi.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x960>
 8003d42:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d46:	d010      	beq.n	8003d6a <HAL_RCCEx_PeriphCLKConfig+0x94e>
 8003d48:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d4c:	d816      	bhi.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x960>
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d01d      	beq.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x972>
 8003d52:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003d56:	d111      	bne.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x960>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	3304      	adds	r3, #4
 8003d5c:	2100      	movs	r1, #0
 8003d5e:	4618      	mov	r0, r3
 8003d60:	f000 fd26 	bl	80047b0 <RCCEx_PLL2_Config>
 8003d64:	4603      	mov	r3, r0
 8003d66:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003d68:	e012      	b.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0x974>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	3324      	adds	r3, #36	; 0x24
 8003d6e:	2102      	movs	r1, #2
 8003d70:	4618      	mov	r0, r3
 8003d72:	f000 fdcf 	bl	8004914 <RCCEx_PLL3_Config>
 8003d76:	4603      	mov	r3, r0
 8003d78:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003d7a:	e009      	b.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0x974>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	75fb      	strb	r3, [r7, #23]
      break;
 8003d80:	e006      	b.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8003d82:	bf00      	nop
 8003d84:	e004      	b.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8003d86:	bf00      	nop
 8003d88:	e002      	b.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8003d8a:	bf00      	nop
 8003d8c:	e000      	b.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8003d8e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d90:	7dfb      	ldrb	r3, [r7, #23]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d10a      	bne.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x990>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003d96:	4bb3      	ldr	r3, [pc, #716]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003d98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d9a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003da4:	49af      	ldr	r1, [pc, #700]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003da6:	4313      	orrs	r3, r2
 8003da8:	654b      	str	r3, [r1, #84]	; 0x54
 8003daa:	e001      	b.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0x994>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dac:	7dfb      	ldrb	r3, [r7, #23]
 8003dae:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d04b      	beq.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0xa38>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003dc2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003dc6:	d02e      	beq.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8003dc8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003dcc:	d828      	bhi.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8003dce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dd2:	d02a      	beq.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8003dd4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dd8:	d822      	bhi.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8003dda:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003dde:	d026      	beq.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8003de0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003de4:	d81c      	bhi.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8003de6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003dea:	d010      	beq.n	8003e0e <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 8003dec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003df0:	d816      	bhi.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d01d      	beq.n	8003e32 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8003df6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dfa:	d111      	bne.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0xa04>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	3304      	adds	r3, #4
 8003e00:	2100      	movs	r1, #0
 8003e02:	4618      	mov	r0, r3
 8003e04:	f000 fcd4 	bl	80047b0 <RCCEx_PLL2_Config>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003e0c:	e012      	b.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0xa18>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	3324      	adds	r3, #36	; 0x24
 8003e12:	2102      	movs	r1, #2
 8003e14:	4618      	mov	r0, r3
 8003e16:	f000 fd7d 	bl	8004914 <RCCEx_PLL3_Config>
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003e1e:	e009      	b.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e20:	2301      	movs	r3, #1
 8003e22:	75fb      	strb	r3, [r7, #23]
      break;
 8003e24:	e006      	b.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8003e26:	bf00      	nop
 8003e28:	e004      	b.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8003e2a:	bf00      	nop
 8003e2c:	e002      	b.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8003e2e:	bf00      	nop
 8003e30:	e000      	b.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8003e32:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e34:	7dfb      	ldrb	r3, [r7, #23]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d10a      	bne.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003e3a:	4b8a      	ldr	r3, [pc, #552]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003e3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e3e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003e48:	4986      	ldr	r1, [pc, #536]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	658b      	str	r3, [r1, #88]	; 0x58
 8003e4e:	e001      	b.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0xa38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e50:	7dfb      	ldrb	r3, [r7, #23]
 8003e52:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d04b      	beq.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003e66:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003e6a:	d02e      	beq.n	8003eca <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8003e6c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003e70:	d828      	bhi.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8003e72:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e76:	d02a      	beq.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8003e78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e7c:	d822      	bhi.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8003e7e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003e82:	d026      	beq.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0xab6>
 8003e84:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003e88:	d81c      	bhi.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8003e8a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e8e:	d010      	beq.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0xa96>
 8003e90:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e94:	d816      	bhi.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d01d      	beq.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0xaba>
 8003e9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e9e:	d111      	bne.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	3304      	adds	r3, #4
 8003ea4:	2100      	movs	r1, #0
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	f000 fc82 	bl	80047b0 <RCCEx_PLL2_Config>
 8003eac:	4603      	mov	r3, r0
 8003eae:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003eb0:	e012      	b.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0xabc>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	3324      	adds	r3, #36	; 0x24
 8003eb6:	2102      	movs	r1, #2
 8003eb8:	4618      	mov	r0, r3
 8003eba:	f000 fd2b 	bl	8004914 <RCCEx_PLL3_Config>
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003ec2:	e009      	b.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	75fb      	strb	r3, [r7, #23]
      break;
 8003ec8:	e006      	b.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8003eca:	bf00      	nop
 8003ecc:	e004      	b.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8003ece:	bf00      	nop
 8003ed0:	e002      	b.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8003ed2:	bf00      	nop
 8003ed4:	e000      	b.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8003ed6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ed8:	7dfb      	ldrb	r3, [r7, #23]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d10a      	bne.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003ede:	4b61      	ldr	r3, [pc, #388]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003ee0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ee2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003eec:	495d      	ldr	r1, [pc, #372]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	658b      	str	r3, [r1, #88]	; 0x58
 8003ef2:	e001      	b.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0xadc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ef4:	7dfb      	ldrb	r3, [r7, #23]
 8003ef6:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f003 0308 	and.w	r3, r3, #8
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d01a      	beq.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f0e:	d10a      	bne.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	3324      	adds	r3, #36	; 0x24
 8003f14:	2102      	movs	r1, #2
 8003f16:	4618      	mov	r0, r3
 8003f18:	f000 fcfc 	bl	8004914 <RCCEx_PLL3_Config>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d001      	beq.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
        {
          status = HAL_ERROR;
 8003f22:	2301      	movs	r3, #1
 8003f24:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003f26:	4b4f      	ldr	r3, [pc, #316]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003f28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f2a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f34:	494b      	ldr	r1, [pc, #300]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003f36:	4313      	orrs	r3, r2
 8003f38:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f003 0310 	and.w	r3, r3, #16
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d01a      	beq.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0xb60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003f4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f50:	d10a      	bne.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	3324      	adds	r3, #36	; 0x24
 8003f56:	2102      	movs	r1, #2
 8003f58:	4618      	mov	r0, r3
 8003f5a:	f000 fcdb 	bl	8004914 <RCCEx_PLL3_Config>
 8003f5e:	4603      	mov	r3, r0
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d001      	beq.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
      {
        status = HAL_ERROR;
 8003f64:	2301      	movs	r3, #1
 8003f66:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003f68:	4b3e      	ldr	r3, [pc, #248]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003f6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f6c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003f76:	493b      	ldr	r1, [pc, #236]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d034      	beq.n	8003ff2 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003f8e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003f92:	d01d      	beq.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0xbb4>
 8003f94:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003f98:	d817      	bhi.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0xbae>
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d003      	beq.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
 8003f9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fa2:	d009      	beq.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8003fa4:	e011      	b.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0xbae>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	3304      	adds	r3, #4
 8003faa:	2100      	movs	r1, #0
 8003fac:	4618      	mov	r0, r3
 8003fae:	f000 fbff 	bl	80047b0 <RCCEx_PLL2_Config>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003fb6:	e00c      	b.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0xbb6>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	3324      	adds	r3, #36	; 0x24
 8003fbc:	2102      	movs	r1, #2
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	f000 fca8 	bl	8004914 <RCCEx_PLL3_Config>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003fc8:	e003      	b.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	75fb      	strb	r3, [r7, #23]
      break;
 8003fce:	e000      	b.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      break;
 8003fd0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003fd2:	7dfb      	ldrb	r3, [r7, #23]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d10a      	bne.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003fd8:	4b22      	ldr	r3, [pc, #136]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003fda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fdc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003fe6:	491f      	ldr	r1, [pc, #124]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	658b      	str	r3, [r1, #88]	; 0x58
 8003fec:	e001      	b.n	8003ff2 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fee:	7dfb      	ldrb	r3, [r7, #23]
 8003ff0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d036      	beq.n	800406c <HAL_RCCEx_PeriphCLKConfig+0xc50>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004004:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004008:	d01c      	beq.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 800400a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800400e:	d816      	bhi.n	800403e <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8004010:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004014:	d003      	beq.n	800401e <HAL_RCCEx_PeriphCLKConfig+0xc02>
 8004016:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800401a:	d007      	beq.n	800402c <HAL_RCCEx_PeriphCLKConfig+0xc10>
 800401c:	e00f      	b.n	800403e <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800401e:	4b11      	ldr	r3, [pc, #68]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8004020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004022:	4a10      	ldr	r2, [pc, #64]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8004024:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004028:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800402a:	e00c      	b.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	3324      	adds	r3, #36	; 0x24
 8004030:	2101      	movs	r1, #1
 8004032:	4618      	mov	r0, r3
 8004034:	f000 fc6e 	bl	8004914 <RCCEx_PLL3_Config>
 8004038:	4603      	mov	r3, r0
 800403a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800403c:	e003      	b.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800403e:	2301      	movs	r3, #1
 8004040:	75fb      	strb	r3, [r7, #23]
      break;
 8004042:	e000      	b.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8004044:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004046:	7dfb      	ldrb	r3, [r7, #23]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d10d      	bne.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800404c:	4b05      	ldr	r3, [pc, #20]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 800404e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004050:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800405a:	4902      	ldr	r1, [pc, #8]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 800405c:	4313      	orrs	r3, r2
 800405e:	654b      	str	r3, [r1, #84]	; 0x54
 8004060:	e004      	b.n	800406c <HAL_RCCEx_PeriphCLKConfig+0xc50>
 8004062:	bf00      	nop
 8004064:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004068:	7dfb      	ldrb	r3, [r7, #23]
 800406a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004074:	2b00      	cmp	r3, #0
 8004076:	d029      	beq.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0xcb0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800407c:	2b00      	cmp	r3, #0
 800407e:	d003      	beq.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8004080:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004084:	d007      	beq.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
 8004086:	e00f      	b.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0xc8c>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004088:	4b69      	ldr	r3, [pc, #420]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800408a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800408c:	4a68      	ldr	r2, [pc, #416]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800408e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004092:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004094:	e00b      	b.n	80040ae <HAL_RCCEx_PeriphCLKConfig+0xc92>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	3304      	adds	r3, #4
 800409a:	2102      	movs	r1, #2
 800409c:	4618      	mov	r0, r3
 800409e:	f000 fb87 	bl	80047b0 <RCCEx_PLL2_Config>
 80040a2:	4603      	mov	r3, r0
 80040a4:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80040a6:	e002      	b.n	80040ae <HAL_RCCEx_PeriphCLKConfig+0xc92>

    default:
      ret = HAL_ERROR;
 80040a8:	2301      	movs	r3, #1
 80040aa:	75fb      	strb	r3, [r7, #23]
      break;
 80040ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80040ae:	7dfb      	ldrb	r3, [r7, #23]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d109      	bne.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0xcac>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80040b4:	4b5e      	ldr	r3, [pc, #376]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80040b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040b8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040c0:	495b      	ldr	r1, [pc, #364]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80040c2:	4313      	orrs	r3, r2
 80040c4:	64cb      	str	r3, [r1, #76]	; 0x4c
 80040c6:	e001      	b.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0xcb0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040c8:	7dfb      	ldrb	r3, [r7, #23]
 80040ca:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d00a      	beq.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0xcd2>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	3324      	adds	r3, #36	; 0x24
 80040dc:	2102      	movs	r1, #2
 80040de:	4618      	mov	r0, r3
 80040e0:	f000 fc18 	bl	8004914 <RCCEx_PLL3_Config>
 80040e4:	4603      	mov	r3, r0
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d001      	beq.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0xcd2>
    {
      status=HAL_ERROR;
 80040ea:	2301      	movs	r3, #1
 80040ec:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d032      	beq.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {

    switch(PeriphClkInit->RngClockSelection)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004100:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004104:	d017      	beq.n	8004136 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
 8004106:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800410a:	d811      	bhi.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800410c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004110:	d013      	beq.n	800413a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
 8004112:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004116:	d80b      	bhi.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8004118:	2b00      	cmp	r3, #0
 800411a:	d010      	beq.n	800413e <HAL_RCCEx_PeriphCLKConfig+0xd22>
 800411c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004120:	d106      	bne.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0xd14>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004122:	4b43      	ldr	r3, [pc, #268]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004126:	4a42      	ldr	r2, [pc, #264]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004128:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800412c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800412e:	e007      	b.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0xd24>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004130:	2301      	movs	r3, #1
 8004132:	75fb      	strb	r3, [r7, #23]
      break;
 8004134:	e004      	b.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0xd24>
      break;
 8004136:	bf00      	nop
 8004138:	e002      	b.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0xd24>
      break;
 800413a:	bf00      	nop
 800413c:	e000      	b.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0xd24>
      break;
 800413e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004140:	7dfb      	ldrb	r3, [r7, #23]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d10a      	bne.n	800415c <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004146:	4b3a      	ldr	r3, [pc, #232]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004148:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800414a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004154:	4936      	ldr	r1, [pc, #216]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004156:	4313      	orrs	r3, r2
 8004158:	654b      	str	r3, [r1, #84]	; 0x54
 800415a:	e001      	b.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0xd44>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800415c:	7dfb      	ldrb	r3, [r7, #23]
 800415e:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004168:	2b00      	cmp	r3, #0
 800416a:	d008      	beq.n	800417e <HAL_RCCEx_PeriphCLKConfig+0xd62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800416c:	4b30      	ldr	r3, [pc, #192]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800416e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004170:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004178:	492d      	ldr	r1, [pc, #180]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800417a:	4313      	orrs	r3, r2
 800417c:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004186:	2b00      	cmp	r3, #0
 8004188:	d008      	beq.n	800419c <HAL_RCCEx_PeriphCLKConfig+0xd80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800418a:	4b29      	ldr	r3, [pc, #164]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800418c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800418e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004196:	4926      	ldr	r1, [pc, #152]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004198:	4313      	orrs	r3, r2
 800419a:	650b      	str	r3, [r1, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d008      	beq.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0xd9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 80041a8:	4b21      	ldr	r3, [pc, #132]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80041aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041ac:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041b4:	491e      	ldr	r1, [pc, #120]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80041b6:	4313      	orrs	r3, r2
 80041b8:	658b      	str	r3, [r1, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d00d      	beq.n	80041e2 <HAL_RCCEx_PeriphCLKConfig+0xdc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80041c6:	4b1a      	ldr	r3, [pc, #104]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80041c8:	691b      	ldr	r3, [r3, #16]
 80041ca:	4a19      	ldr	r2, [pc, #100]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80041cc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80041d0:	6113      	str	r3, [r2, #16]
 80041d2:	4b17      	ldr	r3, [pc, #92]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80041d4:	691a      	ldr	r2, [r3, #16]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80041dc:	4914      	ldr	r1, [pc, #80]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80041de:	4313      	orrs	r3, r2
 80041e0:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	da08      	bge.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0xde0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80041ea:	4b11      	ldr	r3, [pc, #68]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80041ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041ee:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041f6:	490e      	ldr	r1, [pc, #56]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80041f8:	4313      	orrs	r3, r2
 80041fa:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004204:	2b00      	cmp	r3, #0
 8004206:	d009      	beq.n	800421c <HAL_RCCEx_PeriphCLKConfig+0xe00>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004208:	4b09      	ldr	r3, [pc, #36]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800420a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800420c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004216:	4906      	ldr	r1, [pc, #24]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004218:	4313      	orrs	r3, r2
 800421a:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800421c:	7dbb      	ldrb	r3, [r7, #22]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d101      	bne.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0xe0a>
  {
    return HAL_OK;
 8004222:	2300      	movs	r3, #0
 8004224:	e000      	b.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0xe0c>
  }
  return HAL_ERROR;
 8004226:	2301      	movs	r3, #1
}
 8004228:	4618      	mov	r0, r3
 800422a:	3718      	adds	r7, #24
 800422c:	46bd      	mov	sp, r7
 800422e:	bd80      	pop	{r7, pc}
 8004230:	58024400 	.word	0x58024400

08004234 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8004238:	f7ff f894 	bl	8003364 <HAL_RCC_GetHCLKFreq>
 800423c:	4602      	mov	r2, r0
 800423e:	4b06      	ldr	r3, [pc, #24]	; (8004258 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004240:	6a1b      	ldr	r3, [r3, #32]
 8004242:	091b      	lsrs	r3, r3, #4
 8004244:	f003 0307 	and.w	r3, r3, #7
 8004248:	4904      	ldr	r1, [pc, #16]	; (800425c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800424a:	5ccb      	ldrb	r3, [r1, r3]
 800424c:	f003 031f 	and.w	r3, r3, #31
 8004250:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8004254:	4618      	mov	r0, r3
 8004256:	bd80      	pop	{r7, pc}
 8004258:	58024400 	.word	0x58024400
 800425c:	08006f1c 	.word	0x08006f1c

08004260 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8004260:	b480      	push	{r7}
 8004262:	b089      	sub	sp, #36	; 0x24
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004268:	4ba1      	ldr	r3, [pc, #644]	; (80044f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800426a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800426c:	f003 0303 	and.w	r3, r3, #3
 8004270:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8004272:	4b9f      	ldr	r3, [pc, #636]	; (80044f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004274:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004276:	0b1b      	lsrs	r3, r3, #12
 8004278:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800427c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800427e:	4b9c      	ldr	r3, [pc, #624]	; (80044f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004280:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004282:	091b      	lsrs	r3, r3, #4
 8004284:	f003 0301 	and.w	r3, r3, #1
 8004288:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800428a:	4b99      	ldr	r3, [pc, #612]	; (80044f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800428c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800428e:	08db      	lsrs	r3, r3, #3
 8004290:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004294:	693a      	ldr	r2, [r7, #16]
 8004296:	fb02 f303 	mul.w	r3, r2, r3
 800429a:	ee07 3a90 	vmov	s15, r3
 800429e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042a2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80042a6:	697b      	ldr	r3, [r7, #20]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	f000 8111 	beq.w	80044d0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80042ae:	69bb      	ldr	r3, [r7, #24]
 80042b0:	2b02      	cmp	r3, #2
 80042b2:	f000 8083 	beq.w	80043bc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80042b6:	69bb      	ldr	r3, [r7, #24]
 80042b8:	2b02      	cmp	r3, #2
 80042ba:	f200 80a1 	bhi.w	8004400 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80042be:	69bb      	ldr	r3, [r7, #24]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d003      	beq.n	80042cc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80042c4:	69bb      	ldr	r3, [r7, #24]
 80042c6:	2b01      	cmp	r3, #1
 80042c8:	d056      	beq.n	8004378 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80042ca:	e099      	b.n	8004400 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80042cc:	4b88      	ldr	r3, [pc, #544]	; (80044f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f003 0320 	and.w	r3, r3, #32
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d02d      	beq.n	8004334 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80042d8:	4b85      	ldr	r3, [pc, #532]	; (80044f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	08db      	lsrs	r3, r3, #3
 80042de:	f003 0303 	and.w	r3, r3, #3
 80042e2:	4a84      	ldr	r2, [pc, #528]	; (80044f4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80042e4:	fa22 f303 	lsr.w	r3, r2, r3
 80042e8:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	ee07 3a90 	vmov	s15, r3
 80042f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042f4:	697b      	ldr	r3, [r7, #20]
 80042f6:	ee07 3a90 	vmov	s15, r3
 80042fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004302:	4b7b      	ldr	r3, [pc, #492]	; (80044f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004304:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004306:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800430a:	ee07 3a90 	vmov	s15, r3
 800430e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004312:	ed97 6a03 	vldr	s12, [r7, #12]
 8004316:	eddf 5a78 	vldr	s11, [pc, #480]	; 80044f8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800431a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800431e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004322:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004326:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800432a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800432e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004332:	e087      	b.n	8004444 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004334:	697b      	ldr	r3, [r7, #20]
 8004336:	ee07 3a90 	vmov	s15, r3
 800433a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800433e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80044fc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004342:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004346:	4b6a      	ldr	r3, [pc, #424]	; (80044f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800434a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800434e:	ee07 3a90 	vmov	s15, r3
 8004352:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004356:	ed97 6a03 	vldr	s12, [r7, #12]
 800435a:	eddf 5a67 	vldr	s11, [pc, #412]	; 80044f8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800435e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004362:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004366:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800436a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800436e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004372:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004376:	e065      	b.n	8004444 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	ee07 3a90 	vmov	s15, r3
 800437e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004382:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004500 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004386:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800438a:	4b59      	ldr	r3, [pc, #356]	; (80044f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800438c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800438e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004392:	ee07 3a90 	vmov	s15, r3
 8004396:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800439a:	ed97 6a03 	vldr	s12, [r7, #12]
 800439e:	eddf 5a56 	vldr	s11, [pc, #344]	; 80044f8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80043a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80043a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80043ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80043b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043b6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80043ba:	e043      	b.n	8004444 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80043bc:	697b      	ldr	r3, [r7, #20]
 80043be:	ee07 3a90 	vmov	s15, r3
 80043c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043c6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004504 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80043ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043ce:	4b48      	ldr	r3, [pc, #288]	; (80044f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80043d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043d6:	ee07 3a90 	vmov	s15, r3
 80043da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043de:	ed97 6a03 	vldr	s12, [r7, #12]
 80043e2:	eddf 5a45 	vldr	s11, [pc, #276]	; 80044f8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80043e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80043ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80043f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80043f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043fa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80043fe:	e021      	b.n	8004444 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004400:	697b      	ldr	r3, [r7, #20]
 8004402:	ee07 3a90 	vmov	s15, r3
 8004406:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800440a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004500 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800440e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004412:	4b37      	ldr	r3, [pc, #220]	; (80044f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004414:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004416:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800441a:	ee07 3a90 	vmov	s15, r3
 800441e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004422:	ed97 6a03 	vldr	s12, [r7, #12]
 8004426:	eddf 5a34 	vldr	s11, [pc, #208]	; 80044f8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800442a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800442e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004432:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004436:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800443a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800443e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004442:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8004444:	4b2a      	ldr	r3, [pc, #168]	; (80044f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004448:	0a5b      	lsrs	r3, r3, #9
 800444a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800444e:	ee07 3a90 	vmov	s15, r3
 8004452:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004456:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800445a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800445e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004462:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004466:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800446a:	ee17 2a90 	vmov	r2, s15
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8004472:	4b1f      	ldr	r3, [pc, #124]	; (80044f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004474:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004476:	0c1b      	lsrs	r3, r3, #16
 8004478:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800447c:	ee07 3a90 	vmov	s15, r3
 8004480:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004484:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004488:	ee37 7a87 	vadd.f32	s14, s15, s14
 800448c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004490:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004494:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004498:	ee17 2a90 	vmov	r2, s15
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80044a0:	4b13      	ldr	r3, [pc, #76]	; (80044f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80044a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044a4:	0e1b      	lsrs	r3, r3, #24
 80044a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80044aa:	ee07 3a90 	vmov	s15, r3
 80044ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044b2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80044b6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80044ba:	edd7 6a07 	vldr	s13, [r7, #28]
 80044be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80044c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80044c6:	ee17 2a90 	vmov	r2, s15
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80044ce:	e008      	b.n	80044e2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2200      	movs	r2, #0
 80044d4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2200      	movs	r2, #0
 80044da:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2200      	movs	r2, #0
 80044e0:	609a      	str	r2, [r3, #8]
}
 80044e2:	bf00      	nop
 80044e4:	3724      	adds	r7, #36	; 0x24
 80044e6:	46bd      	mov	sp, r7
 80044e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ec:	4770      	bx	lr
 80044ee:	bf00      	nop
 80044f0:	58024400 	.word	0x58024400
 80044f4:	03d09000 	.word	0x03d09000
 80044f8:	46000000 	.word	0x46000000
 80044fc:	4c742400 	.word	0x4c742400
 8004500:	4a742400 	.word	0x4a742400
 8004504:	4bb71b00 	.word	0x4bb71b00

08004508 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8004508:	b480      	push	{r7}
 800450a:	b089      	sub	sp, #36	; 0x24
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004510:	4ba1      	ldr	r3, [pc, #644]	; (8004798 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004512:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004514:	f003 0303 	and.w	r3, r3, #3
 8004518:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800451a:	4b9f      	ldr	r3, [pc, #636]	; (8004798 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800451c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800451e:	0d1b      	lsrs	r3, r3, #20
 8004520:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004524:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004526:	4b9c      	ldr	r3, [pc, #624]	; (8004798 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800452a:	0a1b      	lsrs	r3, r3, #8
 800452c:	f003 0301 	and.w	r3, r3, #1
 8004530:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8004532:	4b99      	ldr	r3, [pc, #612]	; (8004798 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004534:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004536:	08db      	lsrs	r3, r3, #3
 8004538:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800453c:	693a      	ldr	r2, [r7, #16]
 800453e:	fb02 f303 	mul.w	r3, r2, r3
 8004542:	ee07 3a90 	vmov	s15, r3
 8004546:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800454a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	2b00      	cmp	r3, #0
 8004552:	f000 8111 	beq.w	8004778 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004556:	69bb      	ldr	r3, [r7, #24]
 8004558:	2b02      	cmp	r3, #2
 800455a:	f000 8083 	beq.w	8004664 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800455e:	69bb      	ldr	r3, [r7, #24]
 8004560:	2b02      	cmp	r3, #2
 8004562:	f200 80a1 	bhi.w	80046a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004566:	69bb      	ldr	r3, [r7, #24]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d003      	beq.n	8004574 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800456c:	69bb      	ldr	r3, [r7, #24]
 800456e:	2b01      	cmp	r3, #1
 8004570:	d056      	beq.n	8004620 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004572:	e099      	b.n	80046a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004574:	4b88      	ldr	r3, [pc, #544]	; (8004798 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f003 0320 	and.w	r3, r3, #32
 800457c:	2b00      	cmp	r3, #0
 800457e:	d02d      	beq.n	80045dc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004580:	4b85      	ldr	r3, [pc, #532]	; (8004798 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	08db      	lsrs	r3, r3, #3
 8004586:	f003 0303 	and.w	r3, r3, #3
 800458a:	4a84      	ldr	r2, [pc, #528]	; (800479c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800458c:	fa22 f303 	lsr.w	r3, r2, r3
 8004590:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004592:	68bb      	ldr	r3, [r7, #8]
 8004594:	ee07 3a90 	vmov	s15, r3
 8004598:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800459c:	697b      	ldr	r3, [r7, #20]
 800459e:	ee07 3a90 	vmov	s15, r3
 80045a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045aa:	4b7b      	ldr	r3, [pc, #492]	; (8004798 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80045ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045b2:	ee07 3a90 	vmov	s15, r3
 80045b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80045be:	eddf 5a78 	vldr	s11, [pc, #480]	; 80047a0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80045c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80045c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80045ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80045ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80045d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045d6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80045da:	e087      	b.n	80046ec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80045dc:	697b      	ldr	r3, [r7, #20]
 80045de:	ee07 3a90 	vmov	s15, r3
 80045e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045e6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80047a4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80045ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045ee:	4b6a      	ldr	r3, [pc, #424]	; (8004798 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80045f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045f6:	ee07 3a90 	vmov	s15, r3
 80045fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8004602:	eddf 5a67 	vldr	s11, [pc, #412]	; 80047a0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004606:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800460a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800460e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004612:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004616:	ee67 7a27 	vmul.f32	s15, s14, s15
 800461a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800461e:	e065      	b.n	80046ec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004620:	697b      	ldr	r3, [r7, #20]
 8004622:	ee07 3a90 	vmov	s15, r3
 8004626:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800462a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80047a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800462e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004632:	4b59      	ldr	r3, [pc, #356]	; (8004798 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004636:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800463a:	ee07 3a90 	vmov	s15, r3
 800463e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004642:	ed97 6a03 	vldr	s12, [r7, #12]
 8004646:	eddf 5a56 	vldr	s11, [pc, #344]	; 80047a0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800464a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800464e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004652:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004656:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800465a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800465e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004662:	e043      	b.n	80046ec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004664:	697b      	ldr	r3, [r7, #20]
 8004666:	ee07 3a90 	vmov	s15, r3
 800466a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800466e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80047ac <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004672:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004676:	4b48      	ldr	r3, [pc, #288]	; (8004798 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800467a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800467e:	ee07 3a90 	vmov	s15, r3
 8004682:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004686:	ed97 6a03 	vldr	s12, [r7, #12]
 800468a:	eddf 5a45 	vldr	s11, [pc, #276]	; 80047a0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800468e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004692:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004696:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800469a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800469e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046a2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80046a6:	e021      	b.n	80046ec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80046a8:	697b      	ldr	r3, [r7, #20]
 80046aa:	ee07 3a90 	vmov	s15, r3
 80046ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046b2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80047a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80046b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046ba:	4b37      	ldr	r3, [pc, #220]	; (8004798 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80046bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046c2:	ee07 3a90 	vmov	s15, r3
 80046c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80046ce:	eddf 5a34 	vldr	s11, [pc, #208]	; 80047a0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80046d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80046de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046e6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80046ea:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80046ec:	4b2a      	ldr	r3, [pc, #168]	; (8004798 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80046ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046f0:	0a5b      	lsrs	r3, r3, #9
 80046f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80046f6:	ee07 3a90 	vmov	s15, r3
 80046fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046fe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004702:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004706:	edd7 6a07 	vldr	s13, [r7, #28]
 800470a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800470e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004712:	ee17 2a90 	vmov	r2, s15
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800471a:	4b1f      	ldr	r3, [pc, #124]	; (8004798 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800471c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800471e:	0c1b      	lsrs	r3, r3, #16
 8004720:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004724:	ee07 3a90 	vmov	s15, r3
 8004728:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800472c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004730:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004734:	edd7 6a07 	vldr	s13, [r7, #28]
 8004738:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800473c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004740:	ee17 2a90 	vmov	r2, s15
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8004748:	4b13      	ldr	r3, [pc, #76]	; (8004798 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800474a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800474c:	0e1b      	lsrs	r3, r3, #24
 800474e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004752:	ee07 3a90 	vmov	s15, r3
 8004756:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800475a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800475e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004762:	edd7 6a07 	vldr	s13, [r7, #28]
 8004766:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800476a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800476e:	ee17 2a90 	vmov	r2, s15
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004776:	e008      	b.n	800478a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2200      	movs	r2, #0
 800477c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2200      	movs	r2, #0
 8004782:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2200      	movs	r2, #0
 8004788:	609a      	str	r2, [r3, #8]
}
 800478a:	bf00      	nop
 800478c:	3724      	adds	r7, #36	; 0x24
 800478e:	46bd      	mov	sp, r7
 8004790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004794:	4770      	bx	lr
 8004796:	bf00      	nop
 8004798:	58024400 	.word	0x58024400
 800479c:	03d09000 	.word	0x03d09000
 80047a0:	46000000 	.word	0x46000000
 80047a4:	4c742400 	.word	0x4c742400
 80047a8:	4a742400 	.word	0x4a742400
 80047ac:	4bb71b00 	.word	0x4bb71b00

080047b0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b084      	sub	sp, #16
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
 80047b8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80047ba:	2300      	movs	r3, #0
 80047bc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80047be:	4b53      	ldr	r3, [pc, #332]	; (800490c <RCCEx_PLL2_Config+0x15c>)
 80047c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047c2:	f003 0303 	and.w	r3, r3, #3
 80047c6:	2b03      	cmp	r3, #3
 80047c8:	d101      	bne.n	80047ce <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80047ca:	2301      	movs	r3, #1
 80047cc:	e099      	b.n	8004902 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80047ce:	4b4f      	ldr	r3, [pc, #316]	; (800490c <RCCEx_PLL2_Config+0x15c>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4a4e      	ldr	r2, [pc, #312]	; (800490c <RCCEx_PLL2_Config+0x15c>)
 80047d4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80047d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047da:	f7fc fde7 	bl	80013ac <HAL_GetTick>
 80047de:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80047e0:	e008      	b.n	80047f4 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80047e2:	f7fc fde3 	bl	80013ac <HAL_GetTick>
 80047e6:	4602      	mov	r2, r0
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	1ad3      	subs	r3, r2, r3
 80047ec:	2b02      	cmp	r3, #2
 80047ee:	d901      	bls.n	80047f4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80047f0:	2303      	movs	r3, #3
 80047f2:	e086      	b.n	8004902 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80047f4:	4b45      	ldr	r3, [pc, #276]	; (800490c <RCCEx_PLL2_Config+0x15c>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d1f0      	bne.n	80047e2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004800:	4b42      	ldr	r3, [pc, #264]	; (800490c <RCCEx_PLL2_Config+0x15c>)
 8004802:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004804:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	031b      	lsls	r3, r3, #12
 800480e:	493f      	ldr	r1, [pc, #252]	; (800490c <RCCEx_PLL2_Config+0x15c>)
 8004810:	4313      	orrs	r3, r2
 8004812:	628b      	str	r3, [r1, #40]	; 0x28
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	3b01      	subs	r3, #1
 800481a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	689b      	ldr	r3, [r3, #8]
 8004822:	3b01      	subs	r3, #1
 8004824:	025b      	lsls	r3, r3, #9
 8004826:	b29b      	uxth	r3, r3
 8004828:	431a      	orrs	r2, r3
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	68db      	ldr	r3, [r3, #12]
 800482e:	3b01      	subs	r3, #1
 8004830:	041b      	lsls	r3, r3, #16
 8004832:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004836:	431a      	orrs	r2, r3
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	691b      	ldr	r3, [r3, #16]
 800483c:	3b01      	subs	r3, #1
 800483e:	061b      	lsls	r3, r3, #24
 8004840:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004844:	4931      	ldr	r1, [pc, #196]	; (800490c <RCCEx_PLL2_Config+0x15c>)
 8004846:	4313      	orrs	r3, r2
 8004848:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800484a:	4b30      	ldr	r3, [pc, #192]	; (800490c <RCCEx_PLL2_Config+0x15c>)
 800484c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800484e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	695b      	ldr	r3, [r3, #20]
 8004856:	492d      	ldr	r1, [pc, #180]	; (800490c <RCCEx_PLL2_Config+0x15c>)
 8004858:	4313      	orrs	r3, r2
 800485a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800485c:	4b2b      	ldr	r3, [pc, #172]	; (800490c <RCCEx_PLL2_Config+0x15c>)
 800485e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004860:	f023 0220 	bic.w	r2, r3, #32
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	699b      	ldr	r3, [r3, #24]
 8004868:	4928      	ldr	r1, [pc, #160]	; (800490c <RCCEx_PLL2_Config+0x15c>)
 800486a:	4313      	orrs	r3, r2
 800486c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800486e:	4b27      	ldr	r3, [pc, #156]	; (800490c <RCCEx_PLL2_Config+0x15c>)
 8004870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004872:	4a26      	ldr	r2, [pc, #152]	; (800490c <RCCEx_PLL2_Config+0x15c>)
 8004874:	f023 0310 	bic.w	r3, r3, #16
 8004878:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800487a:	4b24      	ldr	r3, [pc, #144]	; (800490c <RCCEx_PLL2_Config+0x15c>)
 800487c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800487e:	4b24      	ldr	r3, [pc, #144]	; (8004910 <RCCEx_PLL2_Config+0x160>)
 8004880:	4013      	ands	r3, r2
 8004882:	687a      	ldr	r2, [r7, #4]
 8004884:	69d2      	ldr	r2, [r2, #28]
 8004886:	00d2      	lsls	r2, r2, #3
 8004888:	4920      	ldr	r1, [pc, #128]	; (800490c <RCCEx_PLL2_Config+0x15c>)
 800488a:	4313      	orrs	r3, r2
 800488c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800488e:	4b1f      	ldr	r3, [pc, #124]	; (800490c <RCCEx_PLL2_Config+0x15c>)
 8004890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004892:	4a1e      	ldr	r2, [pc, #120]	; (800490c <RCCEx_PLL2_Config+0x15c>)
 8004894:	f043 0310 	orr.w	r3, r3, #16
 8004898:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d106      	bne.n	80048ae <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80048a0:	4b1a      	ldr	r3, [pc, #104]	; (800490c <RCCEx_PLL2_Config+0x15c>)
 80048a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048a4:	4a19      	ldr	r2, [pc, #100]	; (800490c <RCCEx_PLL2_Config+0x15c>)
 80048a6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80048aa:	62d3      	str	r3, [r2, #44]	; 0x2c
 80048ac:	e00f      	b.n	80048ce <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	2b01      	cmp	r3, #1
 80048b2:	d106      	bne.n	80048c2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80048b4:	4b15      	ldr	r3, [pc, #84]	; (800490c <RCCEx_PLL2_Config+0x15c>)
 80048b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048b8:	4a14      	ldr	r2, [pc, #80]	; (800490c <RCCEx_PLL2_Config+0x15c>)
 80048ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80048be:	62d3      	str	r3, [r2, #44]	; 0x2c
 80048c0:	e005      	b.n	80048ce <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80048c2:	4b12      	ldr	r3, [pc, #72]	; (800490c <RCCEx_PLL2_Config+0x15c>)
 80048c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048c6:	4a11      	ldr	r2, [pc, #68]	; (800490c <RCCEx_PLL2_Config+0x15c>)
 80048c8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80048cc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80048ce:	4b0f      	ldr	r3, [pc, #60]	; (800490c <RCCEx_PLL2_Config+0x15c>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4a0e      	ldr	r2, [pc, #56]	; (800490c <RCCEx_PLL2_Config+0x15c>)
 80048d4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80048d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048da:	f7fc fd67 	bl	80013ac <HAL_GetTick>
 80048de:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80048e0:	e008      	b.n	80048f4 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80048e2:	f7fc fd63 	bl	80013ac <HAL_GetTick>
 80048e6:	4602      	mov	r2, r0
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	1ad3      	subs	r3, r2, r3
 80048ec:	2b02      	cmp	r3, #2
 80048ee:	d901      	bls.n	80048f4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80048f0:	2303      	movs	r3, #3
 80048f2:	e006      	b.n	8004902 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80048f4:	4b05      	ldr	r3, [pc, #20]	; (800490c <RCCEx_PLL2_Config+0x15c>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d0f0      	beq.n	80048e2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004900:	7bfb      	ldrb	r3, [r7, #15]
}
 8004902:	4618      	mov	r0, r3
 8004904:	3710      	adds	r7, #16
 8004906:	46bd      	mov	sp, r7
 8004908:	bd80      	pop	{r7, pc}
 800490a:	bf00      	nop
 800490c:	58024400 	.word	0x58024400
 8004910:	ffff0007 	.word	0xffff0007

08004914 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b084      	sub	sp, #16
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
 800491c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800491e:	2300      	movs	r3, #0
 8004920:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004922:	4b53      	ldr	r3, [pc, #332]	; (8004a70 <RCCEx_PLL3_Config+0x15c>)
 8004924:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004926:	f003 0303 	and.w	r3, r3, #3
 800492a:	2b03      	cmp	r3, #3
 800492c:	d101      	bne.n	8004932 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800492e:	2301      	movs	r3, #1
 8004930:	e099      	b.n	8004a66 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004932:	4b4f      	ldr	r3, [pc, #316]	; (8004a70 <RCCEx_PLL3_Config+0x15c>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a4e      	ldr	r2, [pc, #312]	; (8004a70 <RCCEx_PLL3_Config+0x15c>)
 8004938:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800493c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800493e:	f7fc fd35 	bl	80013ac <HAL_GetTick>
 8004942:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004944:	e008      	b.n	8004958 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004946:	f7fc fd31 	bl	80013ac <HAL_GetTick>
 800494a:	4602      	mov	r2, r0
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	1ad3      	subs	r3, r2, r3
 8004950:	2b02      	cmp	r3, #2
 8004952:	d901      	bls.n	8004958 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004954:	2303      	movs	r3, #3
 8004956:	e086      	b.n	8004a66 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004958:	4b45      	ldr	r3, [pc, #276]	; (8004a70 <RCCEx_PLL3_Config+0x15c>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004960:	2b00      	cmp	r3, #0
 8004962:	d1f0      	bne.n	8004946 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004964:	4b42      	ldr	r3, [pc, #264]	; (8004a70 <RCCEx_PLL3_Config+0x15c>)
 8004966:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004968:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	051b      	lsls	r3, r3, #20
 8004972:	493f      	ldr	r1, [pc, #252]	; (8004a70 <RCCEx_PLL3_Config+0x15c>)
 8004974:	4313      	orrs	r3, r2
 8004976:	628b      	str	r3, [r1, #40]	; 0x28
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	3b01      	subs	r3, #1
 800497e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	689b      	ldr	r3, [r3, #8]
 8004986:	3b01      	subs	r3, #1
 8004988:	025b      	lsls	r3, r3, #9
 800498a:	b29b      	uxth	r3, r3
 800498c:	431a      	orrs	r2, r3
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	68db      	ldr	r3, [r3, #12]
 8004992:	3b01      	subs	r3, #1
 8004994:	041b      	lsls	r3, r3, #16
 8004996:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800499a:	431a      	orrs	r2, r3
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	691b      	ldr	r3, [r3, #16]
 80049a0:	3b01      	subs	r3, #1
 80049a2:	061b      	lsls	r3, r3, #24
 80049a4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80049a8:	4931      	ldr	r1, [pc, #196]	; (8004a70 <RCCEx_PLL3_Config+0x15c>)
 80049aa:	4313      	orrs	r3, r2
 80049ac:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80049ae:	4b30      	ldr	r3, [pc, #192]	; (8004a70 <RCCEx_PLL3_Config+0x15c>)
 80049b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049b2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	695b      	ldr	r3, [r3, #20]
 80049ba:	492d      	ldr	r1, [pc, #180]	; (8004a70 <RCCEx_PLL3_Config+0x15c>)
 80049bc:	4313      	orrs	r3, r2
 80049be:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80049c0:	4b2b      	ldr	r3, [pc, #172]	; (8004a70 <RCCEx_PLL3_Config+0x15c>)
 80049c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049c4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	699b      	ldr	r3, [r3, #24]
 80049cc:	4928      	ldr	r1, [pc, #160]	; (8004a70 <RCCEx_PLL3_Config+0x15c>)
 80049ce:	4313      	orrs	r3, r2
 80049d0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80049d2:	4b27      	ldr	r3, [pc, #156]	; (8004a70 <RCCEx_PLL3_Config+0x15c>)
 80049d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049d6:	4a26      	ldr	r2, [pc, #152]	; (8004a70 <RCCEx_PLL3_Config+0x15c>)
 80049d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80049dc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80049de:	4b24      	ldr	r3, [pc, #144]	; (8004a70 <RCCEx_PLL3_Config+0x15c>)
 80049e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80049e2:	4b24      	ldr	r3, [pc, #144]	; (8004a74 <RCCEx_PLL3_Config+0x160>)
 80049e4:	4013      	ands	r3, r2
 80049e6:	687a      	ldr	r2, [r7, #4]
 80049e8:	69d2      	ldr	r2, [r2, #28]
 80049ea:	00d2      	lsls	r2, r2, #3
 80049ec:	4920      	ldr	r1, [pc, #128]	; (8004a70 <RCCEx_PLL3_Config+0x15c>)
 80049ee:	4313      	orrs	r3, r2
 80049f0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80049f2:	4b1f      	ldr	r3, [pc, #124]	; (8004a70 <RCCEx_PLL3_Config+0x15c>)
 80049f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049f6:	4a1e      	ldr	r2, [pc, #120]	; (8004a70 <RCCEx_PLL3_Config+0x15c>)
 80049f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049fc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d106      	bne.n	8004a12 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004a04:	4b1a      	ldr	r3, [pc, #104]	; (8004a70 <RCCEx_PLL3_Config+0x15c>)
 8004a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a08:	4a19      	ldr	r2, [pc, #100]	; (8004a70 <RCCEx_PLL3_Config+0x15c>)
 8004a0a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004a0e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004a10:	e00f      	b.n	8004a32 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	2b01      	cmp	r3, #1
 8004a16:	d106      	bne.n	8004a26 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004a18:	4b15      	ldr	r3, [pc, #84]	; (8004a70 <RCCEx_PLL3_Config+0x15c>)
 8004a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a1c:	4a14      	ldr	r2, [pc, #80]	; (8004a70 <RCCEx_PLL3_Config+0x15c>)
 8004a1e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004a22:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004a24:	e005      	b.n	8004a32 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004a26:	4b12      	ldr	r3, [pc, #72]	; (8004a70 <RCCEx_PLL3_Config+0x15c>)
 8004a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a2a:	4a11      	ldr	r2, [pc, #68]	; (8004a70 <RCCEx_PLL3_Config+0x15c>)
 8004a2c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a30:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004a32:	4b0f      	ldr	r3, [pc, #60]	; (8004a70 <RCCEx_PLL3_Config+0x15c>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4a0e      	ldr	r2, [pc, #56]	; (8004a70 <RCCEx_PLL3_Config+0x15c>)
 8004a38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a3c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a3e:	f7fc fcb5 	bl	80013ac <HAL_GetTick>
 8004a42:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004a44:	e008      	b.n	8004a58 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004a46:	f7fc fcb1 	bl	80013ac <HAL_GetTick>
 8004a4a:	4602      	mov	r2, r0
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	1ad3      	subs	r3, r2, r3
 8004a50:	2b02      	cmp	r3, #2
 8004a52:	d901      	bls.n	8004a58 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004a54:	2303      	movs	r3, #3
 8004a56:	e006      	b.n	8004a66 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004a58:	4b05      	ldr	r3, [pc, #20]	; (8004a70 <RCCEx_PLL3_Config+0x15c>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d0f0      	beq.n	8004a46 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004a64:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a66:	4618      	mov	r0, r3
 8004a68:	3710      	adds	r7, #16
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	bd80      	pop	{r7, pc}
 8004a6e:	bf00      	nop
 8004a70:	58024400 	.word	0x58024400
 8004a74:	ffff0007 	.word	0xffff0007

08004a78 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b082      	sub	sp, #8
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d101      	bne.n	8004a8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a86:	2301      	movs	r3, #1
 8004a88:	e042      	b.n	8004b10 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d106      	bne.n	8004aa2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2200      	movs	r2, #0
 8004a98:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a9c:	6878      	ldr	r0, [r7, #4]
 8004a9e:	f7fc fb6f 	bl	8001180 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2224      	movs	r2, #36	; 0x24
 8004aa6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	681a      	ldr	r2, [r3, #0]
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f022 0201 	bic.w	r2, r2, #1
 8004ab8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004aba:	6878      	ldr	r0, [r7, #4]
 8004abc:	f000 f8c2 	bl	8004c44 <UART_SetConfig>
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	2b01      	cmp	r3, #1
 8004ac4:	d101      	bne.n	8004aca <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	e022      	b.n	8004b10 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d002      	beq.n	8004ad8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004ad2:	6878      	ldr	r0, [r7, #4]
 8004ad4:	f000 ff14 	bl	8005900 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	685a      	ldr	r2, [r3, #4]
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004ae6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	689a      	ldr	r2, [r3, #8]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004af6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	681a      	ldr	r2, [r3, #0]
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f042 0201 	orr.w	r2, r2, #1
 8004b06:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004b08:	6878      	ldr	r0, [r7, #4]
 8004b0a:	f000 ff9b 	bl	8005a44 <UART_CheckIdleState>
 8004b0e:	4603      	mov	r3, r0
}
 8004b10:	4618      	mov	r0, r3
 8004b12:	3708      	adds	r7, #8
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bd80      	pop	{r7, pc}

08004b18 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b08a      	sub	sp, #40	; 0x28
 8004b1c:	af02      	add	r7, sp, #8
 8004b1e:	60f8      	str	r0, [r7, #12]
 8004b20:	60b9      	str	r1, [r7, #8]
 8004b22:	603b      	str	r3, [r7, #0]
 8004b24:	4613      	mov	r3, r2
 8004b26:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b2e:	2b20      	cmp	r3, #32
 8004b30:	f040 8083 	bne.w	8004c3a <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d002      	beq.n	8004b40 <HAL_UART_Transmit+0x28>
 8004b3a:	88fb      	ldrh	r3, [r7, #6]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d101      	bne.n	8004b44 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004b40:	2301      	movs	r3, #1
 8004b42:	e07b      	b.n	8004c3c <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004b4a:	2b01      	cmp	r3, #1
 8004b4c:	d101      	bne.n	8004b52 <HAL_UART_Transmit+0x3a>
 8004b4e:	2302      	movs	r3, #2
 8004b50:	e074      	b.n	8004c3c <HAL_UART_Transmit+0x124>
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	2201      	movs	r2, #1
 8004b56:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	2221      	movs	r2, #33	; 0x21
 8004b66:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004b6a:	f7fc fc1f 	bl	80013ac <HAL_GetTick>
 8004b6e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	88fa      	ldrh	r2, [r7, #6]
 8004b74:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	88fa      	ldrh	r2, [r7, #6]
 8004b7c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	689b      	ldr	r3, [r3, #8]
 8004b84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b88:	d108      	bne.n	8004b9c <HAL_UART_Transmit+0x84>
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	691b      	ldr	r3, [r3, #16]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d104      	bne.n	8004b9c <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8004b92:	2300      	movs	r3, #0
 8004b94:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004b96:	68bb      	ldr	r3, [r7, #8]
 8004b98:	61bb      	str	r3, [r7, #24]
 8004b9a:	e003      	b.n	8004ba4 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8004bac:	e02c      	b.n	8004c08 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	9300      	str	r3, [sp, #0]
 8004bb2:	697b      	ldr	r3, [r7, #20]
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	2180      	movs	r1, #128	; 0x80
 8004bb8:	68f8      	ldr	r0, [r7, #12]
 8004bba:	f000 ff8e 	bl	8005ada <UART_WaitOnFlagUntilTimeout>
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d001      	beq.n	8004bc8 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8004bc4:	2303      	movs	r3, #3
 8004bc6:	e039      	b.n	8004c3c <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8004bc8:	69fb      	ldr	r3, [r7, #28]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d10b      	bne.n	8004be6 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004bce:	69bb      	ldr	r3, [r7, #24]
 8004bd0:	881b      	ldrh	r3, [r3, #0]
 8004bd2:	461a      	mov	r2, r3
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004bdc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004bde:	69bb      	ldr	r3, [r7, #24]
 8004be0:	3302      	adds	r3, #2
 8004be2:	61bb      	str	r3, [r7, #24]
 8004be4:	e007      	b.n	8004bf6 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004be6:	69fb      	ldr	r3, [r7, #28]
 8004be8:	781a      	ldrb	r2, [r3, #0]
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004bf0:	69fb      	ldr	r3, [r7, #28]
 8004bf2:	3301      	adds	r3, #1
 8004bf4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004bfc:	b29b      	uxth	r3, r3
 8004bfe:	3b01      	subs	r3, #1
 8004c00:	b29a      	uxth	r2, r3
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004c0e:	b29b      	uxth	r3, r3
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d1cc      	bne.n	8004bae <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	9300      	str	r3, [sp, #0]
 8004c18:	697b      	ldr	r3, [r7, #20]
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	2140      	movs	r1, #64	; 0x40
 8004c1e:	68f8      	ldr	r0, [r7, #12]
 8004c20:	f000 ff5b 	bl	8005ada <UART_WaitOnFlagUntilTimeout>
 8004c24:	4603      	mov	r3, r0
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d001      	beq.n	8004c2e <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8004c2a:	2303      	movs	r3, #3
 8004c2c:	e006      	b.n	8004c3c <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	2220      	movs	r2, #32
 8004c32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8004c36:	2300      	movs	r3, #0
 8004c38:	e000      	b.n	8004c3c <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8004c3a:	2302      	movs	r3, #2
  }
}
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	3720      	adds	r7, #32
 8004c40:	46bd      	mov	sp, r7
 8004c42:	bd80      	pop	{r7, pc}

08004c44 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c44:	b5b0      	push	{r4, r5, r7, lr}
 8004c46:	b08e      	sub	sp, #56	; 0x38
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	689a      	ldr	r2, [r3, #8]
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	691b      	ldr	r3, [r3, #16]
 8004c5a:	431a      	orrs	r2, r3
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	695b      	ldr	r3, [r3, #20]
 8004c60:	431a      	orrs	r2, r3
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	69db      	ldr	r3, [r3, #28]
 8004c66:	4313      	orrs	r3, r2
 8004c68:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	681a      	ldr	r2, [r3, #0]
 8004c70:	4bbf      	ldr	r3, [pc, #764]	; (8004f70 <UART_SetConfig+0x32c>)
 8004c72:	4013      	ands	r3, r2
 8004c74:	687a      	ldr	r2, [r7, #4]
 8004c76:	6812      	ldr	r2, [r2, #0]
 8004c78:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004c7a:	430b      	orrs	r3, r1
 8004c7c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	685b      	ldr	r3, [r3, #4]
 8004c84:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	68da      	ldr	r2, [r3, #12]
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	430a      	orrs	r2, r1
 8004c92:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	699b      	ldr	r3, [r3, #24]
 8004c98:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4ab5      	ldr	r2, [pc, #724]	; (8004f74 <UART_SetConfig+0x330>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d004      	beq.n	8004cae <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6a1b      	ldr	r3, [r3, #32]
 8004ca8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004caa:	4313      	orrs	r3, r2
 8004cac:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	689a      	ldr	r2, [r3, #8]
 8004cb4:	4bb0      	ldr	r3, [pc, #704]	; (8004f78 <UART_SetConfig+0x334>)
 8004cb6:	4013      	ands	r3, r2
 8004cb8:	687a      	ldr	r2, [r7, #4]
 8004cba:	6812      	ldr	r2, [r2, #0]
 8004cbc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004cbe:	430b      	orrs	r3, r1
 8004cc0:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cc8:	f023 010f 	bic.w	r1, r3, #15
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	430a      	orrs	r2, r1
 8004cd6:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4aa7      	ldr	r2, [pc, #668]	; (8004f7c <UART_SetConfig+0x338>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d176      	bne.n	8004dd0 <UART_SetConfig+0x18c>
 8004ce2:	4ba7      	ldr	r3, [pc, #668]	; (8004f80 <UART_SetConfig+0x33c>)
 8004ce4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ce6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004cea:	2b28      	cmp	r3, #40	; 0x28
 8004cec:	d86c      	bhi.n	8004dc8 <UART_SetConfig+0x184>
 8004cee:	a201      	add	r2, pc, #4	; (adr r2, 8004cf4 <UART_SetConfig+0xb0>)
 8004cf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cf4:	08004d99 	.word	0x08004d99
 8004cf8:	08004dc9 	.word	0x08004dc9
 8004cfc:	08004dc9 	.word	0x08004dc9
 8004d00:	08004dc9 	.word	0x08004dc9
 8004d04:	08004dc9 	.word	0x08004dc9
 8004d08:	08004dc9 	.word	0x08004dc9
 8004d0c:	08004dc9 	.word	0x08004dc9
 8004d10:	08004dc9 	.word	0x08004dc9
 8004d14:	08004da1 	.word	0x08004da1
 8004d18:	08004dc9 	.word	0x08004dc9
 8004d1c:	08004dc9 	.word	0x08004dc9
 8004d20:	08004dc9 	.word	0x08004dc9
 8004d24:	08004dc9 	.word	0x08004dc9
 8004d28:	08004dc9 	.word	0x08004dc9
 8004d2c:	08004dc9 	.word	0x08004dc9
 8004d30:	08004dc9 	.word	0x08004dc9
 8004d34:	08004da9 	.word	0x08004da9
 8004d38:	08004dc9 	.word	0x08004dc9
 8004d3c:	08004dc9 	.word	0x08004dc9
 8004d40:	08004dc9 	.word	0x08004dc9
 8004d44:	08004dc9 	.word	0x08004dc9
 8004d48:	08004dc9 	.word	0x08004dc9
 8004d4c:	08004dc9 	.word	0x08004dc9
 8004d50:	08004dc9 	.word	0x08004dc9
 8004d54:	08004db1 	.word	0x08004db1
 8004d58:	08004dc9 	.word	0x08004dc9
 8004d5c:	08004dc9 	.word	0x08004dc9
 8004d60:	08004dc9 	.word	0x08004dc9
 8004d64:	08004dc9 	.word	0x08004dc9
 8004d68:	08004dc9 	.word	0x08004dc9
 8004d6c:	08004dc9 	.word	0x08004dc9
 8004d70:	08004dc9 	.word	0x08004dc9
 8004d74:	08004db9 	.word	0x08004db9
 8004d78:	08004dc9 	.word	0x08004dc9
 8004d7c:	08004dc9 	.word	0x08004dc9
 8004d80:	08004dc9 	.word	0x08004dc9
 8004d84:	08004dc9 	.word	0x08004dc9
 8004d88:	08004dc9 	.word	0x08004dc9
 8004d8c:	08004dc9 	.word	0x08004dc9
 8004d90:	08004dc9 	.word	0x08004dc9
 8004d94:	08004dc1 	.word	0x08004dc1
 8004d98:	2301      	movs	r3, #1
 8004d9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004d9e:	e326      	b.n	80053ee <UART_SetConfig+0x7aa>
 8004da0:	2304      	movs	r3, #4
 8004da2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004da6:	e322      	b.n	80053ee <UART_SetConfig+0x7aa>
 8004da8:	2308      	movs	r3, #8
 8004daa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004dae:	e31e      	b.n	80053ee <UART_SetConfig+0x7aa>
 8004db0:	2310      	movs	r3, #16
 8004db2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004db6:	e31a      	b.n	80053ee <UART_SetConfig+0x7aa>
 8004db8:	2320      	movs	r3, #32
 8004dba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004dbe:	e316      	b.n	80053ee <UART_SetConfig+0x7aa>
 8004dc0:	2340      	movs	r3, #64	; 0x40
 8004dc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004dc6:	e312      	b.n	80053ee <UART_SetConfig+0x7aa>
 8004dc8:	2380      	movs	r3, #128	; 0x80
 8004dca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004dce:	e30e      	b.n	80053ee <UART_SetConfig+0x7aa>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4a6b      	ldr	r2, [pc, #428]	; (8004f84 <UART_SetConfig+0x340>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d130      	bne.n	8004e3c <UART_SetConfig+0x1f8>
 8004dda:	4b69      	ldr	r3, [pc, #420]	; (8004f80 <UART_SetConfig+0x33c>)
 8004ddc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dde:	f003 0307 	and.w	r3, r3, #7
 8004de2:	2b05      	cmp	r3, #5
 8004de4:	d826      	bhi.n	8004e34 <UART_SetConfig+0x1f0>
 8004de6:	a201      	add	r2, pc, #4	; (adr r2, 8004dec <UART_SetConfig+0x1a8>)
 8004de8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dec:	08004e05 	.word	0x08004e05
 8004df0:	08004e0d 	.word	0x08004e0d
 8004df4:	08004e15 	.word	0x08004e15
 8004df8:	08004e1d 	.word	0x08004e1d
 8004dfc:	08004e25 	.word	0x08004e25
 8004e00:	08004e2d 	.word	0x08004e2d
 8004e04:	2300      	movs	r3, #0
 8004e06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004e0a:	e2f0      	b.n	80053ee <UART_SetConfig+0x7aa>
 8004e0c:	2304      	movs	r3, #4
 8004e0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004e12:	e2ec      	b.n	80053ee <UART_SetConfig+0x7aa>
 8004e14:	2308      	movs	r3, #8
 8004e16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004e1a:	e2e8      	b.n	80053ee <UART_SetConfig+0x7aa>
 8004e1c:	2310      	movs	r3, #16
 8004e1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004e22:	e2e4      	b.n	80053ee <UART_SetConfig+0x7aa>
 8004e24:	2320      	movs	r3, #32
 8004e26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004e2a:	e2e0      	b.n	80053ee <UART_SetConfig+0x7aa>
 8004e2c:	2340      	movs	r3, #64	; 0x40
 8004e2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004e32:	e2dc      	b.n	80053ee <UART_SetConfig+0x7aa>
 8004e34:	2380      	movs	r3, #128	; 0x80
 8004e36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004e3a:	e2d8      	b.n	80053ee <UART_SetConfig+0x7aa>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4a51      	ldr	r2, [pc, #324]	; (8004f88 <UART_SetConfig+0x344>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d130      	bne.n	8004ea8 <UART_SetConfig+0x264>
 8004e46:	4b4e      	ldr	r3, [pc, #312]	; (8004f80 <UART_SetConfig+0x33c>)
 8004e48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e4a:	f003 0307 	and.w	r3, r3, #7
 8004e4e:	2b05      	cmp	r3, #5
 8004e50:	d826      	bhi.n	8004ea0 <UART_SetConfig+0x25c>
 8004e52:	a201      	add	r2, pc, #4	; (adr r2, 8004e58 <UART_SetConfig+0x214>)
 8004e54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e58:	08004e71 	.word	0x08004e71
 8004e5c:	08004e79 	.word	0x08004e79
 8004e60:	08004e81 	.word	0x08004e81
 8004e64:	08004e89 	.word	0x08004e89
 8004e68:	08004e91 	.word	0x08004e91
 8004e6c:	08004e99 	.word	0x08004e99
 8004e70:	2300      	movs	r3, #0
 8004e72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004e76:	e2ba      	b.n	80053ee <UART_SetConfig+0x7aa>
 8004e78:	2304      	movs	r3, #4
 8004e7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004e7e:	e2b6      	b.n	80053ee <UART_SetConfig+0x7aa>
 8004e80:	2308      	movs	r3, #8
 8004e82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004e86:	e2b2      	b.n	80053ee <UART_SetConfig+0x7aa>
 8004e88:	2310      	movs	r3, #16
 8004e8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004e8e:	e2ae      	b.n	80053ee <UART_SetConfig+0x7aa>
 8004e90:	2320      	movs	r3, #32
 8004e92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004e96:	e2aa      	b.n	80053ee <UART_SetConfig+0x7aa>
 8004e98:	2340      	movs	r3, #64	; 0x40
 8004e9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004e9e:	e2a6      	b.n	80053ee <UART_SetConfig+0x7aa>
 8004ea0:	2380      	movs	r3, #128	; 0x80
 8004ea2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004ea6:	e2a2      	b.n	80053ee <UART_SetConfig+0x7aa>
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4a37      	ldr	r2, [pc, #220]	; (8004f8c <UART_SetConfig+0x348>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d130      	bne.n	8004f14 <UART_SetConfig+0x2d0>
 8004eb2:	4b33      	ldr	r3, [pc, #204]	; (8004f80 <UART_SetConfig+0x33c>)
 8004eb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004eb6:	f003 0307 	and.w	r3, r3, #7
 8004eba:	2b05      	cmp	r3, #5
 8004ebc:	d826      	bhi.n	8004f0c <UART_SetConfig+0x2c8>
 8004ebe:	a201      	add	r2, pc, #4	; (adr r2, 8004ec4 <UART_SetConfig+0x280>)
 8004ec0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ec4:	08004edd 	.word	0x08004edd
 8004ec8:	08004ee5 	.word	0x08004ee5
 8004ecc:	08004eed 	.word	0x08004eed
 8004ed0:	08004ef5 	.word	0x08004ef5
 8004ed4:	08004efd 	.word	0x08004efd
 8004ed8:	08004f05 	.word	0x08004f05
 8004edc:	2300      	movs	r3, #0
 8004ede:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004ee2:	e284      	b.n	80053ee <UART_SetConfig+0x7aa>
 8004ee4:	2304      	movs	r3, #4
 8004ee6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004eea:	e280      	b.n	80053ee <UART_SetConfig+0x7aa>
 8004eec:	2308      	movs	r3, #8
 8004eee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004ef2:	e27c      	b.n	80053ee <UART_SetConfig+0x7aa>
 8004ef4:	2310      	movs	r3, #16
 8004ef6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004efa:	e278      	b.n	80053ee <UART_SetConfig+0x7aa>
 8004efc:	2320      	movs	r3, #32
 8004efe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004f02:	e274      	b.n	80053ee <UART_SetConfig+0x7aa>
 8004f04:	2340      	movs	r3, #64	; 0x40
 8004f06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004f0a:	e270      	b.n	80053ee <UART_SetConfig+0x7aa>
 8004f0c:	2380      	movs	r3, #128	; 0x80
 8004f0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004f12:	e26c      	b.n	80053ee <UART_SetConfig+0x7aa>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4a1d      	ldr	r2, [pc, #116]	; (8004f90 <UART_SetConfig+0x34c>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d142      	bne.n	8004fa4 <UART_SetConfig+0x360>
 8004f1e:	4b18      	ldr	r3, [pc, #96]	; (8004f80 <UART_SetConfig+0x33c>)
 8004f20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f22:	f003 0307 	and.w	r3, r3, #7
 8004f26:	2b05      	cmp	r3, #5
 8004f28:	d838      	bhi.n	8004f9c <UART_SetConfig+0x358>
 8004f2a:	a201      	add	r2, pc, #4	; (adr r2, 8004f30 <UART_SetConfig+0x2ec>)
 8004f2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f30:	08004f49 	.word	0x08004f49
 8004f34:	08004f51 	.word	0x08004f51
 8004f38:	08004f59 	.word	0x08004f59
 8004f3c:	08004f61 	.word	0x08004f61
 8004f40:	08004f69 	.word	0x08004f69
 8004f44:	08004f95 	.word	0x08004f95
 8004f48:	2300      	movs	r3, #0
 8004f4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004f4e:	e24e      	b.n	80053ee <UART_SetConfig+0x7aa>
 8004f50:	2304      	movs	r3, #4
 8004f52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004f56:	e24a      	b.n	80053ee <UART_SetConfig+0x7aa>
 8004f58:	2308      	movs	r3, #8
 8004f5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004f5e:	e246      	b.n	80053ee <UART_SetConfig+0x7aa>
 8004f60:	2310      	movs	r3, #16
 8004f62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004f66:	e242      	b.n	80053ee <UART_SetConfig+0x7aa>
 8004f68:	2320      	movs	r3, #32
 8004f6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004f6e:	e23e      	b.n	80053ee <UART_SetConfig+0x7aa>
 8004f70:	cfff69f3 	.word	0xcfff69f3
 8004f74:	58000c00 	.word	0x58000c00
 8004f78:	11fff4ff 	.word	0x11fff4ff
 8004f7c:	40011000 	.word	0x40011000
 8004f80:	58024400 	.word	0x58024400
 8004f84:	40004400 	.word	0x40004400
 8004f88:	40004800 	.word	0x40004800
 8004f8c:	40004c00 	.word	0x40004c00
 8004f90:	40005000 	.word	0x40005000
 8004f94:	2340      	movs	r3, #64	; 0x40
 8004f96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004f9a:	e228      	b.n	80053ee <UART_SetConfig+0x7aa>
 8004f9c:	2380      	movs	r3, #128	; 0x80
 8004f9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004fa2:	e224      	b.n	80053ee <UART_SetConfig+0x7aa>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4ab1      	ldr	r2, [pc, #708]	; (8005270 <UART_SetConfig+0x62c>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d176      	bne.n	800509c <UART_SetConfig+0x458>
 8004fae:	4bb1      	ldr	r3, [pc, #708]	; (8005274 <UART_SetConfig+0x630>)
 8004fb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fb2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004fb6:	2b28      	cmp	r3, #40	; 0x28
 8004fb8:	d86c      	bhi.n	8005094 <UART_SetConfig+0x450>
 8004fba:	a201      	add	r2, pc, #4	; (adr r2, 8004fc0 <UART_SetConfig+0x37c>)
 8004fbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fc0:	08005065 	.word	0x08005065
 8004fc4:	08005095 	.word	0x08005095
 8004fc8:	08005095 	.word	0x08005095
 8004fcc:	08005095 	.word	0x08005095
 8004fd0:	08005095 	.word	0x08005095
 8004fd4:	08005095 	.word	0x08005095
 8004fd8:	08005095 	.word	0x08005095
 8004fdc:	08005095 	.word	0x08005095
 8004fe0:	0800506d 	.word	0x0800506d
 8004fe4:	08005095 	.word	0x08005095
 8004fe8:	08005095 	.word	0x08005095
 8004fec:	08005095 	.word	0x08005095
 8004ff0:	08005095 	.word	0x08005095
 8004ff4:	08005095 	.word	0x08005095
 8004ff8:	08005095 	.word	0x08005095
 8004ffc:	08005095 	.word	0x08005095
 8005000:	08005075 	.word	0x08005075
 8005004:	08005095 	.word	0x08005095
 8005008:	08005095 	.word	0x08005095
 800500c:	08005095 	.word	0x08005095
 8005010:	08005095 	.word	0x08005095
 8005014:	08005095 	.word	0x08005095
 8005018:	08005095 	.word	0x08005095
 800501c:	08005095 	.word	0x08005095
 8005020:	0800507d 	.word	0x0800507d
 8005024:	08005095 	.word	0x08005095
 8005028:	08005095 	.word	0x08005095
 800502c:	08005095 	.word	0x08005095
 8005030:	08005095 	.word	0x08005095
 8005034:	08005095 	.word	0x08005095
 8005038:	08005095 	.word	0x08005095
 800503c:	08005095 	.word	0x08005095
 8005040:	08005085 	.word	0x08005085
 8005044:	08005095 	.word	0x08005095
 8005048:	08005095 	.word	0x08005095
 800504c:	08005095 	.word	0x08005095
 8005050:	08005095 	.word	0x08005095
 8005054:	08005095 	.word	0x08005095
 8005058:	08005095 	.word	0x08005095
 800505c:	08005095 	.word	0x08005095
 8005060:	0800508d 	.word	0x0800508d
 8005064:	2301      	movs	r3, #1
 8005066:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800506a:	e1c0      	b.n	80053ee <UART_SetConfig+0x7aa>
 800506c:	2304      	movs	r3, #4
 800506e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005072:	e1bc      	b.n	80053ee <UART_SetConfig+0x7aa>
 8005074:	2308      	movs	r3, #8
 8005076:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800507a:	e1b8      	b.n	80053ee <UART_SetConfig+0x7aa>
 800507c:	2310      	movs	r3, #16
 800507e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005082:	e1b4      	b.n	80053ee <UART_SetConfig+0x7aa>
 8005084:	2320      	movs	r3, #32
 8005086:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800508a:	e1b0      	b.n	80053ee <UART_SetConfig+0x7aa>
 800508c:	2340      	movs	r3, #64	; 0x40
 800508e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005092:	e1ac      	b.n	80053ee <UART_SetConfig+0x7aa>
 8005094:	2380      	movs	r3, #128	; 0x80
 8005096:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800509a:	e1a8      	b.n	80053ee <UART_SetConfig+0x7aa>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4a75      	ldr	r2, [pc, #468]	; (8005278 <UART_SetConfig+0x634>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d130      	bne.n	8005108 <UART_SetConfig+0x4c4>
 80050a6:	4b73      	ldr	r3, [pc, #460]	; (8005274 <UART_SetConfig+0x630>)
 80050a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050aa:	f003 0307 	and.w	r3, r3, #7
 80050ae:	2b05      	cmp	r3, #5
 80050b0:	d826      	bhi.n	8005100 <UART_SetConfig+0x4bc>
 80050b2:	a201      	add	r2, pc, #4	; (adr r2, 80050b8 <UART_SetConfig+0x474>)
 80050b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050b8:	080050d1 	.word	0x080050d1
 80050bc:	080050d9 	.word	0x080050d9
 80050c0:	080050e1 	.word	0x080050e1
 80050c4:	080050e9 	.word	0x080050e9
 80050c8:	080050f1 	.word	0x080050f1
 80050cc:	080050f9 	.word	0x080050f9
 80050d0:	2300      	movs	r3, #0
 80050d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80050d6:	e18a      	b.n	80053ee <UART_SetConfig+0x7aa>
 80050d8:	2304      	movs	r3, #4
 80050da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80050de:	e186      	b.n	80053ee <UART_SetConfig+0x7aa>
 80050e0:	2308      	movs	r3, #8
 80050e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80050e6:	e182      	b.n	80053ee <UART_SetConfig+0x7aa>
 80050e8:	2310      	movs	r3, #16
 80050ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80050ee:	e17e      	b.n	80053ee <UART_SetConfig+0x7aa>
 80050f0:	2320      	movs	r3, #32
 80050f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80050f6:	e17a      	b.n	80053ee <UART_SetConfig+0x7aa>
 80050f8:	2340      	movs	r3, #64	; 0x40
 80050fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80050fe:	e176      	b.n	80053ee <UART_SetConfig+0x7aa>
 8005100:	2380      	movs	r3, #128	; 0x80
 8005102:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005106:	e172      	b.n	80053ee <UART_SetConfig+0x7aa>
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4a5b      	ldr	r2, [pc, #364]	; (800527c <UART_SetConfig+0x638>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d130      	bne.n	8005174 <UART_SetConfig+0x530>
 8005112:	4b58      	ldr	r3, [pc, #352]	; (8005274 <UART_SetConfig+0x630>)
 8005114:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005116:	f003 0307 	and.w	r3, r3, #7
 800511a:	2b05      	cmp	r3, #5
 800511c:	d826      	bhi.n	800516c <UART_SetConfig+0x528>
 800511e:	a201      	add	r2, pc, #4	; (adr r2, 8005124 <UART_SetConfig+0x4e0>)
 8005120:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005124:	0800513d 	.word	0x0800513d
 8005128:	08005145 	.word	0x08005145
 800512c:	0800514d 	.word	0x0800514d
 8005130:	08005155 	.word	0x08005155
 8005134:	0800515d 	.word	0x0800515d
 8005138:	08005165 	.word	0x08005165
 800513c:	2300      	movs	r3, #0
 800513e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005142:	e154      	b.n	80053ee <UART_SetConfig+0x7aa>
 8005144:	2304      	movs	r3, #4
 8005146:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800514a:	e150      	b.n	80053ee <UART_SetConfig+0x7aa>
 800514c:	2308      	movs	r3, #8
 800514e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005152:	e14c      	b.n	80053ee <UART_SetConfig+0x7aa>
 8005154:	2310      	movs	r3, #16
 8005156:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800515a:	e148      	b.n	80053ee <UART_SetConfig+0x7aa>
 800515c:	2320      	movs	r3, #32
 800515e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005162:	e144      	b.n	80053ee <UART_SetConfig+0x7aa>
 8005164:	2340      	movs	r3, #64	; 0x40
 8005166:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800516a:	e140      	b.n	80053ee <UART_SetConfig+0x7aa>
 800516c:	2380      	movs	r3, #128	; 0x80
 800516e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005172:	e13c      	b.n	80053ee <UART_SetConfig+0x7aa>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4a41      	ldr	r2, [pc, #260]	; (8005280 <UART_SetConfig+0x63c>)
 800517a:	4293      	cmp	r3, r2
 800517c:	f040 8082 	bne.w	8005284 <UART_SetConfig+0x640>
 8005180:	4b3c      	ldr	r3, [pc, #240]	; (8005274 <UART_SetConfig+0x630>)
 8005182:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005184:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005188:	2b28      	cmp	r3, #40	; 0x28
 800518a:	d86d      	bhi.n	8005268 <UART_SetConfig+0x624>
 800518c:	a201      	add	r2, pc, #4	; (adr r2, 8005194 <UART_SetConfig+0x550>)
 800518e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005192:	bf00      	nop
 8005194:	08005239 	.word	0x08005239
 8005198:	08005269 	.word	0x08005269
 800519c:	08005269 	.word	0x08005269
 80051a0:	08005269 	.word	0x08005269
 80051a4:	08005269 	.word	0x08005269
 80051a8:	08005269 	.word	0x08005269
 80051ac:	08005269 	.word	0x08005269
 80051b0:	08005269 	.word	0x08005269
 80051b4:	08005241 	.word	0x08005241
 80051b8:	08005269 	.word	0x08005269
 80051bc:	08005269 	.word	0x08005269
 80051c0:	08005269 	.word	0x08005269
 80051c4:	08005269 	.word	0x08005269
 80051c8:	08005269 	.word	0x08005269
 80051cc:	08005269 	.word	0x08005269
 80051d0:	08005269 	.word	0x08005269
 80051d4:	08005249 	.word	0x08005249
 80051d8:	08005269 	.word	0x08005269
 80051dc:	08005269 	.word	0x08005269
 80051e0:	08005269 	.word	0x08005269
 80051e4:	08005269 	.word	0x08005269
 80051e8:	08005269 	.word	0x08005269
 80051ec:	08005269 	.word	0x08005269
 80051f0:	08005269 	.word	0x08005269
 80051f4:	08005251 	.word	0x08005251
 80051f8:	08005269 	.word	0x08005269
 80051fc:	08005269 	.word	0x08005269
 8005200:	08005269 	.word	0x08005269
 8005204:	08005269 	.word	0x08005269
 8005208:	08005269 	.word	0x08005269
 800520c:	08005269 	.word	0x08005269
 8005210:	08005269 	.word	0x08005269
 8005214:	08005259 	.word	0x08005259
 8005218:	08005269 	.word	0x08005269
 800521c:	08005269 	.word	0x08005269
 8005220:	08005269 	.word	0x08005269
 8005224:	08005269 	.word	0x08005269
 8005228:	08005269 	.word	0x08005269
 800522c:	08005269 	.word	0x08005269
 8005230:	08005269 	.word	0x08005269
 8005234:	08005261 	.word	0x08005261
 8005238:	2301      	movs	r3, #1
 800523a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800523e:	e0d6      	b.n	80053ee <UART_SetConfig+0x7aa>
 8005240:	2304      	movs	r3, #4
 8005242:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005246:	e0d2      	b.n	80053ee <UART_SetConfig+0x7aa>
 8005248:	2308      	movs	r3, #8
 800524a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800524e:	e0ce      	b.n	80053ee <UART_SetConfig+0x7aa>
 8005250:	2310      	movs	r3, #16
 8005252:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005256:	e0ca      	b.n	80053ee <UART_SetConfig+0x7aa>
 8005258:	2320      	movs	r3, #32
 800525a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800525e:	e0c6      	b.n	80053ee <UART_SetConfig+0x7aa>
 8005260:	2340      	movs	r3, #64	; 0x40
 8005262:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005266:	e0c2      	b.n	80053ee <UART_SetConfig+0x7aa>
 8005268:	2380      	movs	r3, #128	; 0x80
 800526a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800526e:	e0be      	b.n	80053ee <UART_SetConfig+0x7aa>
 8005270:	40011400 	.word	0x40011400
 8005274:	58024400 	.word	0x58024400
 8005278:	40007800 	.word	0x40007800
 800527c:	40007c00 	.word	0x40007c00
 8005280:	40011800 	.word	0x40011800
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4aad      	ldr	r2, [pc, #692]	; (8005540 <UART_SetConfig+0x8fc>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d176      	bne.n	800537c <UART_SetConfig+0x738>
 800528e:	4bad      	ldr	r3, [pc, #692]	; (8005544 <UART_SetConfig+0x900>)
 8005290:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005292:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005296:	2b28      	cmp	r3, #40	; 0x28
 8005298:	d86c      	bhi.n	8005374 <UART_SetConfig+0x730>
 800529a:	a201      	add	r2, pc, #4	; (adr r2, 80052a0 <UART_SetConfig+0x65c>)
 800529c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052a0:	08005345 	.word	0x08005345
 80052a4:	08005375 	.word	0x08005375
 80052a8:	08005375 	.word	0x08005375
 80052ac:	08005375 	.word	0x08005375
 80052b0:	08005375 	.word	0x08005375
 80052b4:	08005375 	.word	0x08005375
 80052b8:	08005375 	.word	0x08005375
 80052bc:	08005375 	.word	0x08005375
 80052c0:	0800534d 	.word	0x0800534d
 80052c4:	08005375 	.word	0x08005375
 80052c8:	08005375 	.word	0x08005375
 80052cc:	08005375 	.word	0x08005375
 80052d0:	08005375 	.word	0x08005375
 80052d4:	08005375 	.word	0x08005375
 80052d8:	08005375 	.word	0x08005375
 80052dc:	08005375 	.word	0x08005375
 80052e0:	08005355 	.word	0x08005355
 80052e4:	08005375 	.word	0x08005375
 80052e8:	08005375 	.word	0x08005375
 80052ec:	08005375 	.word	0x08005375
 80052f0:	08005375 	.word	0x08005375
 80052f4:	08005375 	.word	0x08005375
 80052f8:	08005375 	.word	0x08005375
 80052fc:	08005375 	.word	0x08005375
 8005300:	0800535d 	.word	0x0800535d
 8005304:	08005375 	.word	0x08005375
 8005308:	08005375 	.word	0x08005375
 800530c:	08005375 	.word	0x08005375
 8005310:	08005375 	.word	0x08005375
 8005314:	08005375 	.word	0x08005375
 8005318:	08005375 	.word	0x08005375
 800531c:	08005375 	.word	0x08005375
 8005320:	08005365 	.word	0x08005365
 8005324:	08005375 	.word	0x08005375
 8005328:	08005375 	.word	0x08005375
 800532c:	08005375 	.word	0x08005375
 8005330:	08005375 	.word	0x08005375
 8005334:	08005375 	.word	0x08005375
 8005338:	08005375 	.word	0x08005375
 800533c:	08005375 	.word	0x08005375
 8005340:	0800536d 	.word	0x0800536d
 8005344:	2301      	movs	r3, #1
 8005346:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800534a:	e050      	b.n	80053ee <UART_SetConfig+0x7aa>
 800534c:	2304      	movs	r3, #4
 800534e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005352:	e04c      	b.n	80053ee <UART_SetConfig+0x7aa>
 8005354:	2308      	movs	r3, #8
 8005356:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800535a:	e048      	b.n	80053ee <UART_SetConfig+0x7aa>
 800535c:	2310      	movs	r3, #16
 800535e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005362:	e044      	b.n	80053ee <UART_SetConfig+0x7aa>
 8005364:	2320      	movs	r3, #32
 8005366:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800536a:	e040      	b.n	80053ee <UART_SetConfig+0x7aa>
 800536c:	2340      	movs	r3, #64	; 0x40
 800536e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005372:	e03c      	b.n	80053ee <UART_SetConfig+0x7aa>
 8005374:	2380      	movs	r3, #128	; 0x80
 8005376:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800537a:	e038      	b.n	80053ee <UART_SetConfig+0x7aa>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	4a71      	ldr	r2, [pc, #452]	; (8005548 <UART_SetConfig+0x904>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d130      	bne.n	80053e8 <UART_SetConfig+0x7a4>
 8005386:	4b6f      	ldr	r3, [pc, #444]	; (8005544 <UART_SetConfig+0x900>)
 8005388:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800538a:	f003 0307 	and.w	r3, r3, #7
 800538e:	2b05      	cmp	r3, #5
 8005390:	d826      	bhi.n	80053e0 <UART_SetConfig+0x79c>
 8005392:	a201      	add	r2, pc, #4	; (adr r2, 8005398 <UART_SetConfig+0x754>)
 8005394:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005398:	080053b1 	.word	0x080053b1
 800539c:	080053b9 	.word	0x080053b9
 80053a0:	080053c1 	.word	0x080053c1
 80053a4:	080053c9 	.word	0x080053c9
 80053a8:	080053d1 	.word	0x080053d1
 80053ac:	080053d9 	.word	0x080053d9
 80053b0:	2302      	movs	r3, #2
 80053b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80053b6:	e01a      	b.n	80053ee <UART_SetConfig+0x7aa>
 80053b8:	2304      	movs	r3, #4
 80053ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80053be:	e016      	b.n	80053ee <UART_SetConfig+0x7aa>
 80053c0:	2308      	movs	r3, #8
 80053c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80053c6:	e012      	b.n	80053ee <UART_SetConfig+0x7aa>
 80053c8:	2310      	movs	r3, #16
 80053ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80053ce:	e00e      	b.n	80053ee <UART_SetConfig+0x7aa>
 80053d0:	2320      	movs	r3, #32
 80053d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80053d6:	e00a      	b.n	80053ee <UART_SetConfig+0x7aa>
 80053d8:	2340      	movs	r3, #64	; 0x40
 80053da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80053de:	e006      	b.n	80053ee <UART_SetConfig+0x7aa>
 80053e0:	2380      	movs	r3, #128	; 0x80
 80053e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80053e6:	e002      	b.n	80053ee <UART_SetConfig+0x7aa>
 80053e8:	2380      	movs	r3, #128	; 0x80
 80053ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4a55      	ldr	r2, [pc, #340]	; (8005548 <UART_SetConfig+0x904>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	f040 80f0 	bne.w	80055da <UART_SetConfig+0x996>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80053fa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80053fe:	2b20      	cmp	r3, #32
 8005400:	dc46      	bgt.n	8005490 <UART_SetConfig+0x84c>
 8005402:	2b02      	cmp	r3, #2
 8005404:	db75      	blt.n	80054f2 <UART_SetConfig+0x8ae>
 8005406:	3b02      	subs	r3, #2
 8005408:	2b1e      	cmp	r3, #30
 800540a:	d872      	bhi.n	80054f2 <UART_SetConfig+0x8ae>
 800540c:	a201      	add	r2, pc, #4	; (adr r2, 8005414 <UART_SetConfig+0x7d0>)
 800540e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005412:	bf00      	nop
 8005414:	08005497 	.word	0x08005497
 8005418:	080054f3 	.word	0x080054f3
 800541c:	0800549f 	.word	0x0800549f
 8005420:	080054f3 	.word	0x080054f3
 8005424:	080054f3 	.word	0x080054f3
 8005428:	080054f3 	.word	0x080054f3
 800542c:	080054af 	.word	0x080054af
 8005430:	080054f3 	.word	0x080054f3
 8005434:	080054f3 	.word	0x080054f3
 8005438:	080054f3 	.word	0x080054f3
 800543c:	080054f3 	.word	0x080054f3
 8005440:	080054f3 	.word	0x080054f3
 8005444:	080054f3 	.word	0x080054f3
 8005448:	080054f3 	.word	0x080054f3
 800544c:	080054bf 	.word	0x080054bf
 8005450:	080054f3 	.word	0x080054f3
 8005454:	080054f3 	.word	0x080054f3
 8005458:	080054f3 	.word	0x080054f3
 800545c:	080054f3 	.word	0x080054f3
 8005460:	080054f3 	.word	0x080054f3
 8005464:	080054f3 	.word	0x080054f3
 8005468:	080054f3 	.word	0x080054f3
 800546c:	080054f3 	.word	0x080054f3
 8005470:	080054f3 	.word	0x080054f3
 8005474:	080054f3 	.word	0x080054f3
 8005478:	080054f3 	.word	0x080054f3
 800547c:	080054f3 	.word	0x080054f3
 8005480:	080054f3 	.word	0x080054f3
 8005484:	080054f3 	.word	0x080054f3
 8005488:	080054f3 	.word	0x080054f3
 800548c:	080054e5 	.word	0x080054e5
 8005490:	2b40      	cmp	r3, #64	; 0x40
 8005492:	d02a      	beq.n	80054ea <UART_SetConfig+0x8a6>
 8005494:	e02d      	b.n	80054f2 <UART_SetConfig+0x8ae>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8005496:	f7fe fecd 	bl	8004234 <HAL_RCCEx_GetD3PCLK1Freq>
 800549a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800549c:	e02f      	b.n	80054fe <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800549e:	f107 0314 	add.w	r3, r7, #20
 80054a2:	4618      	mov	r0, r3
 80054a4:	f7fe fedc 	bl	8004260 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80054a8:	69bb      	ldr	r3, [r7, #24]
 80054aa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80054ac:	e027      	b.n	80054fe <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80054ae:	f107 0308 	add.w	r3, r7, #8
 80054b2:	4618      	mov	r0, r3
 80054b4:	f7ff f828 	bl	8004508 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80054bc:	e01f      	b.n	80054fe <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80054be:	4b21      	ldr	r3, [pc, #132]	; (8005544 <UART_SetConfig+0x900>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f003 0320 	and.w	r3, r3, #32
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d009      	beq.n	80054de <UART_SetConfig+0x89a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80054ca:	4b1e      	ldr	r3, [pc, #120]	; (8005544 <UART_SetConfig+0x900>)
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	08db      	lsrs	r3, r3, #3
 80054d0:	f003 0303 	and.w	r3, r3, #3
 80054d4:	4a1d      	ldr	r2, [pc, #116]	; (800554c <UART_SetConfig+0x908>)
 80054d6:	fa22 f303 	lsr.w	r3, r2, r3
 80054da:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80054dc:	e00f      	b.n	80054fe <UART_SetConfig+0x8ba>
          pclk = (uint32_t) HSI_VALUE;
 80054de:	4b1b      	ldr	r3, [pc, #108]	; (800554c <UART_SetConfig+0x908>)
 80054e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80054e2:	e00c      	b.n	80054fe <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80054e4:	4b1a      	ldr	r3, [pc, #104]	; (8005550 <UART_SetConfig+0x90c>)
 80054e6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80054e8:	e009      	b.n	80054fe <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80054ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80054ee:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80054f0:	e005      	b.n	80054fe <UART_SetConfig+0x8ba>
      default:
        pclk = 0U;
 80054f2:	2300      	movs	r3, #0
 80054f4:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80054f6:	2301      	movs	r3, #1
 80054f8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80054fc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80054fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005500:	2b00      	cmp	r3, #0
 8005502:	f000 81e6 	beq.w	80058d2 <UART_SetConfig+0xc8e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800550a:	4a12      	ldr	r2, [pc, #72]	; (8005554 <UART_SetConfig+0x910>)
 800550c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005510:	461a      	mov	r2, r3
 8005512:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005514:	fbb3 f3f2 	udiv	r3, r3, r2
 8005518:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	685a      	ldr	r2, [r3, #4]
 800551e:	4613      	mov	r3, r2
 8005520:	005b      	lsls	r3, r3, #1
 8005522:	4413      	add	r3, r2
 8005524:	6a3a      	ldr	r2, [r7, #32]
 8005526:	429a      	cmp	r2, r3
 8005528:	d305      	bcc.n	8005536 <UART_SetConfig+0x8f2>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	685b      	ldr	r3, [r3, #4]
 800552e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005530:	6a3a      	ldr	r2, [r7, #32]
 8005532:	429a      	cmp	r2, r3
 8005534:	d910      	bls.n	8005558 <UART_SetConfig+0x914>
      {
        ret = HAL_ERROR;
 8005536:	2301      	movs	r3, #1
 8005538:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800553c:	e1c9      	b.n	80058d2 <UART_SetConfig+0xc8e>
 800553e:	bf00      	nop
 8005540:	40011c00 	.word	0x40011c00
 8005544:	58024400 	.word	0x58024400
 8005548:	58000c00 	.word	0x58000c00
 800554c:	03d09000 	.word	0x03d09000
 8005550:	003d0900 	.word	0x003d0900
 8005554:	08006f2c 	.word	0x08006f2c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800555a:	4618      	mov	r0, r3
 800555c:	f04f 0100 	mov.w	r1, #0
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005564:	4ac1      	ldr	r2, [pc, #772]	; (800586c <UART_SetConfig+0xc28>)
 8005566:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800556a:	b29a      	uxth	r2, r3
 800556c:	f04f 0300 	mov.w	r3, #0
 8005570:	f7fa ff0e 	bl	8000390 <__aeabi_uldivmod>
 8005574:	4602      	mov	r2, r0
 8005576:	460b      	mov	r3, r1
 8005578:	4610      	mov	r0, r2
 800557a:	4619      	mov	r1, r3
 800557c:	f04f 0200 	mov.w	r2, #0
 8005580:	f04f 0300 	mov.w	r3, #0
 8005584:	020b      	lsls	r3, r1, #8
 8005586:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800558a:	0202      	lsls	r2, r0, #8
 800558c:	6879      	ldr	r1, [r7, #4]
 800558e:	6849      	ldr	r1, [r1, #4]
 8005590:	0849      	lsrs	r1, r1, #1
 8005592:	4608      	mov	r0, r1
 8005594:	f04f 0100 	mov.w	r1, #0
 8005598:	1814      	adds	r4, r2, r0
 800559a:	eb43 0501 	adc.w	r5, r3, r1
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	685b      	ldr	r3, [r3, #4]
 80055a2:	461a      	mov	r2, r3
 80055a4:	f04f 0300 	mov.w	r3, #0
 80055a8:	4620      	mov	r0, r4
 80055aa:	4629      	mov	r1, r5
 80055ac:	f7fa fef0 	bl	8000390 <__aeabi_uldivmod>
 80055b0:	4602      	mov	r2, r0
 80055b2:	460b      	mov	r3, r1
 80055b4:	4613      	mov	r3, r2
 80055b6:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80055b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055ba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80055be:	d308      	bcc.n	80055d2 <UART_SetConfig+0x98e>
 80055c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80055c6:	d204      	bcs.n	80055d2 <UART_SetConfig+0x98e>
        {
          huart->Instance->BRR = usartdiv;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80055ce:	60da      	str	r2, [r3, #12]
 80055d0:	e17f      	b.n	80058d2 <UART_SetConfig+0xc8e>
        }
        else
        {
          ret = HAL_ERROR;
 80055d2:	2301      	movs	r3, #1
 80055d4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80055d8:	e17b      	b.n	80058d2 <UART_SetConfig+0xc8e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	69db      	ldr	r3, [r3, #28]
 80055de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055e2:	f040 80bd 	bne.w	8005760 <UART_SetConfig+0xb1c>
  {
    switch (clocksource)
 80055e6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80055ea:	2b20      	cmp	r3, #32
 80055ec:	dc48      	bgt.n	8005680 <UART_SetConfig+0xa3c>
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	db7b      	blt.n	80056ea <UART_SetConfig+0xaa6>
 80055f2:	2b20      	cmp	r3, #32
 80055f4:	d879      	bhi.n	80056ea <UART_SetConfig+0xaa6>
 80055f6:	a201      	add	r2, pc, #4	; (adr r2, 80055fc <UART_SetConfig+0x9b8>)
 80055f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055fc:	08005687 	.word	0x08005687
 8005600:	0800568f 	.word	0x0800568f
 8005604:	080056eb 	.word	0x080056eb
 8005608:	080056eb 	.word	0x080056eb
 800560c:	08005697 	.word	0x08005697
 8005610:	080056eb 	.word	0x080056eb
 8005614:	080056eb 	.word	0x080056eb
 8005618:	080056eb 	.word	0x080056eb
 800561c:	080056a7 	.word	0x080056a7
 8005620:	080056eb 	.word	0x080056eb
 8005624:	080056eb 	.word	0x080056eb
 8005628:	080056eb 	.word	0x080056eb
 800562c:	080056eb 	.word	0x080056eb
 8005630:	080056eb 	.word	0x080056eb
 8005634:	080056eb 	.word	0x080056eb
 8005638:	080056eb 	.word	0x080056eb
 800563c:	080056b7 	.word	0x080056b7
 8005640:	080056eb 	.word	0x080056eb
 8005644:	080056eb 	.word	0x080056eb
 8005648:	080056eb 	.word	0x080056eb
 800564c:	080056eb 	.word	0x080056eb
 8005650:	080056eb 	.word	0x080056eb
 8005654:	080056eb 	.word	0x080056eb
 8005658:	080056eb 	.word	0x080056eb
 800565c:	080056eb 	.word	0x080056eb
 8005660:	080056eb 	.word	0x080056eb
 8005664:	080056eb 	.word	0x080056eb
 8005668:	080056eb 	.word	0x080056eb
 800566c:	080056eb 	.word	0x080056eb
 8005670:	080056eb 	.word	0x080056eb
 8005674:	080056eb 	.word	0x080056eb
 8005678:	080056eb 	.word	0x080056eb
 800567c:	080056dd 	.word	0x080056dd
 8005680:	2b40      	cmp	r3, #64	; 0x40
 8005682:	d02e      	beq.n	80056e2 <UART_SetConfig+0xa9e>
 8005684:	e031      	b.n	80056ea <UART_SetConfig+0xaa6>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005686:	f7fd fe9d 	bl	80033c4 <HAL_RCC_GetPCLK1Freq>
 800568a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800568c:	e033      	b.n	80056f6 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800568e:	f7fd feaf 	bl	80033f0 <HAL_RCC_GetPCLK2Freq>
 8005692:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005694:	e02f      	b.n	80056f6 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005696:	f107 0314 	add.w	r3, r7, #20
 800569a:	4618      	mov	r0, r3
 800569c:	f7fe fde0 	bl	8004260 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80056a0:	69bb      	ldr	r3, [r7, #24]
 80056a2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80056a4:	e027      	b.n	80056f6 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80056a6:	f107 0308 	add.w	r3, r7, #8
 80056aa:	4618      	mov	r0, r3
 80056ac:	f7fe ff2c 	bl	8004508 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80056b4:	e01f      	b.n	80056f6 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80056b6:	4b6e      	ldr	r3, [pc, #440]	; (8005870 <UART_SetConfig+0xc2c>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f003 0320 	and.w	r3, r3, #32
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d009      	beq.n	80056d6 <UART_SetConfig+0xa92>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80056c2:	4b6b      	ldr	r3, [pc, #428]	; (8005870 <UART_SetConfig+0xc2c>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	08db      	lsrs	r3, r3, #3
 80056c8:	f003 0303 	and.w	r3, r3, #3
 80056cc:	4a69      	ldr	r2, [pc, #420]	; (8005874 <UART_SetConfig+0xc30>)
 80056ce:	fa22 f303 	lsr.w	r3, r2, r3
 80056d2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80056d4:	e00f      	b.n	80056f6 <UART_SetConfig+0xab2>
          pclk = (uint32_t) HSI_VALUE;
 80056d6:	4b67      	ldr	r3, [pc, #412]	; (8005874 <UART_SetConfig+0xc30>)
 80056d8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80056da:	e00c      	b.n	80056f6 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80056dc:	4b66      	ldr	r3, [pc, #408]	; (8005878 <UART_SetConfig+0xc34>)
 80056de:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80056e0:	e009      	b.n	80056f6 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80056e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80056e6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80056e8:	e005      	b.n	80056f6 <UART_SetConfig+0xab2>
      default:
        pclk = 0U;
 80056ea:	2300      	movs	r3, #0
 80056ec:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80056ee:	2301      	movs	r3, #1
 80056f0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80056f4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80056f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	f000 80ea 	beq.w	80058d2 <UART_SetConfig+0xc8e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005702:	4a5a      	ldr	r2, [pc, #360]	; (800586c <UART_SetConfig+0xc28>)
 8005704:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005708:	461a      	mov	r2, r3
 800570a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800570c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005710:	005a      	lsls	r2, r3, #1
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	685b      	ldr	r3, [r3, #4]
 8005716:	085b      	lsrs	r3, r3, #1
 8005718:	441a      	add	r2, r3
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	685b      	ldr	r3, [r3, #4]
 800571e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005722:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005726:	2b0f      	cmp	r3, #15
 8005728:	d916      	bls.n	8005758 <UART_SetConfig+0xb14>
 800572a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800572c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005730:	d212      	bcs.n	8005758 <UART_SetConfig+0xb14>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005734:	b29b      	uxth	r3, r3
 8005736:	f023 030f 	bic.w	r3, r3, #15
 800573a:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800573c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800573e:	085b      	lsrs	r3, r3, #1
 8005740:	b29b      	uxth	r3, r3
 8005742:	f003 0307 	and.w	r3, r3, #7
 8005746:	b29a      	uxth	r2, r3
 8005748:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800574a:	4313      	orrs	r3, r2
 800574c:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005754:	60da      	str	r2, [r3, #12]
 8005756:	e0bc      	b.n	80058d2 <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 8005758:	2301      	movs	r3, #1
 800575a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800575e:	e0b8      	b.n	80058d2 <UART_SetConfig+0xc8e>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005760:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005764:	2b20      	cmp	r3, #32
 8005766:	dc4b      	bgt.n	8005800 <UART_SetConfig+0xbbc>
 8005768:	2b00      	cmp	r3, #0
 800576a:	f2c0 8087 	blt.w	800587c <UART_SetConfig+0xc38>
 800576e:	2b20      	cmp	r3, #32
 8005770:	f200 8084 	bhi.w	800587c <UART_SetConfig+0xc38>
 8005774:	a201      	add	r2, pc, #4	; (adr r2, 800577c <UART_SetConfig+0xb38>)
 8005776:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800577a:	bf00      	nop
 800577c:	08005807 	.word	0x08005807
 8005780:	0800580f 	.word	0x0800580f
 8005784:	0800587d 	.word	0x0800587d
 8005788:	0800587d 	.word	0x0800587d
 800578c:	08005817 	.word	0x08005817
 8005790:	0800587d 	.word	0x0800587d
 8005794:	0800587d 	.word	0x0800587d
 8005798:	0800587d 	.word	0x0800587d
 800579c:	08005827 	.word	0x08005827
 80057a0:	0800587d 	.word	0x0800587d
 80057a4:	0800587d 	.word	0x0800587d
 80057a8:	0800587d 	.word	0x0800587d
 80057ac:	0800587d 	.word	0x0800587d
 80057b0:	0800587d 	.word	0x0800587d
 80057b4:	0800587d 	.word	0x0800587d
 80057b8:	0800587d 	.word	0x0800587d
 80057bc:	08005837 	.word	0x08005837
 80057c0:	0800587d 	.word	0x0800587d
 80057c4:	0800587d 	.word	0x0800587d
 80057c8:	0800587d 	.word	0x0800587d
 80057cc:	0800587d 	.word	0x0800587d
 80057d0:	0800587d 	.word	0x0800587d
 80057d4:	0800587d 	.word	0x0800587d
 80057d8:	0800587d 	.word	0x0800587d
 80057dc:	0800587d 	.word	0x0800587d
 80057e0:	0800587d 	.word	0x0800587d
 80057e4:	0800587d 	.word	0x0800587d
 80057e8:	0800587d 	.word	0x0800587d
 80057ec:	0800587d 	.word	0x0800587d
 80057f0:	0800587d 	.word	0x0800587d
 80057f4:	0800587d 	.word	0x0800587d
 80057f8:	0800587d 	.word	0x0800587d
 80057fc:	0800585d 	.word	0x0800585d
 8005800:	2b40      	cmp	r3, #64	; 0x40
 8005802:	d02e      	beq.n	8005862 <UART_SetConfig+0xc1e>
 8005804:	e03a      	b.n	800587c <UART_SetConfig+0xc38>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005806:	f7fd fddd 	bl	80033c4 <HAL_RCC_GetPCLK1Freq>
 800580a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800580c:	e03c      	b.n	8005888 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800580e:	f7fd fdef 	bl	80033f0 <HAL_RCC_GetPCLK2Freq>
 8005812:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005814:	e038      	b.n	8005888 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005816:	f107 0314 	add.w	r3, r7, #20
 800581a:	4618      	mov	r0, r3
 800581c:	f7fe fd20 	bl	8004260 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005820:	69bb      	ldr	r3, [r7, #24]
 8005822:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005824:	e030      	b.n	8005888 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005826:	f107 0308 	add.w	r3, r7, #8
 800582a:	4618      	mov	r0, r3
 800582c:	f7fe fe6c 	bl	8004508 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005834:	e028      	b.n	8005888 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005836:	4b0e      	ldr	r3, [pc, #56]	; (8005870 <UART_SetConfig+0xc2c>)
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f003 0320 	and.w	r3, r3, #32
 800583e:	2b00      	cmp	r3, #0
 8005840:	d009      	beq.n	8005856 <UART_SetConfig+0xc12>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005842:	4b0b      	ldr	r3, [pc, #44]	; (8005870 <UART_SetConfig+0xc2c>)
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	08db      	lsrs	r3, r3, #3
 8005848:	f003 0303 	and.w	r3, r3, #3
 800584c:	4a09      	ldr	r2, [pc, #36]	; (8005874 <UART_SetConfig+0xc30>)
 800584e:	fa22 f303 	lsr.w	r3, r2, r3
 8005852:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005854:	e018      	b.n	8005888 <UART_SetConfig+0xc44>
          pclk = (uint32_t) HSI_VALUE;
 8005856:	4b07      	ldr	r3, [pc, #28]	; (8005874 <UART_SetConfig+0xc30>)
 8005858:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800585a:	e015      	b.n	8005888 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800585c:	4b06      	ldr	r3, [pc, #24]	; (8005878 <UART_SetConfig+0xc34>)
 800585e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005860:	e012      	b.n	8005888 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005862:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005866:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005868:	e00e      	b.n	8005888 <UART_SetConfig+0xc44>
 800586a:	bf00      	nop
 800586c:	08006f2c 	.word	0x08006f2c
 8005870:	58024400 	.word	0x58024400
 8005874:	03d09000 	.word	0x03d09000
 8005878:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 800587c:	2300      	movs	r3, #0
 800587e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005880:	2301      	movs	r3, #1
 8005882:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8005886:	bf00      	nop
    }

    if (pclk != 0U)
 8005888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800588a:	2b00      	cmp	r3, #0
 800588c:	d021      	beq.n	80058d2 <UART_SetConfig+0xc8e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005892:	4a1a      	ldr	r2, [pc, #104]	; (80058fc <UART_SetConfig+0xcb8>)
 8005894:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005898:	461a      	mov	r2, r3
 800589a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800589c:	fbb3 f2f2 	udiv	r2, r3, r2
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	685b      	ldr	r3, [r3, #4]
 80058a4:	085b      	lsrs	r3, r3, #1
 80058a6:	441a      	add	r2, r3
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	685b      	ldr	r3, [r3, #4]
 80058ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80058b0:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80058b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058b4:	2b0f      	cmp	r3, #15
 80058b6:	d909      	bls.n	80058cc <UART_SetConfig+0xc88>
 80058b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058be:	d205      	bcs.n	80058cc <UART_SetConfig+0xc88>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80058c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058c2:	b29a      	uxth	r2, r3
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	60da      	str	r2, [r3, #12]
 80058ca:	e002      	b.n	80058d2 <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 80058cc:	2301      	movs	r3, #1
 80058ce:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2201      	movs	r2, #1
 80058d6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2201      	movs	r2, #1
 80058de:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2200      	movs	r2, #0
 80058e6:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2200      	movs	r2, #0
 80058ec:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80058ee:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 80058f2:	4618      	mov	r0, r3
 80058f4:	3738      	adds	r7, #56	; 0x38
 80058f6:	46bd      	mov	sp, r7
 80058f8:	bdb0      	pop	{r4, r5, r7, pc}
 80058fa:	bf00      	nop
 80058fc:	08006f2c 	.word	0x08006f2c

08005900 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005900:	b480      	push	{r7}
 8005902:	b083      	sub	sp, #12
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800590c:	f003 0301 	and.w	r3, r3, #1
 8005910:	2b00      	cmp	r3, #0
 8005912:	d00a      	beq.n	800592a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	685b      	ldr	r3, [r3, #4]
 800591a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	430a      	orrs	r2, r1
 8005928:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800592e:	f003 0302 	and.w	r3, r3, #2
 8005932:	2b00      	cmp	r3, #0
 8005934:	d00a      	beq.n	800594c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	685b      	ldr	r3, [r3, #4]
 800593c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	430a      	orrs	r2, r1
 800594a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005950:	f003 0304 	and.w	r3, r3, #4
 8005954:	2b00      	cmp	r3, #0
 8005956:	d00a      	beq.n	800596e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	685b      	ldr	r3, [r3, #4]
 800595e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	430a      	orrs	r2, r1
 800596c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005972:	f003 0308 	and.w	r3, r3, #8
 8005976:	2b00      	cmp	r3, #0
 8005978:	d00a      	beq.n	8005990 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	685b      	ldr	r3, [r3, #4]
 8005980:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	430a      	orrs	r2, r1
 800598e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005994:	f003 0310 	and.w	r3, r3, #16
 8005998:	2b00      	cmp	r3, #0
 800599a:	d00a      	beq.n	80059b2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	689b      	ldr	r3, [r3, #8]
 80059a2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	430a      	orrs	r2, r1
 80059b0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059b6:	f003 0320 	and.w	r3, r3, #32
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d00a      	beq.n	80059d4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	689b      	ldr	r3, [r3, #8]
 80059c4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	430a      	orrs	r2, r1
 80059d2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d01a      	beq.n	8005a16 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	685b      	ldr	r3, [r3, #4]
 80059e6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	430a      	orrs	r2, r1
 80059f4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80059fe:	d10a      	bne.n	8005a16 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	685b      	ldr	r3, [r3, #4]
 8005a06:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	430a      	orrs	r2, r1
 8005a14:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d00a      	beq.n	8005a38 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	685b      	ldr	r3, [r3, #4]
 8005a28:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	430a      	orrs	r2, r1
 8005a36:	605a      	str	r2, [r3, #4]
  }
}
 8005a38:	bf00      	nop
 8005a3a:	370c      	adds	r7, #12
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a42:	4770      	bx	lr

08005a44 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b086      	sub	sp, #24
 8005a48:	af02      	add	r7, sp, #8
 8005a4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2200      	movs	r2, #0
 8005a50:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005a54:	f7fb fcaa 	bl	80013ac <HAL_GetTick>
 8005a58:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f003 0308 	and.w	r3, r3, #8
 8005a64:	2b08      	cmp	r3, #8
 8005a66:	d10e      	bne.n	8005a86 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005a68:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005a6c:	9300      	str	r3, [sp, #0]
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	2200      	movs	r2, #0
 8005a72:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005a76:	6878      	ldr	r0, [r7, #4]
 8005a78:	f000 f82f 	bl	8005ada <UART_WaitOnFlagUntilTimeout>
 8005a7c:	4603      	mov	r3, r0
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d001      	beq.n	8005a86 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005a82:	2303      	movs	r3, #3
 8005a84:	e025      	b.n	8005ad2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f003 0304 	and.w	r3, r3, #4
 8005a90:	2b04      	cmp	r3, #4
 8005a92:	d10e      	bne.n	8005ab2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005a94:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005a98:	9300      	str	r3, [sp, #0]
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005aa2:	6878      	ldr	r0, [r7, #4]
 8005aa4:	f000 f819 	bl	8005ada <UART_WaitOnFlagUntilTimeout>
 8005aa8:	4603      	mov	r3, r0
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d001      	beq.n	8005ab2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005aae:	2303      	movs	r3, #3
 8005ab0:	e00f      	b.n	8005ad2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2220      	movs	r2, #32
 8005ab6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2220      	movs	r2, #32
 8005abe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2200      	movs	r2, #0
 8005acc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005ad0:	2300      	movs	r3, #0
}
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	3710      	adds	r7, #16
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	bd80      	pop	{r7, pc}

08005ada <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005ada:	b580      	push	{r7, lr}
 8005adc:	b09c      	sub	sp, #112	; 0x70
 8005ade:	af00      	add	r7, sp, #0
 8005ae0:	60f8      	str	r0, [r7, #12]
 8005ae2:	60b9      	str	r1, [r7, #8]
 8005ae4:	603b      	str	r3, [r7, #0]
 8005ae6:	4613      	mov	r3, r2
 8005ae8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005aea:	e0a9      	b.n	8005c40 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005aec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005aee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005af2:	f000 80a5 	beq.w	8005c40 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005af6:	f7fb fc59 	bl	80013ac <HAL_GetTick>
 8005afa:	4602      	mov	r2, r0
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	1ad3      	subs	r3, r2, r3
 8005b00:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005b02:	429a      	cmp	r2, r3
 8005b04:	d302      	bcc.n	8005b0c <UART_WaitOnFlagUntilTimeout+0x32>
 8005b06:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d140      	bne.n	8005b8e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b14:	e853 3f00 	ldrex	r3, [r3]
 8005b18:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005b1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b1c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005b20:	667b      	str	r3, [r7, #100]	; 0x64
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	461a      	mov	r2, r3
 8005b28:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005b2a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005b2c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b2e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005b30:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005b32:	e841 2300 	strex	r3, r2, [r1]
 8005b36:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005b38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d1e6      	bne.n	8005b0c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	3308      	adds	r3, #8
 8005b44:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b48:	e853 3f00 	ldrex	r3, [r3]
 8005b4c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005b4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b50:	f023 0301 	bic.w	r3, r3, #1
 8005b54:	663b      	str	r3, [r7, #96]	; 0x60
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	3308      	adds	r3, #8
 8005b5c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005b5e:	64ba      	str	r2, [r7, #72]	; 0x48
 8005b60:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b62:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005b64:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005b66:	e841 2300 	strex	r3, r2, [r1]
 8005b6a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005b6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d1e5      	bne.n	8005b3e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	2220      	movs	r2, #32
 8005b76:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	2220      	movs	r2, #32
 8005b7e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	2200      	movs	r2, #0
 8005b86:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8005b8a:	2303      	movs	r3, #3
 8005b8c:	e069      	b.n	8005c62 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f003 0304 	and.w	r3, r3, #4
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d051      	beq.n	8005c40 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	69db      	ldr	r3, [r3, #28]
 8005ba2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ba6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005baa:	d149      	bne.n	8005c40 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005bb4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bbe:	e853 3f00 	ldrex	r3, [r3]
 8005bc2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bc6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005bca:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	461a      	mov	r2, r3
 8005bd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bd4:	637b      	str	r3, [r7, #52]	; 0x34
 8005bd6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bd8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005bda:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005bdc:	e841 2300 	strex	r3, r2, [r1]
 8005be0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005be2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d1e6      	bne.n	8005bb6 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	3308      	adds	r3, #8
 8005bee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bf0:	697b      	ldr	r3, [r7, #20]
 8005bf2:	e853 3f00 	ldrex	r3, [r3]
 8005bf6:	613b      	str	r3, [r7, #16]
   return(result);
 8005bf8:	693b      	ldr	r3, [r7, #16]
 8005bfa:	f023 0301 	bic.w	r3, r3, #1
 8005bfe:	66bb      	str	r3, [r7, #104]	; 0x68
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	3308      	adds	r3, #8
 8005c06:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005c08:	623a      	str	r2, [r7, #32]
 8005c0a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c0c:	69f9      	ldr	r1, [r7, #28]
 8005c0e:	6a3a      	ldr	r2, [r7, #32]
 8005c10:	e841 2300 	strex	r3, r2, [r1]
 8005c14:	61bb      	str	r3, [r7, #24]
   return(result);
 8005c16:	69bb      	ldr	r3, [r7, #24]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d1e5      	bne.n	8005be8 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	2220      	movs	r2, #32
 8005c20:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	2220      	movs	r2, #32
 8005c28:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	2220      	movs	r2, #32
 8005c30:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	2200      	movs	r2, #0
 8005c38:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8005c3c:	2303      	movs	r3, #3
 8005c3e:	e010      	b.n	8005c62 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	69da      	ldr	r2, [r3, #28]
 8005c46:	68bb      	ldr	r3, [r7, #8]
 8005c48:	4013      	ands	r3, r2
 8005c4a:	68ba      	ldr	r2, [r7, #8]
 8005c4c:	429a      	cmp	r2, r3
 8005c4e:	bf0c      	ite	eq
 8005c50:	2301      	moveq	r3, #1
 8005c52:	2300      	movne	r3, #0
 8005c54:	b2db      	uxtb	r3, r3
 8005c56:	461a      	mov	r2, r3
 8005c58:	79fb      	ldrb	r3, [r7, #7]
 8005c5a:	429a      	cmp	r2, r3
 8005c5c:	f43f af46 	beq.w	8005aec <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005c60:	2300      	movs	r3, #0
}
 8005c62:	4618      	mov	r0, r3
 8005c64:	3770      	adds	r7, #112	; 0x70
 8005c66:	46bd      	mov	sp, r7
 8005c68:	bd80      	pop	{r7, pc}

08005c6a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005c6a:	b480      	push	{r7}
 8005c6c:	b085      	sub	sp, #20
 8005c6e:	af00      	add	r7, sp, #0
 8005c70:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005c78:	2b01      	cmp	r3, #1
 8005c7a:	d101      	bne.n	8005c80 <HAL_UARTEx_DisableFifoMode+0x16>
 8005c7c:	2302      	movs	r3, #2
 8005c7e:	e027      	b.n	8005cd0 <HAL_UARTEx_DisableFifoMode+0x66>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2201      	movs	r2, #1
 8005c84:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2224      	movs	r2, #36	; 0x24
 8005c8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	681a      	ldr	r2, [r3, #0]
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f022 0201 	bic.w	r2, r2, #1
 8005ca6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005cae:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	68fa      	ldr	r2, [r7, #12]
 8005cbc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2220      	movs	r2, #32
 8005cc2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2200      	movs	r2, #0
 8005cca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005cce:	2300      	movs	r3, #0
}
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	3714      	adds	r7, #20
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cda:	4770      	bx	lr

08005cdc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b084      	sub	sp, #16
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
 8005ce4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005cec:	2b01      	cmp	r3, #1
 8005cee:	d101      	bne.n	8005cf4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005cf0:	2302      	movs	r3, #2
 8005cf2:	e02d      	b.n	8005d50 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2201      	movs	r2, #1
 8005cf8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2224      	movs	r2, #36	; 0x24
 8005d00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	681a      	ldr	r2, [r3, #0]
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f022 0201 	bic.w	r2, r2, #1
 8005d1a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	689b      	ldr	r3, [r3, #8]
 8005d22:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	683a      	ldr	r2, [r7, #0]
 8005d2c:	430a      	orrs	r2, r1
 8005d2e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005d30:	6878      	ldr	r0, [r7, #4]
 8005d32:	f000 f84f 	bl	8005dd4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	68fa      	ldr	r2, [r7, #12]
 8005d3c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	2220      	movs	r2, #32
 8005d42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	2200      	movs	r2, #0
 8005d4a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005d4e:	2300      	movs	r3, #0
}
 8005d50:	4618      	mov	r0, r3
 8005d52:	3710      	adds	r7, #16
 8005d54:	46bd      	mov	sp, r7
 8005d56:	bd80      	pop	{r7, pc}

08005d58 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b084      	sub	sp, #16
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
 8005d60:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005d68:	2b01      	cmp	r3, #1
 8005d6a:	d101      	bne.n	8005d70 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005d6c:	2302      	movs	r3, #2
 8005d6e:	e02d      	b.n	8005dcc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2201      	movs	r2, #1
 8005d74:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2224      	movs	r2, #36	; 0x24
 8005d7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	681a      	ldr	r2, [r3, #0]
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f022 0201 	bic.w	r2, r2, #1
 8005d96:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	689b      	ldr	r3, [r3, #8]
 8005d9e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	683a      	ldr	r2, [r7, #0]
 8005da8:	430a      	orrs	r2, r1
 8005daa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005dac:	6878      	ldr	r0, [r7, #4]
 8005dae:	f000 f811 	bl	8005dd4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	68fa      	ldr	r2, [r7, #12]
 8005db8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2220      	movs	r2, #32
 8005dbe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005dca:	2300      	movs	r3, #0
}
 8005dcc:	4618      	mov	r0, r3
 8005dce:	3710      	adds	r7, #16
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	bd80      	pop	{r7, pc}

08005dd4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005dd4:	b480      	push	{r7}
 8005dd6:	b085      	sub	sp, #20
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d108      	bne.n	8005df6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2201      	movs	r2, #1
 8005de8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2201      	movs	r2, #1
 8005df0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005df4:	e031      	b.n	8005e5a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005df6:	2310      	movs	r3, #16
 8005df8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005dfa:	2310      	movs	r3, #16
 8005dfc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	689b      	ldr	r3, [r3, #8]
 8005e04:	0e5b      	lsrs	r3, r3, #25
 8005e06:	b2db      	uxtb	r3, r3
 8005e08:	f003 0307 	and.w	r3, r3, #7
 8005e0c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	689b      	ldr	r3, [r3, #8]
 8005e14:	0f5b      	lsrs	r3, r3, #29
 8005e16:	b2db      	uxtb	r3, r3
 8005e18:	f003 0307 	and.w	r3, r3, #7
 8005e1c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005e1e:	7bbb      	ldrb	r3, [r7, #14]
 8005e20:	7b3a      	ldrb	r2, [r7, #12]
 8005e22:	4911      	ldr	r1, [pc, #68]	; (8005e68 <UARTEx_SetNbDataToProcess+0x94>)
 8005e24:	5c8a      	ldrb	r2, [r1, r2]
 8005e26:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005e2a:	7b3a      	ldrb	r2, [r7, #12]
 8005e2c:	490f      	ldr	r1, [pc, #60]	; (8005e6c <UARTEx_SetNbDataToProcess+0x98>)
 8005e2e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005e30:	fb93 f3f2 	sdiv	r3, r3, r2
 8005e34:	b29a      	uxth	r2, r3
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005e3c:	7bfb      	ldrb	r3, [r7, #15]
 8005e3e:	7b7a      	ldrb	r2, [r7, #13]
 8005e40:	4909      	ldr	r1, [pc, #36]	; (8005e68 <UARTEx_SetNbDataToProcess+0x94>)
 8005e42:	5c8a      	ldrb	r2, [r1, r2]
 8005e44:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005e48:	7b7a      	ldrb	r2, [r7, #13]
 8005e4a:	4908      	ldr	r1, [pc, #32]	; (8005e6c <UARTEx_SetNbDataToProcess+0x98>)
 8005e4c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005e4e:	fb93 f3f2 	sdiv	r3, r3, r2
 8005e52:	b29a      	uxth	r2, r3
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005e5a:	bf00      	nop
 8005e5c:	3714      	adds	r7, #20
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e64:	4770      	bx	lr
 8005e66:	bf00      	nop
 8005e68:	08006f44 	.word	0x08006f44
 8005e6c:	08006f4c 	.word	0x08006f4c

08005e70 <__errno>:
 8005e70:	4b01      	ldr	r3, [pc, #4]	; (8005e78 <__errno+0x8>)
 8005e72:	6818      	ldr	r0, [r3, #0]
 8005e74:	4770      	bx	lr
 8005e76:	bf00      	nop
 8005e78:	24000014 	.word	0x24000014

08005e7c <__libc_init_array>:
 8005e7c:	b570      	push	{r4, r5, r6, lr}
 8005e7e:	4d0d      	ldr	r5, [pc, #52]	; (8005eb4 <__libc_init_array+0x38>)
 8005e80:	4c0d      	ldr	r4, [pc, #52]	; (8005eb8 <__libc_init_array+0x3c>)
 8005e82:	1b64      	subs	r4, r4, r5
 8005e84:	10a4      	asrs	r4, r4, #2
 8005e86:	2600      	movs	r6, #0
 8005e88:	42a6      	cmp	r6, r4
 8005e8a:	d109      	bne.n	8005ea0 <__libc_init_array+0x24>
 8005e8c:	4d0b      	ldr	r5, [pc, #44]	; (8005ebc <__libc_init_array+0x40>)
 8005e8e:	4c0c      	ldr	r4, [pc, #48]	; (8005ec0 <__libc_init_array+0x44>)
 8005e90:	f000 ffd4 	bl	8006e3c <_init>
 8005e94:	1b64      	subs	r4, r4, r5
 8005e96:	10a4      	asrs	r4, r4, #2
 8005e98:	2600      	movs	r6, #0
 8005e9a:	42a6      	cmp	r6, r4
 8005e9c:	d105      	bne.n	8005eaa <__libc_init_array+0x2e>
 8005e9e:	bd70      	pop	{r4, r5, r6, pc}
 8005ea0:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ea4:	4798      	blx	r3
 8005ea6:	3601      	adds	r6, #1
 8005ea8:	e7ee      	b.n	8005e88 <__libc_init_array+0xc>
 8005eaa:	f855 3b04 	ldr.w	r3, [r5], #4
 8005eae:	4798      	blx	r3
 8005eb0:	3601      	adds	r6, #1
 8005eb2:	e7f2      	b.n	8005e9a <__libc_init_array+0x1e>
 8005eb4:	08006ff4 	.word	0x08006ff4
 8005eb8:	08006ff4 	.word	0x08006ff4
 8005ebc:	08006ff4 	.word	0x08006ff4
 8005ec0:	08006ff8 	.word	0x08006ff8

08005ec4 <memset>:
 8005ec4:	4402      	add	r2, r0
 8005ec6:	4603      	mov	r3, r0
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d100      	bne.n	8005ece <memset+0xa>
 8005ecc:	4770      	bx	lr
 8005ece:	f803 1b01 	strb.w	r1, [r3], #1
 8005ed2:	e7f9      	b.n	8005ec8 <memset+0x4>

08005ed4 <iprintf>:
 8005ed4:	b40f      	push	{r0, r1, r2, r3}
 8005ed6:	4b0a      	ldr	r3, [pc, #40]	; (8005f00 <iprintf+0x2c>)
 8005ed8:	b513      	push	{r0, r1, r4, lr}
 8005eda:	681c      	ldr	r4, [r3, #0]
 8005edc:	b124      	cbz	r4, 8005ee8 <iprintf+0x14>
 8005ede:	69a3      	ldr	r3, [r4, #24]
 8005ee0:	b913      	cbnz	r3, 8005ee8 <iprintf+0x14>
 8005ee2:	4620      	mov	r0, r4
 8005ee4:	f000 f87c 	bl	8005fe0 <__sinit>
 8005ee8:	ab05      	add	r3, sp, #20
 8005eea:	9a04      	ldr	r2, [sp, #16]
 8005eec:	68a1      	ldr	r1, [r4, #8]
 8005eee:	9301      	str	r3, [sp, #4]
 8005ef0:	4620      	mov	r0, r4
 8005ef2:	f000 f999 	bl	8006228 <_vfiprintf_r>
 8005ef6:	b002      	add	sp, #8
 8005ef8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005efc:	b004      	add	sp, #16
 8005efe:	4770      	bx	lr
 8005f00:	24000014 	.word	0x24000014

08005f04 <putchar>:
 8005f04:	4b09      	ldr	r3, [pc, #36]	; (8005f2c <putchar+0x28>)
 8005f06:	b513      	push	{r0, r1, r4, lr}
 8005f08:	681c      	ldr	r4, [r3, #0]
 8005f0a:	4601      	mov	r1, r0
 8005f0c:	b134      	cbz	r4, 8005f1c <putchar+0x18>
 8005f0e:	69a3      	ldr	r3, [r4, #24]
 8005f10:	b923      	cbnz	r3, 8005f1c <putchar+0x18>
 8005f12:	9001      	str	r0, [sp, #4]
 8005f14:	4620      	mov	r0, r4
 8005f16:	f000 f863 	bl	8005fe0 <__sinit>
 8005f1a:	9901      	ldr	r1, [sp, #4]
 8005f1c:	68a2      	ldr	r2, [r4, #8]
 8005f1e:	4620      	mov	r0, r4
 8005f20:	b002      	add	sp, #8
 8005f22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f26:	f000 bc43 	b.w	80067b0 <_putc_r>
 8005f2a:	bf00      	nop
 8005f2c:	24000014 	.word	0x24000014

08005f30 <std>:
 8005f30:	2300      	movs	r3, #0
 8005f32:	b510      	push	{r4, lr}
 8005f34:	4604      	mov	r4, r0
 8005f36:	e9c0 3300 	strd	r3, r3, [r0]
 8005f3a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005f3e:	6083      	str	r3, [r0, #8]
 8005f40:	8181      	strh	r1, [r0, #12]
 8005f42:	6643      	str	r3, [r0, #100]	; 0x64
 8005f44:	81c2      	strh	r2, [r0, #14]
 8005f46:	6183      	str	r3, [r0, #24]
 8005f48:	4619      	mov	r1, r3
 8005f4a:	2208      	movs	r2, #8
 8005f4c:	305c      	adds	r0, #92	; 0x5c
 8005f4e:	f7ff ffb9 	bl	8005ec4 <memset>
 8005f52:	4b05      	ldr	r3, [pc, #20]	; (8005f68 <std+0x38>)
 8005f54:	6263      	str	r3, [r4, #36]	; 0x24
 8005f56:	4b05      	ldr	r3, [pc, #20]	; (8005f6c <std+0x3c>)
 8005f58:	62a3      	str	r3, [r4, #40]	; 0x28
 8005f5a:	4b05      	ldr	r3, [pc, #20]	; (8005f70 <std+0x40>)
 8005f5c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005f5e:	4b05      	ldr	r3, [pc, #20]	; (8005f74 <std+0x44>)
 8005f60:	6224      	str	r4, [r4, #32]
 8005f62:	6323      	str	r3, [r4, #48]	; 0x30
 8005f64:	bd10      	pop	{r4, pc}
 8005f66:	bf00      	nop
 8005f68:	08006861 	.word	0x08006861
 8005f6c:	08006883 	.word	0x08006883
 8005f70:	080068bb 	.word	0x080068bb
 8005f74:	080068df 	.word	0x080068df

08005f78 <_cleanup_r>:
 8005f78:	4901      	ldr	r1, [pc, #4]	; (8005f80 <_cleanup_r+0x8>)
 8005f7a:	f000 b8af 	b.w	80060dc <_fwalk_reent>
 8005f7e:	bf00      	nop
 8005f80:	08006bb9 	.word	0x08006bb9

08005f84 <__sfmoreglue>:
 8005f84:	b570      	push	{r4, r5, r6, lr}
 8005f86:	1e4a      	subs	r2, r1, #1
 8005f88:	2568      	movs	r5, #104	; 0x68
 8005f8a:	4355      	muls	r5, r2
 8005f8c:	460e      	mov	r6, r1
 8005f8e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005f92:	f000 f8c5 	bl	8006120 <_malloc_r>
 8005f96:	4604      	mov	r4, r0
 8005f98:	b140      	cbz	r0, 8005fac <__sfmoreglue+0x28>
 8005f9a:	2100      	movs	r1, #0
 8005f9c:	e9c0 1600 	strd	r1, r6, [r0]
 8005fa0:	300c      	adds	r0, #12
 8005fa2:	60a0      	str	r0, [r4, #8]
 8005fa4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005fa8:	f7ff ff8c 	bl	8005ec4 <memset>
 8005fac:	4620      	mov	r0, r4
 8005fae:	bd70      	pop	{r4, r5, r6, pc}

08005fb0 <__sfp_lock_acquire>:
 8005fb0:	4801      	ldr	r0, [pc, #4]	; (8005fb8 <__sfp_lock_acquire+0x8>)
 8005fb2:	f000 b8b3 	b.w	800611c <__retarget_lock_acquire_recursive>
 8005fb6:	bf00      	nop
 8005fb8:	240001b4 	.word	0x240001b4

08005fbc <__sfp_lock_release>:
 8005fbc:	4801      	ldr	r0, [pc, #4]	; (8005fc4 <__sfp_lock_release+0x8>)
 8005fbe:	f000 b8ae 	b.w	800611e <__retarget_lock_release_recursive>
 8005fc2:	bf00      	nop
 8005fc4:	240001b4 	.word	0x240001b4

08005fc8 <__sinit_lock_acquire>:
 8005fc8:	4801      	ldr	r0, [pc, #4]	; (8005fd0 <__sinit_lock_acquire+0x8>)
 8005fca:	f000 b8a7 	b.w	800611c <__retarget_lock_acquire_recursive>
 8005fce:	bf00      	nop
 8005fd0:	240001af 	.word	0x240001af

08005fd4 <__sinit_lock_release>:
 8005fd4:	4801      	ldr	r0, [pc, #4]	; (8005fdc <__sinit_lock_release+0x8>)
 8005fd6:	f000 b8a2 	b.w	800611e <__retarget_lock_release_recursive>
 8005fda:	bf00      	nop
 8005fdc:	240001af 	.word	0x240001af

08005fe0 <__sinit>:
 8005fe0:	b510      	push	{r4, lr}
 8005fe2:	4604      	mov	r4, r0
 8005fe4:	f7ff fff0 	bl	8005fc8 <__sinit_lock_acquire>
 8005fe8:	69a3      	ldr	r3, [r4, #24]
 8005fea:	b11b      	cbz	r3, 8005ff4 <__sinit+0x14>
 8005fec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ff0:	f7ff bff0 	b.w	8005fd4 <__sinit_lock_release>
 8005ff4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005ff8:	6523      	str	r3, [r4, #80]	; 0x50
 8005ffa:	4b13      	ldr	r3, [pc, #76]	; (8006048 <__sinit+0x68>)
 8005ffc:	4a13      	ldr	r2, [pc, #76]	; (800604c <__sinit+0x6c>)
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	62a2      	str	r2, [r4, #40]	; 0x28
 8006002:	42a3      	cmp	r3, r4
 8006004:	bf04      	itt	eq
 8006006:	2301      	moveq	r3, #1
 8006008:	61a3      	streq	r3, [r4, #24]
 800600a:	4620      	mov	r0, r4
 800600c:	f000 f820 	bl	8006050 <__sfp>
 8006010:	6060      	str	r0, [r4, #4]
 8006012:	4620      	mov	r0, r4
 8006014:	f000 f81c 	bl	8006050 <__sfp>
 8006018:	60a0      	str	r0, [r4, #8]
 800601a:	4620      	mov	r0, r4
 800601c:	f000 f818 	bl	8006050 <__sfp>
 8006020:	2200      	movs	r2, #0
 8006022:	60e0      	str	r0, [r4, #12]
 8006024:	2104      	movs	r1, #4
 8006026:	6860      	ldr	r0, [r4, #4]
 8006028:	f7ff ff82 	bl	8005f30 <std>
 800602c:	68a0      	ldr	r0, [r4, #8]
 800602e:	2201      	movs	r2, #1
 8006030:	2109      	movs	r1, #9
 8006032:	f7ff ff7d 	bl	8005f30 <std>
 8006036:	68e0      	ldr	r0, [r4, #12]
 8006038:	2202      	movs	r2, #2
 800603a:	2112      	movs	r1, #18
 800603c:	f7ff ff78 	bl	8005f30 <std>
 8006040:	2301      	movs	r3, #1
 8006042:	61a3      	str	r3, [r4, #24]
 8006044:	e7d2      	b.n	8005fec <__sinit+0xc>
 8006046:	bf00      	nop
 8006048:	08006f54 	.word	0x08006f54
 800604c:	08005f79 	.word	0x08005f79

08006050 <__sfp>:
 8006050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006052:	4607      	mov	r7, r0
 8006054:	f7ff ffac 	bl	8005fb0 <__sfp_lock_acquire>
 8006058:	4b1e      	ldr	r3, [pc, #120]	; (80060d4 <__sfp+0x84>)
 800605a:	681e      	ldr	r6, [r3, #0]
 800605c:	69b3      	ldr	r3, [r6, #24]
 800605e:	b913      	cbnz	r3, 8006066 <__sfp+0x16>
 8006060:	4630      	mov	r0, r6
 8006062:	f7ff ffbd 	bl	8005fe0 <__sinit>
 8006066:	3648      	adds	r6, #72	; 0x48
 8006068:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800606c:	3b01      	subs	r3, #1
 800606e:	d503      	bpl.n	8006078 <__sfp+0x28>
 8006070:	6833      	ldr	r3, [r6, #0]
 8006072:	b30b      	cbz	r3, 80060b8 <__sfp+0x68>
 8006074:	6836      	ldr	r6, [r6, #0]
 8006076:	e7f7      	b.n	8006068 <__sfp+0x18>
 8006078:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800607c:	b9d5      	cbnz	r5, 80060b4 <__sfp+0x64>
 800607e:	4b16      	ldr	r3, [pc, #88]	; (80060d8 <__sfp+0x88>)
 8006080:	60e3      	str	r3, [r4, #12]
 8006082:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006086:	6665      	str	r5, [r4, #100]	; 0x64
 8006088:	f000 f847 	bl	800611a <__retarget_lock_init_recursive>
 800608c:	f7ff ff96 	bl	8005fbc <__sfp_lock_release>
 8006090:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006094:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006098:	6025      	str	r5, [r4, #0]
 800609a:	61a5      	str	r5, [r4, #24]
 800609c:	2208      	movs	r2, #8
 800609e:	4629      	mov	r1, r5
 80060a0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80060a4:	f7ff ff0e 	bl	8005ec4 <memset>
 80060a8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80060ac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80060b0:	4620      	mov	r0, r4
 80060b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80060b4:	3468      	adds	r4, #104	; 0x68
 80060b6:	e7d9      	b.n	800606c <__sfp+0x1c>
 80060b8:	2104      	movs	r1, #4
 80060ba:	4638      	mov	r0, r7
 80060bc:	f7ff ff62 	bl	8005f84 <__sfmoreglue>
 80060c0:	4604      	mov	r4, r0
 80060c2:	6030      	str	r0, [r6, #0]
 80060c4:	2800      	cmp	r0, #0
 80060c6:	d1d5      	bne.n	8006074 <__sfp+0x24>
 80060c8:	f7ff ff78 	bl	8005fbc <__sfp_lock_release>
 80060cc:	230c      	movs	r3, #12
 80060ce:	603b      	str	r3, [r7, #0]
 80060d0:	e7ee      	b.n	80060b0 <__sfp+0x60>
 80060d2:	bf00      	nop
 80060d4:	08006f54 	.word	0x08006f54
 80060d8:	ffff0001 	.word	0xffff0001

080060dc <_fwalk_reent>:
 80060dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80060e0:	4606      	mov	r6, r0
 80060e2:	4688      	mov	r8, r1
 80060e4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80060e8:	2700      	movs	r7, #0
 80060ea:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80060ee:	f1b9 0901 	subs.w	r9, r9, #1
 80060f2:	d505      	bpl.n	8006100 <_fwalk_reent+0x24>
 80060f4:	6824      	ldr	r4, [r4, #0]
 80060f6:	2c00      	cmp	r4, #0
 80060f8:	d1f7      	bne.n	80060ea <_fwalk_reent+0xe>
 80060fa:	4638      	mov	r0, r7
 80060fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006100:	89ab      	ldrh	r3, [r5, #12]
 8006102:	2b01      	cmp	r3, #1
 8006104:	d907      	bls.n	8006116 <_fwalk_reent+0x3a>
 8006106:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800610a:	3301      	adds	r3, #1
 800610c:	d003      	beq.n	8006116 <_fwalk_reent+0x3a>
 800610e:	4629      	mov	r1, r5
 8006110:	4630      	mov	r0, r6
 8006112:	47c0      	blx	r8
 8006114:	4307      	orrs	r7, r0
 8006116:	3568      	adds	r5, #104	; 0x68
 8006118:	e7e9      	b.n	80060ee <_fwalk_reent+0x12>

0800611a <__retarget_lock_init_recursive>:
 800611a:	4770      	bx	lr

0800611c <__retarget_lock_acquire_recursive>:
 800611c:	4770      	bx	lr

0800611e <__retarget_lock_release_recursive>:
 800611e:	4770      	bx	lr

08006120 <_malloc_r>:
 8006120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006122:	1ccd      	adds	r5, r1, #3
 8006124:	f025 0503 	bic.w	r5, r5, #3
 8006128:	3508      	adds	r5, #8
 800612a:	2d0c      	cmp	r5, #12
 800612c:	bf38      	it	cc
 800612e:	250c      	movcc	r5, #12
 8006130:	2d00      	cmp	r5, #0
 8006132:	4606      	mov	r6, r0
 8006134:	db01      	blt.n	800613a <_malloc_r+0x1a>
 8006136:	42a9      	cmp	r1, r5
 8006138:	d903      	bls.n	8006142 <_malloc_r+0x22>
 800613a:	230c      	movs	r3, #12
 800613c:	6033      	str	r3, [r6, #0]
 800613e:	2000      	movs	r0, #0
 8006140:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006142:	f000 fdeb 	bl	8006d1c <__malloc_lock>
 8006146:	4921      	ldr	r1, [pc, #132]	; (80061cc <_malloc_r+0xac>)
 8006148:	680a      	ldr	r2, [r1, #0]
 800614a:	4614      	mov	r4, r2
 800614c:	b99c      	cbnz	r4, 8006176 <_malloc_r+0x56>
 800614e:	4f20      	ldr	r7, [pc, #128]	; (80061d0 <_malloc_r+0xb0>)
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	b923      	cbnz	r3, 800615e <_malloc_r+0x3e>
 8006154:	4621      	mov	r1, r4
 8006156:	4630      	mov	r0, r6
 8006158:	f000 fb72 	bl	8006840 <_sbrk_r>
 800615c:	6038      	str	r0, [r7, #0]
 800615e:	4629      	mov	r1, r5
 8006160:	4630      	mov	r0, r6
 8006162:	f000 fb6d 	bl	8006840 <_sbrk_r>
 8006166:	1c43      	adds	r3, r0, #1
 8006168:	d123      	bne.n	80061b2 <_malloc_r+0x92>
 800616a:	230c      	movs	r3, #12
 800616c:	6033      	str	r3, [r6, #0]
 800616e:	4630      	mov	r0, r6
 8006170:	f000 fdda 	bl	8006d28 <__malloc_unlock>
 8006174:	e7e3      	b.n	800613e <_malloc_r+0x1e>
 8006176:	6823      	ldr	r3, [r4, #0]
 8006178:	1b5b      	subs	r3, r3, r5
 800617a:	d417      	bmi.n	80061ac <_malloc_r+0x8c>
 800617c:	2b0b      	cmp	r3, #11
 800617e:	d903      	bls.n	8006188 <_malloc_r+0x68>
 8006180:	6023      	str	r3, [r4, #0]
 8006182:	441c      	add	r4, r3
 8006184:	6025      	str	r5, [r4, #0]
 8006186:	e004      	b.n	8006192 <_malloc_r+0x72>
 8006188:	6863      	ldr	r3, [r4, #4]
 800618a:	42a2      	cmp	r2, r4
 800618c:	bf0c      	ite	eq
 800618e:	600b      	streq	r3, [r1, #0]
 8006190:	6053      	strne	r3, [r2, #4]
 8006192:	4630      	mov	r0, r6
 8006194:	f000 fdc8 	bl	8006d28 <__malloc_unlock>
 8006198:	f104 000b 	add.w	r0, r4, #11
 800619c:	1d23      	adds	r3, r4, #4
 800619e:	f020 0007 	bic.w	r0, r0, #7
 80061a2:	1ac2      	subs	r2, r0, r3
 80061a4:	d0cc      	beq.n	8006140 <_malloc_r+0x20>
 80061a6:	1a1b      	subs	r3, r3, r0
 80061a8:	50a3      	str	r3, [r4, r2]
 80061aa:	e7c9      	b.n	8006140 <_malloc_r+0x20>
 80061ac:	4622      	mov	r2, r4
 80061ae:	6864      	ldr	r4, [r4, #4]
 80061b0:	e7cc      	b.n	800614c <_malloc_r+0x2c>
 80061b2:	1cc4      	adds	r4, r0, #3
 80061b4:	f024 0403 	bic.w	r4, r4, #3
 80061b8:	42a0      	cmp	r0, r4
 80061ba:	d0e3      	beq.n	8006184 <_malloc_r+0x64>
 80061bc:	1a21      	subs	r1, r4, r0
 80061be:	4630      	mov	r0, r6
 80061c0:	f000 fb3e 	bl	8006840 <_sbrk_r>
 80061c4:	3001      	adds	r0, #1
 80061c6:	d1dd      	bne.n	8006184 <_malloc_r+0x64>
 80061c8:	e7cf      	b.n	800616a <_malloc_r+0x4a>
 80061ca:	bf00      	nop
 80061cc:	240000a0 	.word	0x240000a0
 80061d0:	240000a4 	.word	0x240000a4

080061d4 <__sfputc_r>:
 80061d4:	6893      	ldr	r3, [r2, #8]
 80061d6:	3b01      	subs	r3, #1
 80061d8:	2b00      	cmp	r3, #0
 80061da:	b410      	push	{r4}
 80061dc:	6093      	str	r3, [r2, #8]
 80061de:	da08      	bge.n	80061f2 <__sfputc_r+0x1e>
 80061e0:	6994      	ldr	r4, [r2, #24]
 80061e2:	42a3      	cmp	r3, r4
 80061e4:	db01      	blt.n	80061ea <__sfputc_r+0x16>
 80061e6:	290a      	cmp	r1, #10
 80061e8:	d103      	bne.n	80061f2 <__sfputc_r+0x1e>
 80061ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 80061ee:	f000 bb7b 	b.w	80068e8 <__swbuf_r>
 80061f2:	6813      	ldr	r3, [r2, #0]
 80061f4:	1c58      	adds	r0, r3, #1
 80061f6:	6010      	str	r0, [r2, #0]
 80061f8:	7019      	strb	r1, [r3, #0]
 80061fa:	4608      	mov	r0, r1
 80061fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006200:	4770      	bx	lr

08006202 <__sfputs_r>:
 8006202:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006204:	4606      	mov	r6, r0
 8006206:	460f      	mov	r7, r1
 8006208:	4614      	mov	r4, r2
 800620a:	18d5      	adds	r5, r2, r3
 800620c:	42ac      	cmp	r4, r5
 800620e:	d101      	bne.n	8006214 <__sfputs_r+0x12>
 8006210:	2000      	movs	r0, #0
 8006212:	e007      	b.n	8006224 <__sfputs_r+0x22>
 8006214:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006218:	463a      	mov	r2, r7
 800621a:	4630      	mov	r0, r6
 800621c:	f7ff ffda 	bl	80061d4 <__sfputc_r>
 8006220:	1c43      	adds	r3, r0, #1
 8006222:	d1f3      	bne.n	800620c <__sfputs_r+0xa>
 8006224:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006228 <_vfiprintf_r>:
 8006228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800622c:	460d      	mov	r5, r1
 800622e:	b09d      	sub	sp, #116	; 0x74
 8006230:	4614      	mov	r4, r2
 8006232:	4698      	mov	r8, r3
 8006234:	4606      	mov	r6, r0
 8006236:	b118      	cbz	r0, 8006240 <_vfiprintf_r+0x18>
 8006238:	6983      	ldr	r3, [r0, #24]
 800623a:	b90b      	cbnz	r3, 8006240 <_vfiprintf_r+0x18>
 800623c:	f7ff fed0 	bl	8005fe0 <__sinit>
 8006240:	4b89      	ldr	r3, [pc, #548]	; (8006468 <_vfiprintf_r+0x240>)
 8006242:	429d      	cmp	r5, r3
 8006244:	d11b      	bne.n	800627e <_vfiprintf_r+0x56>
 8006246:	6875      	ldr	r5, [r6, #4]
 8006248:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800624a:	07d9      	lsls	r1, r3, #31
 800624c:	d405      	bmi.n	800625a <_vfiprintf_r+0x32>
 800624e:	89ab      	ldrh	r3, [r5, #12]
 8006250:	059a      	lsls	r2, r3, #22
 8006252:	d402      	bmi.n	800625a <_vfiprintf_r+0x32>
 8006254:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006256:	f7ff ff61 	bl	800611c <__retarget_lock_acquire_recursive>
 800625a:	89ab      	ldrh	r3, [r5, #12]
 800625c:	071b      	lsls	r3, r3, #28
 800625e:	d501      	bpl.n	8006264 <_vfiprintf_r+0x3c>
 8006260:	692b      	ldr	r3, [r5, #16]
 8006262:	b9eb      	cbnz	r3, 80062a0 <_vfiprintf_r+0x78>
 8006264:	4629      	mov	r1, r5
 8006266:	4630      	mov	r0, r6
 8006268:	f000 fba2 	bl	80069b0 <__swsetup_r>
 800626c:	b1c0      	cbz	r0, 80062a0 <_vfiprintf_r+0x78>
 800626e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006270:	07dc      	lsls	r4, r3, #31
 8006272:	d50e      	bpl.n	8006292 <_vfiprintf_r+0x6a>
 8006274:	f04f 30ff 	mov.w	r0, #4294967295
 8006278:	b01d      	add	sp, #116	; 0x74
 800627a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800627e:	4b7b      	ldr	r3, [pc, #492]	; (800646c <_vfiprintf_r+0x244>)
 8006280:	429d      	cmp	r5, r3
 8006282:	d101      	bne.n	8006288 <_vfiprintf_r+0x60>
 8006284:	68b5      	ldr	r5, [r6, #8]
 8006286:	e7df      	b.n	8006248 <_vfiprintf_r+0x20>
 8006288:	4b79      	ldr	r3, [pc, #484]	; (8006470 <_vfiprintf_r+0x248>)
 800628a:	429d      	cmp	r5, r3
 800628c:	bf08      	it	eq
 800628e:	68f5      	ldreq	r5, [r6, #12]
 8006290:	e7da      	b.n	8006248 <_vfiprintf_r+0x20>
 8006292:	89ab      	ldrh	r3, [r5, #12]
 8006294:	0598      	lsls	r0, r3, #22
 8006296:	d4ed      	bmi.n	8006274 <_vfiprintf_r+0x4c>
 8006298:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800629a:	f7ff ff40 	bl	800611e <__retarget_lock_release_recursive>
 800629e:	e7e9      	b.n	8006274 <_vfiprintf_r+0x4c>
 80062a0:	2300      	movs	r3, #0
 80062a2:	9309      	str	r3, [sp, #36]	; 0x24
 80062a4:	2320      	movs	r3, #32
 80062a6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80062aa:	f8cd 800c 	str.w	r8, [sp, #12]
 80062ae:	2330      	movs	r3, #48	; 0x30
 80062b0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006474 <_vfiprintf_r+0x24c>
 80062b4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80062b8:	f04f 0901 	mov.w	r9, #1
 80062bc:	4623      	mov	r3, r4
 80062be:	469a      	mov	sl, r3
 80062c0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80062c4:	b10a      	cbz	r2, 80062ca <_vfiprintf_r+0xa2>
 80062c6:	2a25      	cmp	r2, #37	; 0x25
 80062c8:	d1f9      	bne.n	80062be <_vfiprintf_r+0x96>
 80062ca:	ebba 0b04 	subs.w	fp, sl, r4
 80062ce:	d00b      	beq.n	80062e8 <_vfiprintf_r+0xc0>
 80062d0:	465b      	mov	r3, fp
 80062d2:	4622      	mov	r2, r4
 80062d4:	4629      	mov	r1, r5
 80062d6:	4630      	mov	r0, r6
 80062d8:	f7ff ff93 	bl	8006202 <__sfputs_r>
 80062dc:	3001      	adds	r0, #1
 80062de:	f000 80aa 	beq.w	8006436 <_vfiprintf_r+0x20e>
 80062e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80062e4:	445a      	add	r2, fp
 80062e6:	9209      	str	r2, [sp, #36]	; 0x24
 80062e8:	f89a 3000 	ldrb.w	r3, [sl]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	f000 80a2 	beq.w	8006436 <_vfiprintf_r+0x20e>
 80062f2:	2300      	movs	r3, #0
 80062f4:	f04f 32ff 	mov.w	r2, #4294967295
 80062f8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80062fc:	f10a 0a01 	add.w	sl, sl, #1
 8006300:	9304      	str	r3, [sp, #16]
 8006302:	9307      	str	r3, [sp, #28]
 8006304:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006308:	931a      	str	r3, [sp, #104]	; 0x68
 800630a:	4654      	mov	r4, sl
 800630c:	2205      	movs	r2, #5
 800630e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006312:	4858      	ldr	r0, [pc, #352]	; (8006474 <_vfiprintf_r+0x24c>)
 8006314:	f7f9 ffec 	bl	80002f0 <memchr>
 8006318:	9a04      	ldr	r2, [sp, #16]
 800631a:	b9d8      	cbnz	r0, 8006354 <_vfiprintf_r+0x12c>
 800631c:	06d1      	lsls	r1, r2, #27
 800631e:	bf44      	itt	mi
 8006320:	2320      	movmi	r3, #32
 8006322:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006326:	0713      	lsls	r3, r2, #28
 8006328:	bf44      	itt	mi
 800632a:	232b      	movmi	r3, #43	; 0x2b
 800632c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006330:	f89a 3000 	ldrb.w	r3, [sl]
 8006334:	2b2a      	cmp	r3, #42	; 0x2a
 8006336:	d015      	beq.n	8006364 <_vfiprintf_r+0x13c>
 8006338:	9a07      	ldr	r2, [sp, #28]
 800633a:	4654      	mov	r4, sl
 800633c:	2000      	movs	r0, #0
 800633e:	f04f 0c0a 	mov.w	ip, #10
 8006342:	4621      	mov	r1, r4
 8006344:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006348:	3b30      	subs	r3, #48	; 0x30
 800634a:	2b09      	cmp	r3, #9
 800634c:	d94e      	bls.n	80063ec <_vfiprintf_r+0x1c4>
 800634e:	b1b0      	cbz	r0, 800637e <_vfiprintf_r+0x156>
 8006350:	9207      	str	r2, [sp, #28]
 8006352:	e014      	b.n	800637e <_vfiprintf_r+0x156>
 8006354:	eba0 0308 	sub.w	r3, r0, r8
 8006358:	fa09 f303 	lsl.w	r3, r9, r3
 800635c:	4313      	orrs	r3, r2
 800635e:	9304      	str	r3, [sp, #16]
 8006360:	46a2      	mov	sl, r4
 8006362:	e7d2      	b.n	800630a <_vfiprintf_r+0xe2>
 8006364:	9b03      	ldr	r3, [sp, #12]
 8006366:	1d19      	adds	r1, r3, #4
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	9103      	str	r1, [sp, #12]
 800636c:	2b00      	cmp	r3, #0
 800636e:	bfbb      	ittet	lt
 8006370:	425b      	neglt	r3, r3
 8006372:	f042 0202 	orrlt.w	r2, r2, #2
 8006376:	9307      	strge	r3, [sp, #28]
 8006378:	9307      	strlt	r3, [sp, #28]
 800637a:	bfb8      	it	lt
 800637c:	9204      	strlt	r2, [sp, #16]
 800637e:	7823      	ldrb	r3, [r4, #0]
 8006380:	2b2e      	cmp	r3, #46	; 0x2e
 8006382:	d10c      	bne.n	800639e <_vfiprintf_r+0x176>
 8006384:	7863      	ldrb	r3, [r4, #1]
 8006386:	2b2a      	cmp	r3, #42	; 0x2a
 8006388:	d135      	bne.n	80063f6 <_vfiprintf_r+0x1ce>
 800638a:	9b03      	ldr	r3, [sp, #12]
 800638c:	1d1a      	adds	r2, r3, #4
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	9203      	str	r2, [sp, #12]
 8006392:	2b00      	cmp	r3, #0
 8006394:	bfb8      	it	lt
 8006396:	f04f 33ff 	movlt.w	r3, #4294967295
 800639a:	3402      	adds	r4, #2
 800639c:	9305      	str	r3, [sp, #20]
 800639e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006484 <_vfiprintf_r+0x25c>
 80063a2:	7821      	ldrb	r1, [r4, #0]
 80063a4:	2203      	movs	r2, #3
 80063a6:	4650      	mov	r0, sl
 80063a8:	f7f9 ffa2 	bl	80002f0 <memchr>
 80063ac:	b140      	cbz	r0, 80063c0 <_vfiprintf_r+0x198>
 80063ae:	2340      	movs	r3, #64	; 0x40
 80063b0:	eba0 000a 	sub.w	r0, r0, sl
 80063b4:	fa03 f000 	lsl.w	r0, r3, r0
 80063b8:	9b04      	ldr	r3, [sp, #16]
 80063ba:	4303      	orrs	r3, r0
 80063bc:	3401      	adds	r4, #1
 80063be:	9304      	str	r3, [sp, #16]
 80063c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80063c4:	482c      	ldr	r0, [pc, #176]	; (8006478 <_vfiprintf_r+0x250>)
 80063c6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80063ca:	2206      	movs	r2, #6
 80063cc:	f7f9 ff90 	bl	80002f0 <memchr>
 80063d0:	2800      	cmp	r0, #0
 80063d2:	d03f      	beq.n	8006454 <_vfiprintf_r+0x22c>
 80063d4:	4b29      	ldr	r3, [pc, #164]	; (800647c <_vfiprintf_r+0x254>)
 80063d6:	bb1b      	cbnz	r3, 8006420 <_vfiprintf_r+0x1f8>
 80063d8:	9b03      	ldr	r3, [sp, #12]
 80063da:	3307      	adds	r3, #7
 80063dc:	f023 0307 	bic.w	r3, r3, #7
 80063e0:	3308      	adds	r3, #8
 80063e2:	9303      	str	r3, [sp, #12]
 80063e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063e6:	443b      	add	r3, r7
 80063e8:	9309      	str	r3, [sp, #36]	; 0x24
 80063ea:	e767      	b.n	80062bc <_vfiprintf_r+0x94>
 80063ec:	fb0c 3202 	mla	r2, ip, r2, r3
 80063f0:	460c      	mov	r4, r1
 80063f2:	2001      	movs	r0, #1
 80063f4:	e7a5      	b.n	8006342 <_vfiprintf_r+0x11a>
 80063f6:	2300      	movs	r3, #0
 80063f8:	3401      	adds	r4, #1
 80063fa:	9305      	str	r3, [sp, #20]
 80063fc:	4619      	mov	r1, r3
 80063fe:	f04f 0c0a 	mov.w	ip, #10
 8006402:	4620      	mov	r0, r4
 8006404:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006408:	3a30      	subs	r2, #48	; 0x30
 800640a:	2a09      	cmp	r2, #9
 800640c:	d903      	bls.n	8006416 <_vfiprintf_r+0x1ee>
 800640e:	2b00      	cmp	r3, #0
 8006410:	d0c5      	beq.n	800639e <_vfiprintf_r+0x176>
 8006412:	9105      	str	r1, [sp, #20]
 8006414:	e7c3      	b.n	800639e <_vfiprintf_r+0x176>
 8006416:	fb0c 2101 	mla	r1, ip, r1, r2
 800641a:	4604      	mov	r4, r0
 800641c:	2301      	movs	r3, #1
 800641e:	e7f0      	b.n	8006402 <_vfiprintf_r+0x1da>
 8006420:	ab03      	add	r3, sp, #12
 8006422:	9300      	str	r3, [sp, #0]
 8006424:	462a      	mov	r2, r5
 8006426:	4b16      	ldr	r3, [pc, #88]	; (8006480 <_vfiprintf_r+0x258>)
 8006428:	a904      	add	r1, sp, #16
 800642a:	4630      	mov	r0, r6
 800642c:	f3af 8000 	nop.w
 8006430:	4607      	mov	r7, r0
 8006432:	1c78      	adds	r0, r7, #1
 8006434:	d1d6      	bne.n	80063e4 <_vfiprintf_r+0x1bc>
 8006436:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006438:	07d9      	lsls	r1, r3, #31
 800643a:	d405      	bmi.n	8006448 <_vfiprintf_r+0x220>
 800643c:	89ab      	ldrh	r3, [r5, #12]
 800643e:	059a      	lsls	r2, r3, #22
 8006440:	d402      	bmi.n	8006448 <_vfiprintf_r+0x220>
 8006442:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006444:	f7ff fe6b 	bl	800611e <__retarget_lock_release_recursive>
 8006448:	89ab      	ldrh	r3, [r5, #12]
 800644a:	065b      	lsls	r3, r3, #25
 800644c:	f53f af12 	bmi.w	8006274 <_vfiprintf_r+0x4c>
 8006450:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006452:	e711      	b.n	8006278 <_vfiprintf_r+0x50>
 8006454:	ab03      	add	r3, sp, #12
 8006456:	9300      	str	r3, [sp, #0]
 8006458:	462a      	mov	r2, r5
 800645a:	4b09      	ldr	r3, [pc, #36]	; (8006480 <_vfiprintf_r+0x258>)
 800645c:	a904      	add	r1, sp, #16
 800645e:	4630      	mov	r0, r6
 8006460:	f000 f880 	bl	8006564 <_printf_i>
 8006464:	e7e4      	b.n	8006430 <_vfiprintf_r+0x208>
 8006466:	bf00      	nop
 8006468:	08006f78 	.word	0x08006f78
 800646c:	08006f98 	.word	0x08006f98
 8006470:	08006f58 	.word	0x08006f58
 8006474:	08006fb8 	.word	0x08006fb8
 8006478:	08006fc2 	.word	0x08006fc2
 800647c:	00000000 	.word	0x00000000
 8006480:	08006203 	.word	0x08006203
 8006484:	08006fbe 	.word	0x08006fbe

08006488 <_printf_common>:
 8006488:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800648c:	4616      	mov	r6, r2
 800648e:	4699      	mov	r9, r3
 8006490:	688a      	ldr	r2, [r1, #8]
 8006492:	690b      	ldr	r3, [r1, #16]
 8006494:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006498:	4293      	cmp	r3, r2
 800649a:	bfb8      	it	lt
 800649c:	4613      	movlt	r3, r2
 800649e:	6033      	str	r3, [r6, #0]
 80064a0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80064a4:	4607      	mov	r7, r0
 80064a6:	460c      	mov	r4, r1
 80064a8:	b10a      	cbz	r2, 80064ae <_printf_common+0x26>
 80064aa:	3301      	adds	r3, #1
 80064ac:	6033      	str	r3, [r6, #0]
 80064ae:	6823      	ldr	r3, [r4, #0]
 80064b0:	0699      	lsls	r1, r3, #26
 80064b2:	bf42      	ittt	mi
 80064b4:	6833      	ldrmi	r3, [r6, #0]
 80064b6:	3302      	addmi	r3, #2
 80064b8:	6033      	strmi	r3, [r6, #0]
 80064ba:	6825      	ldr	r5, [r4, #0]
 80064bc:	f015 0506 	ands.w	r5, r5, #6
 80064c0:	d106      	bne.n	80064d0 <_printf_common+0x48>
 80064c2:	f104 0a19 	add.w	sl, r4, #25
 80064c6:	68e3      	ldr	r3, [r4, #12]
 80064c8:	6832      	ldr	r2, [r6, #0]
 80064ca:	1a9b      	subs	r3, r3, r2
 80064cc:	42ab      	cmp	r3, r5
 80064ce:	dc26      	bgt.n	800651e <_printf_common+0x96>
 80064d0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80064d4:	1e13      	subs	r3, r2, #0
 80064d6:	6822      	ldr	r2, [r4, #0]
 80064d8:	bf18      	it	ne
 80064da:	2301      	movne	r3, #1
 80064dc:	0692      	lsls	r2, r2, #26
 80064de:	d42b      	bmi.n	8006538 <_printf_common+0xb0>
 80064e0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80064e4:	4649      	mov	r1, r9
 80064e6:	4638      	mov	r0, r7
 80064e8:	47c0      	blx	r8
 80064ea:	3001      	adds	r0, #1
 80064ec:	d01e      	beq.n	800652c <_printf_common+0xa4>
 80064ee:	6823      	ldr	r3, [r4, #0]
 80064f0:	68e5      	ldr	r5, [r4, #12]
 80064f2:	6832      	ldr	r2, [r6, #0]
 80064f4:	f003 0306 	and.w	r3, r3, #6
 80064f8:	2b04      	cmp	r3, #4
 80064fa:	bf08      	it	eq
 80064fc:	1aad      	subeq	r5, r5, r2
 80064fe:	68a3      	ldr	r3, [r4, #8]
 8006500:	6922      	ldr	r2, [r4, #16]
 8006502:	bf0c      	ite	eq
 8006504:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006508:	2500      	movne	r5, #0
 800650a:	4293      	cmp	r3, r2
 800650c:	bfc4      	itt	gt
 800650e:	1a9b      	subgt	r3, r3, r2
 8006510:	18ed      	addgt	r5, r5, r3
 8006512:	2600      	movs	r6, #0
 8006514:	341a      	adds	r4, #26
 8006516:	42b5      	cmp	r5, r6
 8006518:	d11a      	bne.n	8006550 <_printf_common+0xc8>
 800651a:	2000      	movs	r0, #0
 800651c:	e008      	b.n	8006530 <_printf_common+0xa8>
 800651e:	2301      	movs	r3, #1
 8006520:	4652      	mov	r2, sl
 8006522:	4649      	mov	r1, r9
 8006524:	4638      	mov	r0, r7
 8006526:	47c0      	blx	r8
 8006528:	3001      	adds	r0, #1
 800652a:	d103      	bne.n	8006534 <_printf_common+0xac>
 800652c:	f04f 30ff 	mov.w	r0, #4294967295
 8006530:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006534:	3501      	adds	r5, #1
 8006536:	e7c6      	b.n	80064c6 <_printf_common+0x3e>
 8006538:	18e1      	adds	r1, r4, r3
 800653a:	1c5a      	adds	r2, r3, #1
 800653c:	2030      	movs	r0, #48	; 0x30
 800653e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006542:	4422      	add	r2, r4
 8006544:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006548:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800654c:	3302      	adds	r3, #2
 800654e:	e7c7      	b.n	80064e0 <_printf_common+0x58>
 8006550:	2301      	movs	r3, #1
 8006552:	4622      	mov	r2, r4
 8006554:	4649      	mov	r1, r9
 8006556:	4638      	mov	r0, r7
 8006558:	47c0      	blx	r8
 800655a:	3001      	adds	r0, #1
 800655c:	d0e6      	beq.n	800652c <_printf_common+0xa4>
 800655e:	3601      	adds	r6, #1
 8006560:	e7d9      	b.n	8006516 <_printf_common+0x8e>
	...

08006564 <_printf_i>:
 8006564:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006568:	460c      	mov	r4, r1
 800656a:	4691      	mov	r9, r2
 800656c:	7e27      	ldrb	r7, [r4, #24]
 800656e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006570:	2f78      	cmp	r7, #120	; 0x78
 8006572:	4680      	mov	r8, r0
 8006574:	469a      	mov	sl, r3
 8006576:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800657a:	d807      	bhi.n	800658c <_printf_i+0x28>
 800657c:	2f62      	cmp	r7, #98	; 0x62
 800657e:	d80a      	bhi.n	8006596 <_printf_i+0x32>
 8006580:	2f00      	cmp	r7, #0
 8006582:	f000 80d8 	beq.w	8006736 <_printf_i+0x1d2>
 8006586:	2f58      	cmp	r7, #88	; 0x58
 8006588:	f000 80a3 	beq.w	80066d2 <_printf_i+0x16e>
 800658c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006590:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006594:	e03a      	b.n	800660c <_printf_i+0xa8>
 8006596:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800659a:	2b15      	cmp	r3, #21
 800659c:	d8f6      	bhi.n	800658c <_printf_i+0x28>
 800659e:	a001      	add	r0, pc, #4	; (adr r0, 80065a4 <_printf_i+0x40>)
 80065a0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80065a4:	080065fd 	.word	0x080065fd
 80065a8:	08006611 	.word	0x08006611
 80065ac:	0800658d 	.word	0x0800658d
 80065b0:	0800658d 	.word	0x0800658d
 80065b4:	0800658d 	.word	0x0800658d
 80065b8:	0800658d 	.word	0x0800658d
 80065bc:	08006611 	.word	0x08006611
 80065c0:	0800658d 	.word	0x0800658d
 80065c4:	0800658d 	.word	0x0800658d
 80065c8:	0800658d 	.word	0x0800658d
 80065cc:	0800658d 	.word	0x0800658d
 80065d0:	0800671d 	.word	0x0800671d
 80065d4:	08006641 	.word	0x08006641
 80065d8:	080066ff 	.word	0x080066ff
 80065dc:	0800658d 	.word	0x0800658d
 80065e0:	0800658d 	.word	0x0800658d
 80065e4:	0800673f 	.word	0x0800673f
 80065e8:	0800658d 	.word	0x0800658d
 80065ec:	08006641 	.word	0x08006641
 80065f0:	0800658d 	.word	0x0800658d
 80065f4:	0800658d 	.word	0x0800658d
 80065f8:	08006707 	.word	0x08006707
 80065fc:	680b      	ldr	r3, [r1, #0]
 80065fe:	1d1a      	adds	r2, r3, #4
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	600a      	str	r2, [r1, #0]
 8006604:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006608:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800660c:	2301      	movs	r3, #1
 800660e:	e0a3      	b.n	8006758 <_printf_i+0x1f4>
 8006610:	6825      	ldr	r5, [r4, #0]
 8006612:	6808      	ldr	r0, [r1, #0]
 8006614:	062e      	lsls	r6, r5, #24
 8006616:	f100 0304 	add.w	r3, r0, #4
 800661a:	d50a      	bpl.n	8006632 <_printf_i+0xce>
 800661c:	6805      	ldr	r5, [r0, #0]
 800661e:	600b      	str	r3, [r1, #0]
 8006620:	2d00      	cmp	r5, #0
 8006622:	da03      	bge.n	800662c <_printf_i+0xc8>
 8006624:	232d      	movs	r3, #45	; 0x2d
 8006626:	426d      	negs	r5, r5
 8006628:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800662c:	485e      	ldr	r0, [pc, #376]	; (80067a8 <_printf_i+0x244>)
 800662e:	230a      	movs	r3, #10
 8006630:	e019      	b.n	8006666 <_printf_i+0x102>
 8006632:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006636:	6805      	ldr	r5, [r0, #0]
 8006638:	600b      	str	r3, [r1, #0]
 800663a:	bf18      	it	ne
 800663c:	b22d      	sxthne	r5, r5
 800663e:	e7ef      	b.n	8006620 <_printf_i+0xbc>
 8006640:	680b      	ldr	r3, [r1, #0]
 8006642:	6825      	ldr	r5, [r4, #0]
 8006644:	1d18      	adds	r0, r3, #4
 8006646:	6008      	str	r0, [r1, #0]
 8006648:	0628      	lsls	r0, r5, #24
 800664a:	d501      	bpl.n	8006650 <_printf_i+0xec>
 800664c:	681d      	ldr	r5, [r3, #0]
 800664e:	e002      	b.n	8006656 <_printf_i+0xf2>
 8006650:	0669      	lsls	r1, r5, #25
 8006652:	d5fb      	bpl.n	800664c <_printf_i+0xe8>
 8006654:	881d      	ldrh	r5, [r3, #0]
 8006656:	4854      	ldr	r0, [pc, #336]	; (80067a8 <_printf_i+0x244>)
 8006658:	2f6f      	cmp	r7, #111	; 0x6f
 800665a:	bf0c      	ite	eq
 800665c:	2308      	moveq	r3, #8
 800665e:	230a      	movne	r3, #10
 8006660:	2100      	movs	r1, #0
 8006662:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006666:	6866      	ldr	r6, [r4, #4]
 8006668:	60a6      	str	r6, [r4, #8]
 800666a:	2e00      	cmp	r6, #0
 800666c:	bfa2      	ittt	ge
 800666e:	6821      	ldrge	r1, [r4, #0]
 8006670:	f021 0104 	bicge.w	r1, r1, #4
 8006674:	6021      	strge	r1, [r4, #0]
 8006676:	b90d      	cbnz	r5, 800667c <_printf_i+0x118>
 8006678:	2e00      	cmp	r6, #0
 800667a:	d04d      	beq.n	8006718 <_printf_i+0x1b4>
 800667c:	4616      	mov	r6, r2
 800667e:	fbb5 f1f3 	udiv	r1, r5, r3
 8006682:	fb03 5711 	mls	r7, r3, r1, r5
 8006686:	5dc7      	ldrb	r7, [r0, r7]
 8006688:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800668c:	462f      	mov	r7, r5
 800668e:	42bb      	cmp	r3, r7
 8006690:	460d      	mov	r5, r1
 8006692:	d9f4      	bls.n	800667e <_printf_i+0x11a>
 8006694:	2b08      	cmp	r3, #8
 8006696:	d10b      	bne.n	80066b0 <_printf_i+0x14c>
 8006698:	6823      	ldr	r3, [r4, #0]
 800669a:	07df      	lsls	r7, r3, #31
 800669c:	d508      	bpl.n	80066b0 <_printf_i+0x14c>
 800669e:	6923      	ldr	r3, [r4, #16]
 80066a0:	6861      	ldr	r1, [r4, #4]
 80066a2:	4299      	cmp	r1, r3
 80066a4:	bfde      	ittt	le
 80066a6:	2330      	movle	r3, #48	; 0x30
 80066a8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80066ac:	f106 36ff 	addle.w	r6, r6, #4294967295
 80066b0:	1b92      	subs	r2, r2, r6
 80066b2:	6122      	str	r2, [r4, #16]
 80066b4:	f8cd a000 	str.w	sl, [sp]
 80066b8:	464b      	mov	r3, r9
 80066ba:	aa03      	add	r2, sp, #12
 80066bc:	4621      	mov	r1, r4
 80066be:	4640      	mov	r0, r8
 80066c0:	f7ff fee2 	bl	8006488 <_printf_common>
 80066c4:	3001      	adds	r0, #1
 80066c6:	d14c      	bne.n	8006762 <_printf_i+0x1fe>
 80066c8:	f04f 30ff 	mov.w	r0, #4294967295
 80066cc:	b004      	add	sp, #16
 80066ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066d2:	4835      	ldr	r0, [pc, #212]	; (80067a8 <_printf_i+0x244>)
 80066d4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80066d8:	6823      	ldr	r3, [r4, #0]
 80066da:	680e      	ldr	r6, [r1, #0]
 80066dc:	061f      	lsls	r7, r3, #24
 80066de:	f856 5b04 	ldr.w	r5, [r6], #4
 80066e2:	600e      	str	r6, [r1, #0]
 80066e4:	d514      	bpl.n	8006710 <_printf_i+0x1ac>
 80066e6:	07d9      	lsls	r1, r3, #31
 80066e8:	bf44      	itt	mi
 80066ea:	f043 0320 	orrmi.w	r3, r3, #32
 80066ee:	6023      	strmi	r3, [r4, #0]
 80066f0:	b91d      	cbnz	r5, 80066fa <_printf_i+0x196>
 80066f2:	6823      	ldr	r3, [r4, #0]
 80066f4:	f023 0320 	bic.w	r3, r3, #32
 80066f8:	6023      	str	r3, [r4, #0]
 80066fa:	2310      	movs	r3, #16
 80066fc:	e7b0      	b.n	8006660 <_printf_i+0xfc>
 80066fe:	6823      	ldr	r3, [r4, #0]
 8006700:	f043 0320 	orr.w	r3, r3, #32
 8006704:	6023      	str	r3, [r4, #0]
 8006706:	2378      	movs	r3, #120	; 0x78
 8006708:	4828      	ldr	r0, [pc, #160]	; (80067ac <_printf_i+0x248>)
 800670a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800670e:	e7e3      	b.n	80066d8 <_printf_i+0x174>
 8006710:	065e      	lsls	r6, r3, #25
 8006712:	bf48      	it	mi
 8006714:	b2ad      	uxthmi	r5, r5
 8006716:	e7e6      	b.n	80066e6 <_printf_i+0x182>
 8006718:	4616      	mov	r6, r2
 800671a:	e7bb      	b.n	8006694 <_printf_i+0x130>
 800671c:	680b      	ldr	r3, [r1, #0]
 800671e:	6826      	ldr	r6, [r4, #0]
 8006720:	6960      	ldr	r0, [r4, #20]
 8006722:	1d1d      	adds	r5, r3, #4
 8006724:	600d      	str	r5, [r1, #0]
 8006726:	0635      	lsls	r5, r6, #24
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	d501      	bpl.n	8006730 <_printf_i+0x1cc>
 800672c:	6018      	str	r0, [r3, #0]
 800672e:	e002      	b.n	8006736 <_printf_i+0x1d2>
 8006730:	0671      	lsls	r1, r6, #25
 8006732:	d5fb      	bpl.n	800672c <_printf_i+0x1c8>
 8006734:	8018      	strh	r0, [r3, #0]
 8006736:	2300      	movs	r3, #0
 8006738:	6123      	str	r3, [r4, #16]
 800673a:	4616      	mov	r6, r2
 800673c:	e7ba      	b.n	80066b4 <_printf_i+0x150>
 800673e:	680b      	ldr	r3, [r1, #0]
 8006740:	1d1a      	adds	r2, r3, #4
 8006742:	600a      	str	r2, [r1, #0]
 8006744:	681e      	ldr	r6, [r3, #0]
 8006746:	6862      	ldr	r2, [r4, #4]
 8006748:	2100      	movs	r1, #0
 800674a:	4630      	mov	r0, r6
 800674c:	f7f9 fdd0 	bl	80002f0 <memchr>
 8006750:	b108      	cbz	r0, 8006756 <_printf_i+0x1f2>
 8006752:	1b80      	subs	r0, r0, r6
 8006754:	6060      	str	r0, [r4, #4]
 8006756:	6863      	ldr	r3, [r4, #4]
 8006758:	6123      	str	r3, [r4, #16]
 800675a:	2300      	movs	r3, #0
 800675c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006760:	e7a8      	b.n	80066b4 <_printf_i+0x150>
 8006762:	6923      	ldr	r3, [r4, #16]
 8006764:	4632      	mov	r2, r6
 8006766:	4649      	mov	r1, r9
 8006768:	4640      	mov	r0, r8
 800676a:	47d0      	blx	sl
 800676c:	3001      	adds	r0, #1
 800676e:	d0ab      	beq.n	80066c8 <_printf_i+0x164>
 8006770:	6823      	ldr	r3, [r4, #0]
 8006772:	079b      	lsls	r3, r3, #30
 8006774:	d413      	bmi.n	800679e <_printf_i+0x23a>
 8006776:	68e0      	ldr	r0, [r4, #12]
 8006778:	9b03      	ldr	r3, [sp, #12]
 800677a:	4298      	cmp	r0, r3
 800677c:	bfb8      	it	lt
 800677e:	4618      	movlt	r0, r3
 8006780:	e7a4      	b.n	80066cc <_printf_i+0x168>
 8006782:	2301      	movs	r3, #1
 8006784:	4632      	mov	r2, r6
 8006786:	4649      	mov	r1, r9
 8006788:	4640      	mov	r0, r8
 800678a:	47d0      	blx	sl
 800678c:	3001      	adds	r0, #1
 800678e:	d09b      	beq.n	80066c8 <_printf_i+0x164>
 8006790:	3501      	adds	r5, #1
 8006792:	68e3      	ldr	r3, [r4, #12]
 8006794:	9903      	ldr	r1, [sp, #12]
 8006796:	1a5b      	subs	r3, r3, r1
 8006798:	42ab      	cmp	r3, r5
 800679a:	dcf2      	bgt.n	8006782 <_printf_i+0x21e>
 800679c:	e7eb      	b.n	8006776 <_printf_i+0x212>
 800679e:	2500      	movs	r5, #0
 80067a0:	f104 0619 	add.w	r6, r4, #25
 80067a4:	e7f5      	b.n	8006792 <_printf_i+0x22e>
 80067a6:	bf00      	nop
 80067a8:	08006fc9 	.word	0x08006fc9
 80067ac:	08006fda 	.word	0x08006fda

080067b0 <_putc_r>:
 80067b0:	b570      	push	{r4, r5, r6, lr}
 80067b2:	460d      	mov	r5, r1
 80067b4:	4614      	mov	r4, r2
 80067b6:	4606      	mov	r6, r0
 80067b8:	b118      	cbz	r0, 80067c2 <_putc_r+0x12>
 80067ba:	6983      	ldr	r3, [r0, #24]
 80067bc:	b90b      	cbnz	r3, 80067c2 <_putc_r+0x12>
 80067be:	f7ff fc0f 	bl	8005fe0 <__sinit>
 80067c2:	4b1c      	ldr	r3, [pc, #112]	; (8006834 <_putc_r+0x84>)
 80067c4:	429c      	cmp	r4, r3
 80067c6:	d124      	bne.n	8006812 <_putc_r+0x62>
 80067c8:	6874      	ldr	r4, [r6, #4]
 80067ca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80067cc:	07d8      	lsls	r0, r3, #31
 80067ce:	d405      	bmi.n	80067dc <_putc_r+0x2c>
 80067d0:	89a3      	ldrh	r3, [r4, #12]
 80067d2:	0599      	lsls	r1, r3, #22
 80067d4:	d402      	bmi.n	80067dc <_putc_r+0x2c>
 80067d6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80067d8:	f7ff fca0 	bl	800611c <__retarget_lock_acquire_recursive>
 80067dc:	68a3      	ldr	r3, [r4, #8]
 80067de:	3b01      	subs	r3, #1
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	60a3      	str	r3, [r4, #8]
 80067e4:	da05      	bge.n	80067f2 <_putc_r+0x42>
 80067e6:	69a2      	ldr	r2, [r4, #24]
 80067e8:	4293      	cmp	r3, r2
 80067ea:	db1c      	blt.n	8006826 <_putc_r+0x76>
 80067ec:	b2eb      	uxtb	r3, r5
 80067ee:	2b0a      	cmp	r3, #10
 80067f0:	d019      	beq.n	8006826 <_putc_r+0x76>
 80067f2:	6823      	ldr	r3, [r4, #0]
 80067f4:	1c5a      	adds	r2, r3, #1
 80067f6:	6022      	str	r2, [r4, #0]
 80067f8:	701d      	strb	r5, [r3, #0]
 80067fa:	b2ed      	uxtb	r5, r5
 80067fc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80067fe:	07da      	lsls	r2, r3, #31
 8006800:	d405      	bmi.n	800680e <_putc_r+0x5e>
 8006802:	89a3      	ldrh	r3, [r4, #12]
 8006804:	059b      	lsls	r3, r3, #22
 8006806:	d402      	bmi.n	800680e <_putc_r+0x5e>
 8006808:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800680a:	f7ff fc88 	bl	800611e <__retarget_lock_release_recursive>
 800680e:	4628      	mov	r0, r5
 8006810:	bd70      	pop	{r4, r5, r6, pc}
 8006812:	4b09      	ldr	r3, [pc, #36]	; (8006838 <_putc_r+0x88>)
 8006814:	429c      	cmp	r4, r3
 8006816:	d101      	bne.n	800681c <_putc_r+0x6c>
 8006818:	68b4      	ldr	r4, [r6, #8]
 800681a:	e7d6      	b.n	80067ca <_putc_r+0x1a>
 800681c:	4b07      	ldr	r3, [pc, #28]	; (800683c <_putc_r+0x8c>)
 800681e:	429c      	cmp	r4, r3
 8006820:	bf08      	it	eq
 8006822:	68f4      	ldreq	r4, [r6, #12]
 8006824:	e7d1      	b.n	80067ca <_putc_r+0x1a>
 8006826:	4629      	mov	r1, r5
 8006828:	4622      	mov	r2, r4
 800682a:	4630      	mov	r0, r6
 800682c:	f000 f85c 	bl	80068e8 <__swbuf_r>
 8006830:	4605      	mov	r5, r0
 8006832:	e7e3      	b.n	80067fc <_putc_r+0x4c>
 8006834:	08006f78 	.word	0x08006f78
 8006838:	08006f98 	.word	0x08006f98
 800683c:	08006f58 	.word	0x08006f58

08006840 <_sbrk_r>:
 8006840:	b538      	push	{r3, r4, r5, lr}
 8006842:	4d06      	ldr	r5, [pc, #24]	; (800685c <_sbrk_r+0x1c>)
 8006844:	2300      	movs	r3, #0
 8006846:	4604      	mov	r4, r0
 8006848:	4608      	mov	r0, r1
 800684a:	602b      	str	r3, [r5, #0]
 800684c:	f7fa f948 	bl	8000ae0 <_sbrk>
 8006850:	1c43      	adds	r3, r0, #1
 8006852:	d102      	bne.n	800685a <_sbrk_r+0x1a>
 8006854:	682b      	ldr	r3, [r5, #0]
 8006856:	b103      	cbz	r3, 800685a <_sbrk_r+0x1a>
 8006858:	6023      	str	r3, [r4, #0]
 800685a:	bd38      	pop	{r3, r4, r5, pc}
 800685c:	240001b8 	.word	0x240001b8

08006860 <__sread>:
 8006860:	b510      	push	{r4, lr}
 8006862:	460c      	mov	r4, r1
 8006864:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006868:	f000 fab4 	bl	8006dd4 <_read_r>
 800686c:	2800      	cmp	r0, #0
 800686e:	bfab      	itete	ge
 8006870:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006872:	89a3      	ldrhlt	r3, [r4, #12]
 8006874:	181b      	addge	r3, r3, r0
 8006876:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800687a:	bfac      	ite	ge
 800687c:	6563      	strge	r3, [r4, #84]	; 0x54
 800687e:	81a3      	strhlt	r3, [r4, #12]
 8006880:	bd10      	pop	{r4, pc}

08006882 <__swrite>:
 8006882:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006886:	461f      	mov	r7, r3
 8006888:	898b      	ldrh	r3, [r1, #12]
 800688a:	05db      	lsls	r3, r3, #23
 800688c:	4605      	mov	r5, r0
 800688e:	460c      	mov	r4, r1
 8006890:	4616      	mov	r6, r2
 8006892:	d505      	bpl.n	80068a0 <__swrite+0x1e>
 8006894:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006898:	2302      	movs	r3, #2
 800689a:	2200      	movs	r2, #0
 800689c:	f000 f9c8 	bl	8006c30 <_lseek_r>
 80068a0:	89a3      	ldrh	r3, [r4, #12]
 80068a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80068a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80068aa:	81a3      	strh	r3, [r4, #12]
 80068ac:	4632      	mov	r2, r6
 80068ae:	463b      	mov	r3, r7
 80068b0:	4628      	mov	r0, r5
 80068b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80068b6:	f000 b869 	b.w	800698c <_write_r>

080068ba <__sseek>:
 80068ba:	b510      	push	{r4, lr}
 80068bc:	460c      	mov	r4, r1
 80068be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068c2:	f000 f9b5 	bl	8006c30 <_lseek_r>
 80068c6:	1c43      	adds	r3, r0, #1
 80068c8:	89a3      	ldrh	r3, [r4, #12]
 80068ca:	bf15      	itete	ne
 80068cc:	6560      	strne	r0, [r4, #84]	; 0x54
 80068ce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80068d2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80068d6:	81a3      	strheq	r3, [r4, #12]
 80068d8:	bf18      	it	ne
 80068da:	81a3      	strhne	r3, [r4, #12]
 80068dc:	bd10      	pop	{r4, pc}

080068de <__sclose>:
 80068de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068e2:	f000 b8d3 	b.w	8006a8c <_close_r>
	...

080068e8 <__swbuf_r>:
 80068e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068ea:	460e      	mov	r6, r1
 80068ec:	4614      	mov	r4, r2
 80068ee:	4605      	mov	r5, r0
 80068f0:	b118      	cbz	r0, 80068fa <__swbuf_r+0x12>
 80068f2:	6983      	ldr	r3, [r0, #24]
 80068f4:	b90b      	cbnz	r3, 80068fa <__swbuf_r+0x12>
 80068f6:	f7ff fb73 	bl	8005fe0 <__sinit>
 80068fa:	4b21      	ldr	r3, [pc, #132]	; (8006980 <__swbuf_r+0x98>)
 80068fc:	429c      	cmp	r4, r3
 80068fe:	d12b      	bne.n	8006958 <__swbuf_r+0x70>
 8006900:	686c      	ldr	r4, [r5, #4]
 8006902:	69a3      	ldr	r3, [r4, #24]
 8006904:	60a3      	str	r3, [r4, #8]
 8006906:	89a3      	ldrh	r3, [r4, #12]
 8006908:	071a      	lsls	r2, r3, #28
 800690a:	d52f      	bpl.n	800696c <__swbuf_r+0x84>
 800690c:	6923      	ldr	r3, [r4, #16]
 800690e:	b36b      	cbz	r3, 800696c <__swbuf_r+0x84>
 8006910:	6923      	ldr	r3, [r4, #16]
 8006912:	6820      	ldr	r0, [r4, #0]
 8006914:	1ac0      	subs	r0, r0, r3
 8006916:	6963      	ldr	r3, [r4, #20]
 8006918:	b2f6      	uxtb	r6, r6
 800691a:	4283      	cmp	r3, r0
 800691c:	4637      	mov	r7, r6
 800691e:	dc04      	bgt.n	800692a <__swbuf_r+0x42>
 8006920:	4621      	mov	r1, r4
 8006922:	4628      	mov	r0, r5
 8006924:	f000 f948 	bl	8006bb8 <_fflush_r>
 8006928:	bb30      	cbnz	r0, 8006978 <__swbuf_r+0x90>
 800692a:	68a3      	ldr	r3, [r4, #8]
 800692c:	3b01      	subs	r3, #1
 800692e:	60a3      	str	r3, [r4, #8]
 8006930:	6823      	ldr	r3, [r4, #0]
 8006932:	1c5a      	adds	r2, r3, #1
 8006934:	6022      	str	r2, [r4, #0]
 8006936:	701e      	strb	r6, [r3, #0]
 8006938:	6963      	ldr	r3, [r4, #20]
 800693a:	3001      	adds	r0, #1
 800693c:	4283      	cmp	r3, r0
 800693e:	d004      	beq.n	800694a <__swbuf_r+0x62>
 8006940:	89a3      	ldrh	r3, [r4, #12]
 8006942:	07db      	lsls	r3, r3, #31
 8006944:	d506      	bpl.n	8006954 <__swbuf_r+0x6c>
 8006946:	2e0a      	cmp	r6, #10
 8006948:	d104      	bne.n	8006954 <__swbuf_r+0x6c>
 800694a:	4621      	mov	r1, r4
 800694c:	4628      	mov	r0, r5
 800694e:	f000 f933 	bl	8006bb8 <_fflush_r>
 8006952:	b988      	cbnz	r0, 8006978 <__swbuf_r+0x90>
 8006954:	4638      	mov	r0, r7
 8006956:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006958:	4b0a      	ldr	r3, [pc, #40]	; (8006984 <__swbuf_r+0x9c>)
 800695a:	429c      	cmp	r4, r3
 800695c:	d101      	bne.n	8006962 <__swbuf_r+0x7a>
 800695e:	68ac      	ldr	r4, [r5, #8]
 8006960:	e7cf      	b.n	8006902 <__swbuf_r+0x1a>
 8006962:	4b09      	ldr	r3, [pc, #36]	; (8006988 <__swbuf_r+0xa0>)
 8006964:	429c      	cmp	r4, r3
 8006966:	bf08      	it	eq
 8006968:	68ec      	ldreq	r4, [r5, #12]
 800696a:	e7ca      	b.n	8006902 <__swbuf_r+0x1a>
 800696c:	4621      	mov	r1, r4
 800696e:	4628      	mov	r0, r5
 8006970:	f000 f81e 	bl	80069b0 <__swsetup_r>
 8006974:	2800      	cmp	r0, #0
 8006976:	d0cb      	beq.n	8006910 <__swbuf_r+0x28>
 8006978:	f04f 37ff 	mov.w	r7, #4294967295
 800697c:	e7ea      	b.n	8006954 <__swbuf_r+0x6c>
 800697e:	bf00      	nop
 8006980:	08006f78 	.word	0x08006f78
 8006984:	08006f98 	.word	0x08006f98
 8006988:	08006f58 	.word	0x08006f58

0800698c <_write_r>:
 800698c:	b538      	push	{r3, r4, r5, lr}
 800698e:	4d07      	ldr	r5, [pc, #28]	; (80069ac <_write_r+0x20>)
 8006990:	4604      	mov	r4, r0
 8006992:	4608      	mov	r0, r1
 8006994:	4611      	mov	r1, r2
 8006996:	2200      	movs	r2, #0
 8006998:	602a      	str	r2, [r5, #0]
 800699a:	461a      	mov	r2, r3
 800699c:	f7f9 ff50 	bl	8000840 <_write>
 80069a0:	1c43      	adds	r3, r0, #1
 80069a2:	d102      	bne.n	80069aa <_write_r+0x1e>
 80069a4:	682b      	ldr	r3, [r5, #0]
 80069a6:	b103      	cbz	r3, 80069aa <_write_r+0x1e>
 80069a8:	6023      	str	r3, [r4, #0]
 80069aa:	bd38      	pop	{r3, r4, r5, pc}
 80069ac:	240001b8 	.word	0x240001b8

080069b0 <__swsetup_r>:
 80069b0:	4b32      	ldr	r3, [pc, #200]	; (8006a7c <__swsetup_r+0xcc>)
 80069b2:	b570      	push	{r4, r5, r6, lr}
 80069b4:	681d      	ldr	r5, [r3, #0]
 80069b6:	4606      	mov	r6, r0
 80069b8:	460c      	mov	r4, r1
 80069ba:	b125      	cbz	r5, 80069c6 <__swsetup_r+0x16>
 80069bc:	69ab      	ldr	r3, [r5, #24]
 80069be:	b913      	cbnz	r3, 80069c6 <__swsetup_r+0x16>
 80069c0:	4628      	mov	r0, r5
 80069c2:	f7ff fb0d 	bl	8005fe0 <__sinit>
 80069c6:	4b2e      	ldr	r3, [pc, #184]	; (8006a80 <__swsetup_r+0xd0>)
 80069c8:	429c      	cmp	r4, r3
 80069ca:	d10f      	bne.n	80069ec <__swsetup_r+0x3c>
 80069cc:	686c      	ldr	r4, [r5, #4]
 80069ce:	89a3      	ldrh	r3, [r4, #12]
 80069d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80069d4:	0719      	lsls	r1, r3, #28
 80069d6:	d42c      	bmi.n	8006a32 <__swsetup_r+0x82>
 80069d8:	06dd      	lsls	r5, r3, #27
 80069da:	d411      	bmi.n	8006a00 <__swsetup_r+0x50>
 80069dc:	2309      	movs	r3, #9
 80069de:	6033      	str	r3, [r6, #0]
 80069e0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80069e4:	81a3      	strh	r3, [r4, #12]
 80069e6:	f04f 30ff 	mov.w	r0, #4294967295
 80069ea:	e03e      	b.n	8006a6a <__swsetup_r+0xba>
 80069ec:	4b25      	ldr	r3, [pc, #148]	; (8006a84 <__swsetup_r+0xd4>)
 80069ee:	429c      	cmp	r4, r3
 80069f0:	d101      	bne.n	80069f6 <__swsetup_r+0x46>
 80069f2:	68ac      	ldr	r4, [r5, #8]
 80069f4:	e7eb      	b.n	80069ce <__swsetup_r+0x1e>
 80069f6:	4b24      	ldr	r3, [pc, #144]	; (8006a88 <__swsetup_r+0xd8>)
 80069f8:	429c      	cmp	r4, r3
 80069fa:	bf08      	it	eq
 80069fc:	68ec      	ldreq	r4, [r5, #12]
 80069fe:	e7e6      	b.n	80069ce <__swsetup_r+0x1e>
 8006a00:	0758      	lsls	r0, r3, #29
 8006a02:	d512      	bpl.n	8006a2a <__swsetup_r+0x7a>
 8006a04:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006a06:	b141      	cbz	r1, 8006a1a <__swsetup_r+0x6a>
 8006a08:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006a0c:	4299      	cmp	r1, r3
 8006a0e:	d002      	beq.n	8006a16 <__swsetup_r+0x66>
 8006a10:	4630      	mov	r0, r6
 8006a12:	f000 f98f 	bl	8006d34 <_free_r>
 8006a16:	2300      	movs	r3, #0
 8006a18:	6363      	str	r3, [r4, #52]	; 0x34
 8006a1a:	89a3      	ldrh	r3, [r4, #12]
 8006a1c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006a20:	81a3      	strh	r3, [r4, #12]
 8006a22:	2300      	movs	r3, #0
 8006a24:	6063      	str	r3, [r4, #4]
 8006a26:	6923      	ldr	r3, [r4, #16]
 8006a28:	6023      	str	r3, [r4, #0]
 8006a2a:	89a3      	ldrh	r3, [r4, #12]
 8006a2c:	f043 0308 	orr.w	r3, r3, #8
 8006a30:	81a3      	strh	r3, [r4, #12]
 8006a32:	6923      	ldr	r3, [r4, #16]
 8006a34:	b94b      	cbnz	r3, 8006a4a <__swsetup_r+0x9a>
 8006a36:	89a3      	ldrh	r3, [r4, #12]
 8006a38:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006a3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a40:	d003      	beq.n	8006a4a <__swsetup_r+0x9a>
 8006a42:	4621      	mov	r1, r4
 8006a44:	4630      	mov	r0, r6
 8006a46:	f000 f929 	bl	8006c9c <__smakebuf_r>
 8006a4a:	89a0      	ldrh	r0, [r4, #12]
 8006a4c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006a50:	f010 0301 	ands.w	r3, r0, #1
 8006a54:	d00a      	beq.n	8006a6c <__swsetup_r+0xbc>
 8006a56:	2300      	movs	r3, #0
 8006a58:	60a3      	str	r3, [r4, #8]
 8006a5a:	6963      	ldr	r3, [r4, #20]
 8006a5c:	425b      	negs	r3, r3
 8006a5e:	61a3      	str	r3, [r4, #24]
 8006a60:	6923      	ldr	r3, [r4, #16]
 8006a62:	b943      	cbnz	r3, 8006a76 <__swsetup_r+0xc6>
 8006a64:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006a68:	d1ba      	bne.n	80069e0 <__swsetup_r+0x30>
 8006a6a:	bd70      	pop	{r4, r5, r6, pc}
 8006a6c:	0781      	lsls	r1, r0, #30
 8006a6e:	bf58      	it	pl
 8006a70:	6963      	ldrpl	r3, [r4, #20]
 8006a72:	60a3      	str	r3, [r4, #8]
 8006a74:	e7f4      	b.n	8006a60 <__swsetup_r+0xb0>
 8006a76:	2000      	movs	r0, #0
 8006a78:	e7f7      	b.n	8006a6a <__swsetup_r+0xba>
 8006a7a:	bf00      	nop
 8006a7c:	24000014 	.word	0x24000014
 8006a80:	08006f78 	.word	0x08006f78
 8006a84:	08006f98 	.word	0x08006f98
 8006a88:	08006f58 	.word	0x08006f58

08006a8c <_close_r>:
 8006a8c:	b538      	push	{r3, r4, r5, lr}
 8006a8e:	4d06      	ldr	r5, [pc, #24]	; (8006aa8 <_close_r+0x1c>)
 8006a90:	2300      	movs	r3, #0
 8006a92:	4604      	mov	r4, r0
 8006a94:	4608      	mov	r0, r1
 8006a96:	602b      	str	r3, [r5, #0]
 8006a98:	f7f9 ffed 	bl	8000a76 <_close>
 8006a9c:	1c43      	adds	r3, r0, #1
 8006a9e:	d102      	bne.n	8006aa6 <_close_r+0x1a>
 8006aa0:	682b      	ldr	r3, [r5, #0]
 8006aa2:	b103      	cbz	r3, 8006aa6 <_close_r+0x1a>
 8006aa4:	6023      	str	r3, [r4, #0]
 8006aa6:	bd38      	pop	{r3, r4, r5, pc}
 8006aa8:	240001b8 	.word	0x240001b8

08006aac <__sflush_r>:
 8006aac:	898a      	ldrh	r2, [r1, #12]
 8006aae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ab2:	4605      	mov	r5, r0
 8006ab4:	0710      	lsls	r0, r2, #28
 8006ab6:	460c      	mov	r4, r1
 8006ab8:	d458      	bmi.n	8006b6c <__sflush_r+0xc0>
 8006aba:	684b      	ldr	r3, [r1, #4]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	dc05      	bgt.n	8006acc <__sflush_r+0x20>
 8006ac0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	dc02      	bgt.n	8006acc <__sflush_r+0x20>
 8006ac6:	2000      	movs	r0, #0
 8006ac8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006acc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006ace:	2e00      	cmp	r6, #0
 8006ad0:	d0f9      	beq.n	8006ac6 <__sflush_r+0x1a>
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006ad8:	682f      	ldr	r7, [r5, #0]
 8006ada:	602b      	str	r3, [r5, #0]
 8006adc:	d032      	beq.n	8006b44 <__sflush_r+0x98>
 8006ade:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006ae0:	89a3      	ldrh	r3, [r4, #12]
 8006ae2:	075a      	lsls	r2, r3, #29
 8006ae4:	d505      	bpl.n	8006af2 <__sflush_r+0x46>
 8006ae6:	6863      	ldr	r3, [r4, #4]
 8006ae8:	1ac0      	subs	r0, r0, r3
 8006aea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006aec:	b10b      	cbz	r3, 8006af2 <__sflush_r+0x46>
 8006aee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006af0:	1ac0      	subs	r0, r0, r3
 8006af2:	2300      	movs	r3, #0
 8006af4:	4602      	mov	r2, r0
 8006af6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006af8:	6a21      	ldr	r1, [r4, #32]
 8006afa:	4628      	mov	r0, r5
 8006afc:	47b0      	blx	r6
 8006afe:	1c43      	adds	r3, r0, #1
 8006b00:	89a3      	ldrh	r3, [r4, #12]
 8006b02:	d106      	bne.n	8006b12 <__sflush_r+0x66>
 8006b04:	6829      	ldr	r1, [r5, #0]
 8006b06:	291d      	cmp	r1, #29
 8006b08:	d82c      	bhi.n	8006b64 <__sflush_r+0xb8>
 8006b0a:	4a2a      	ldr	r2, [pc, #168]	; (8006bb4 <__sflush_r+0x108>)
 8006b0c:	40ca      	lsrs	r2, r1
 8006b0e:	07d6      	lsls	r6, r2, #31
 8006b10:	d528      	bpl.n	8006b64 <__sflush_r+0xb8>
 8006b12:	2200      	movs	r2, #0
 8006b14:	6062      	str	r2, [r4, #4]
 8006b16:	04d9      	lsls	r1, r3, #19
 8006b18:	6922      	ldr	r2, [r4, #16]
 8006b1a:	6022      	str	r2, [r4, #0]
 8006b1c:	d504      	bpl.n	8006b28 <__sflush_r+0x7c>
 8006b1e:	1c42      	adds	r2, r0, #1
 8006b20:	d101      	bne.n	8006b26 <__sflush_r+0x7a>
 8006b22:	682b      	ldr	r3, [r5, #0]
 8006b24:	b903      	cbnz	r3, 8006b28 <__sflush_r+0x7c>
 8006b26:	6560      	str	r0, [r4, #84]	; 0x54
 8006b28:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006b2a:	602f      	str	r7, [r5, #0]
 8006b2c:	2900      	cmp	r1, #0
 8006b2e:	d0ca      	beq.n	8006ac6 <__sflush_r+0x1a>
 8006b30:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006b34:	4299      	cmp	r1, r3
 8006b36:	d002      	beq.n	8006b3e <__sflush_r+0x92>
 8006b38:	4628      	mov	r0, r5
 8006b3a:	f000 f8fb 	bl	8006d34 <_free_r>
 8006b3e:	2000      	movs	r0, #0
 8006b40:	6360      	str	r0, [r4, #52]	; 0x34
 8006b42:	e7c1      	b.n	8006ac8 <__sflush_r+0x1c>
 8006b44:	6a21      	ldr	r1, [r4, #32]
 8006b46:	2301      	movs	r3, #1
 8006b48:	4628      	mov	r0, r5
 8006b4a:	47b0      	blx	r6
 8006b4c:	1c41      	adds	r1, r0, #1
 8006b4e:	d1c7      	bne.n	8006ae0 <__sflush_r+0x34>
 8006b50:	682b      	ldr	r3, [r5, #0]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d0c4      	beq.n	8006ae0 <__sflush_r+0x34>
 8006b56:	2b1d      	cmp	r3, #29
 8006b58:	d001      	beq.n	8006b5e <__sflush_r+0xb2>
 8006b5a:	2b16      	cmp	r3, #22
 8006b5c:	d101      	bne.n	8006b62 <__sflush_r+0xb6>
 8006b5e:	602f      	str	r7, [r5, #0]
 8006b60:	e7b1      	b.n	8006ac6 <__sflush_r+0x1a>
 8006b62:	89a3      	ldrh	r3, [r4, #12]
 8006b64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b68:	81a3      	strh	r3, [r4, #12]
 8006b6a:	e7ad      	b.n	8006ac8 <__sflush_r+0x1c>
 8006b6c:	690f      	ldr	r7, [r1, #16]
 8006b6e:	2f00      	cmp	r7, #0
 8006b70:	d0a9      	beq.n	8006ac6 <__sflush_r+0x1a>
 8006b72:	0793      	lsls	r3, r2, #30
 8006b74:	680e      	ldr	r6, [r1, #0]
 8006b76:	bf08      	it	eq
 8006b78:	694b      	ldreq	r3, [r1, #20]
 8006b7a:	600f      	str	r7, [r1, #0]
 8006b7c:	bf18      	it	ne
 8006b7e:	2300      	movne	r3, #0
 8006b80:	eba6 0807 	sub.w	r8, r6, r7
 8006b84:	608b      	str	r3, [r1, #8]
 8006b86:	f1b8 0f00 	cmp.w	r8, #0
 8006b8a:	dd9c      	ble.n	8006ac6 <__sflush_r+0x1a>
 8006b8c:	6a21      	ldr	r1, [r4, #32]
 8006b8e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006b90:	4643      	mov	r3, r8
 8006b92:	463a      	mov	r2, r7
 8006b94:	4628      	mov	r0, r5
 8006b96:	47b0      	blx	r6
 8006b98:	2800      	cmp	r0, #0
 8006b9a:	dc06      	bgt.n	8006baa <__sflush_r+0xfe>
 8006b9c:	89a3      	ldrh	r3, [r4, #12]
 8006b9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006ba2:	81a3      	strh	r3, [r4, #12]
 8006ba4:	f04f 30ff 	mov.w	r0, #4294967295
 8006ba8:	e78e      	b.n	8006ac8 <__sflush_r+0x1c>
 8006baa:	4407      	add	r7, r0
 8006bac:	eba8 0800 	sub.w	r8, r8, r0
 8006bb0:	e7e9      	b.n	8006b86 <__sflush_r+0xda>
 8006bb2:	bf00      	nop
 8006bb4:	20400001 	.word	0x20400001

08006bb8 <_fflush_r>:
 8006bb8:	b538      	push	{r3, r4, r5, lr}
 8006bba:	690b      	ldr	r3, [r1, #16]
 8006bbc:	4605      	mov	r5, r0
 8006bbe:	460c      	mov	r4, r1
 8006bc0:	b913      	cbnz	r3, 8006bc8 <_fflush_r+0x10>
 8006bc2:	2500      	movs	r5, #0
 8006bc4:	4628      	mov	r0, r5
 8006bc6:	bd38      	pop	{r3, r4, r5, pc}
 8006bc8:	b118      	cbz	r0, 8006bd2 <_fflush_r+0x1a>
 8006bca:	6983      	ldr	r3, [r0, #24]
 8006bcc:	b90b      	cbnz	r3, 8006bd2 <_fflush_r+0x1a>
 8006bce:	f7ff fa07 	bl	8005fe0 <__sinit>
 8006bd2:	4b14      	ldr	r3, [pc, #80]	; (8006c24 <_fflush_r+0x6c>)
 8006bd4:	429c      	cmp	r4, r3
 8006bd6:	d11b      	bne.n	8006c10 <_fflush_r+0x58>
 8006bd8:	686c      	ldr	r4, [r5, #4]
 8006bda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d0ef      	beq.n	8006bc2 <_fflush_r+0xa>
 8006be2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006be4:	07d0      	lsls	r0, r2, #31
 8006be6:	d404      	bmi.n	8006bf2 <_fflush_r+0x3a>
 8006be8:	0599      	lsls	r1, r3, #22
 8006bea:	d402      	bmi.n	8006bf2 <_fflush_r+0x3a>
 8006bec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006bee:	f7ff fa95 	bl	800611c <__retarget_lock_acquire_recursive>
 8006bf2:	4628      	mov	r0, r5
 8006bf4:	4621      	mov	r1, r4
 8006bf6:	f7ff ff59 	bl	8006aac <__sflush_r>
 8006bfa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006bfc:	07da      	lsls	r2, r3, #31
 8006bfe:	4605      	mov	r5, r0
 8006c00:	d4e0      	bmi.n	8006bc4 <_fflush_r+0xc>
 8006c02:	89a3      	ldrh	r3, [r4, #12]
 8006c04:	059b      	lsls	r3, r3, #22
 8006c06:	d4dd      	bmi.n	8006bc4 <_fflush_r+0xc>
 8006c08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006c0a:	f7ff fa88 	bl	800611e <__retarget_lock_release_recursive>
 8006c0e:	e7d9      	b.n	8006bc4 <_fflush_r+0xc>
 8006c10:	4b05      	ldr	r3, [pc, #20]	; (8006c28 <_fflush_r+0x70>)
 8006c12:	429c      	cmp	r4, r3
 8006c14:	d101      	bne.n	8006c1a <_fflush_r+0x62>
 8006c16:	68ac      	ldr	r4, [r5, #8]
 8006c18:	e7df      	b.n	8006bda <_fflush_r+0x22>
 8006c1a:	4b04      	ldr	r3, [pc, #16]	; (8006c2c <_fflush_r+0x74>)
 8006c1c:	429c      	cmp	r4, r3
 8006c1e:	bf08      	it	eq
 8006c20:	68ec      	ldreq	r4, [r5, #12]
 8006c22:	e7da      	b.n	8006bda <_fflush_r+0x22>
 8006c24:	08006f78 	.word	0x08006f78
 8006c28:	08006f98 	.word	0x08006f98
 8006c2c:	08006f58 	.word	0x08006f58

08006c30 <_lseek_r>:
 8006c30:	b538      	push	{r3, r4, r5, lr}
 8006c32:	4d07      	ldr	r5, [pc, #28]	; (8006c50 <_lseek_r+0x20>)
 8006c34:	4604      	mov	r4, r0
 8006c36:	4608      	mov	r0, r1
 8006c38:	4611      	mov	r1, r2
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	602a      	str	r2, [r5, #0]
 8006c3e:	461a      	mov	r2, r3
 8006c40:	f7f9 ff40 	bl	8000ac4 <_lseek>
 8006c44:	1c43      	adds	r3, r0, #1
 8006c46:	d102      	bne.n	8006c4e <_lseek_r+0x1e>
 8006c48:	682b      	ldr	r3, [r5, #0]
 8006c4a:	b103      	cbz	r3, 8006c4e <_lseek_r+0x1e>
 8006c4c:	6023      	str	r3, [r4, #0]
 8006c4e:	bd38      	pop	{r3, r4, r5, pc}
 8006c50:	240001b8 	.word	0x240001b8

08006c54 <__swhatbuf_r>:
 8006c54:	b570      	push	{r4, r5, r6, lr}
 8006c56:	460e      	mov	r6, r1
 8006c58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c5c:	2900      	cmp	r1, #0
 8006c5e:	b096      	sub	sp, #88	; 0x58
 8006c60:	4614      	mov	r4, r2
 8006c62:	461d      	mov	r5, r3
 8006c64:	da07      	bge.n	8006c76 <__swhatbuf_r+0x22>
 8006c66:	2300      	movs	r3, #0
 8006c68:	602b      	str	r3, [r5, #0]
 8006c6a:	89b3      	ldrh	r3, [r6, #12]
 8006c6c:	061a      	lsls	r2, r3, #24
 8006c6e:	d410      	bmi.n	8006c92 <__swhatbuf_r+0x3e>
 8006c70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006c74:	e00e      	b.n	8006c94 <__swhatbuf_r+0x40>
 8006c76:	466a      	mov	r2, sp
 8006c78:	f000 f8be 	bl	8006df8 <_fstat_r>
 8006c7c:	2800      	cmp	r0, #0
 8006c7e:	dbf2      	blt.n	8006c66 <__swhatbuf_r+0x12>
 8006c80:	9a01      	ldr	r2, [sp, #4]
 8006c82:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006c86:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006c8a:	425a      	negs	r2, r3
 8006c8c:	415a      	adcs	r2, r3
 8006c8e:	602a      	str	r2, [r5, #0]
 8006c90:	e7ee      	b.n	8006c70 <__swhatbuf_r+0x1c>
 8006c92:	2340      	movs	r3, #64	; 0x40
 8006c94:	2000      	movs	r0, #0
 8006c96:	6023      	str	r3, [r4, #0]
 8006c98:	b016      	add	sp, #88	; 0x58
 8006c9a:	bd70      	pop	{r4, r5, r6, pc}

08006c9c <__smakebuf_r>:
 8006c9c:	898b      	ldrh	r3, [r1, #12]
 8006c9e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006ca0:	079d      	lsls	r5, r3, #30
 8006ca2:	4606      	mov	r6, r0
 8006ca4:	460c      	mov	r4, r1
 8006ca6:	d507      	bpl.n	8006cb8 <__smakebuf_r+0x1c>
 8006ca8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006cac:	6023      	str	r3, [r4, #0]
 8006cae:	6123      	str	r3, [r4, #16]
 8006cb0:	2301      	movs	r3, #1
 8006cb2:	6163      	str	r3, [r4, #20]
 8006cb4:	b002      	add	sp, #8
 8006cb6:	bd70      	pop	{r4, r5, r6, pc}
 8006cb8:	ab01      	add	r3, sp, #4
 8006cba:	466a      	mov	r2, sp
 8006cbc:	f7ff ffca 	bl	8006c54 <__swhatbuf_r>
 8006cc0:	9900      	ldr	r1, [sp, #0]
 8006cc2:	4605      	mov	r5, r0
 8006cc4:	4630      	mov	r0, r6
 8006cc6:	f7ff fa2b 	bl	8006120 <_malloc_r>
 8006cca:	b948      	cbnz	r0, 8006ce0 <__smakebuf_r+0x44>
 8006ccc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006cd0:	059a      	lsls	r2, r3, #22
 8006cd2:	d4ef      	bmi.n	8006cb4 <__smakebuf_r+0x18>
 8006cd4:	f023 0303 	bic.w	r3, r3, #3
 8006cd8:	f043 0302 	orr.w	r3, r3, #2
 8006cdc:	81a3      	strh	r3, [r4, #12]
 8006cde:	e7e3      	b.n	8006ca8 <__smakebuf_r+0xc>
 8006ce0:	4b0d      	ldr	r3, [pc, #52]	; (8006d18 <__smakebuf_r+0x7c>)
 8006ce2:	62b3      	str	r3, [r6, #40]	; 0x28
 8006ce4:	89a3      	ldrh	r3, [r4, #12]
 8006ce6:	6020      	str	r0, [r4, #0]
 8006ce8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006cec:	81a3      	strh	r3, [r4, #12]
 8006cee:	9b00      	ldr	r3, [sp, #0]
 8006cf0:	6163      	str	r3, [r4, #20]
 8006cf2:	9b01      	ldr	r3, [sp, #4]
 8006cf4:	6120      	str	r0, [r4, #16]
 8006cf6:	b15b      	cbz	r3, 8006d10 <__smakebuf_r+0x74>
 8006cf8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006cfc:	4630      	mov	r0, r6
 8006cfe:	f000 f88d 	bl	8006e1c <_isatty_r>
 8006d02:	b128      	cbz	r0, 8006d10 <__smakebuf_r+0x74>
 8006d04:	89a3      	ldrh	r3, [r4, #12]
 8006d06:	f023 0303 	bic.w	r3, r3, #3
 8006d0a:	f043 0301 	orr.w	r3, r3, #1
 8006d0e:	81a3      	strh	r3, [r4, #12]
 8006d10:	89a0      	ldrh	r0, [r4, #12]
 8006d12:	4305      	orrs	r5, r0
 8006d14:	81a5      	strh	r5, [r4, #12]
 8006d16:	e7cd      	b.n	8006cb4 <__smakebuf_r+0x18>
 8006d18:	08005f79 	.word	0x08005f79

08006d1c <__malloc_lock>:
 8006d1c:	4801      	ldr	r0, [pc, #4]	; (8006d24 <__malloc_lock+0x8>)
 8006d1e:	f7ff b9fd 	b.w	800611c <__retarget_lock_acquire_recursive>
 8006d22:	bf00      	nop
 8006d24:	240001b0 	.word	0x240001b0

08006d28 <__malloc_unlock>:
 8006d28:	4801      	ldr	r0, [pc, #4]	; (8006d30 <__malloc_unlock+0x8>)
 8006d2a:	f7ff b9f8 	b.w	800611e <__retarget_lock_release_recursive>
 8006d2e:	bf00      	nop
 8006d30:	240001b0 	.word	0x240001b0

08006d34 <_free_r>:
 8006d34:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006d36:	2900      	cmp	r1, #0
 8006d38:	d048      	beq.n	8006dcc <_free_r+0x98>
 8006d3a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d3e:	9001      	str	r0, [sp, #4]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	f1a1 0404 	sub.w	r4, r1, #4
 8006d46:	bfb8      	it	lt
 8006d48:	18e4      	addlt	r4, r4, r3
 8006d4a:	f7ff ffe7 	bl	8006d1c <__malloc_lock>
 8006d4e:	4a20      	ldr	r2, [pc, #128]	; (8006dd0 <_free_r+0x9c>)
 8006d50:	9801      	ldr	r0, [sp, #4]
 8006d52:	6813      	ldr	r3, [r2, #0]
 8006d54:	4615      	mov	r5, r2
 8006d56:	b933      	cbnz	r3, 8006d66 <_free_r+0x32>
 8006d58:	6063      	str	r3, [r4, #4]
 8006d5a:	6014      	str	r4, [r2, #0]
 8006d5c:	b003      	add	sp, #12
 8006d5e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006d62:	f7ff bfe1 	b.w	8006d28 <__malloc_unlock>
 8006d66:	42a3      	cmp	r3, r4
 8006d68:	d90b      	bls.n	8006d82 <_free_r+0x4e>
 8006d6a:	6821      	ldr	r1, [r4, #0]
 8006d6c:	1862      	adds	r2, r4, r1
 8006d6e:	4293      	cmp	r3, r2
 8006d70:	bf04      	itt	eq
 8006d72:	681a      	ldreq	r2, [r3, #0]
 8006d74:	685b      	ldreq	r3, [r3, #4]
 8006d76:	6063      	str	r3, [r4, #4]
 8006d78:	bf04      	itt	eq
 8006d7a:	1852      	addeq	r2, r2, r1
 8006d7c:	6022      	streq	r2, [r4, #0]
 8006d7e:	602c      	str	r4, [r5, #0]
 8006d80:	e7ec      	b.n	8006d5c <_free_r+0x28>
 8006d82:	461a      	mov	r2, r3
 8006d84:	685b      	ldr	r3, [r3, #4]
 8006d86:	b10b      	cbz	r3, 8006d8c <_free_r+0x58>
 8006d88:	42a3      	cmp	r3, r4
 8006d8a:	d9fa      	bls.n	8006d82 <_free_r+0x4e>
 8006d8c:	6811      	ldr	r1, [r2, #0]
 8006d8e:	1855      	adds	r5, r2, r1
 8006d90:	42a5      	cmp	r5, r4
 8006d92:	d10b      	bne.n	8006dac <_free_r+0x78>
 8006d94:	6824      	ldr	r4, [r4, #0]
 8006d96:	4421      	add	r1, r4
 8006d98:	1854      	adds	r4, r2, r1
 8006d9a:	42a3      	cmp	r3, r4
 8006d9c:	6011      	str	r1, [r2, #0]
 8006d9e:	d1dd      	bne.n	8006d5c <_free_r+0x28>
 8006da0:	681c      	ldr	r4, [r3, #0]
 8006da2:	685b      	ldr	r3, [r3, #4]
 8006da4:	6053      	str	r3, [r2, #4]
 8006da6:	4421      	add	r1, r4
 8006da8:	6011      	str	r1, [r2, #0]
 8006daa:	e7d7      	b.n	8006d5c <_free_r+0x28>
 8006dac:	d902      	bls.n	8006db4 <_free_r+0x80>
 8006dae:	230c      	movs	r3, #12
 8006db0:	6003      	str	r3, [r0, #0]
 8006db2:	e7d3      	b.n	8006d5c <_free_r+0x28>
 8006db4:	6825      	ldr	r5, [r4, #0]
 8006db6:	1961      	adds	r1, r4, r5
 8006db8:	428b      	cmp	r3, r1
 8006dba:	bf04      	itt	eq
 8006dbc:	6819      	ldreq	r1, [r3, #0]
 8006dbe:	685b      	ldreq	r3, [r3, #4]
 8006dc0:	6063      	str	r3, [r4, #4]
 8006dc2:	bf04      	itt	eq
 8006dc4:	1949      	addeq	r1, r1, r5
 8006dc6:	6021      	streq	r1, [r4, #0]
 8006dc8:	6054      	str	r4, [r2, #4]
 8006dca:	e7c7      	b.n	8006d5c <_free_r+0x28>
 8006dcc:	b003      	add	sp, #12
 8006dce:	bd30      	pop	{r4, r5, pc}
 8006dd0:	240000a0 	.word	0x240000a0

08006dd4 <_read_r>:
 8006dd4:	b538      	push	{r3, r4, r5, lr}
 8006dd6:	4d07      	ldr	r5, [pc, #28]	; (8006df4 <_read_r+0x20>)
 8006dd8:	4604      	mov	r4, r0
 8006dda:	4608      	mov	r0, r1
 8006ddc:	4611      	mov	r1, r2
 8006dde:	2200      	movs	r2, #0
 8006de0:	602a      	str	r2, [r5, #0]
 8006de2:	461a      	mov	r2, r3
 8006de4:	f7f9 fe2a 	bl	8000a3c <_read>
 8006de8:	1c43      	adds	r3, r0, #1
 8006dea:	d102      	bne.n	8006df2 <_read_r+0x1e>
 8006dec:	682b      	ldr	r3, [r5, #0]
 8006dee:	b103      	cbz	r3, 8006df2 <_read_r+0x1e>
 8006df0:	6023      	str	r3, [r4, #0]
 8006df2:	bd38      	pop	{r3, r4, r5, pc}
 8006df4:	240001b8 	.word	0x240001b8

08006df8 <_fstat_r>:
 8006df8:	b538      	push	{r3, r4, r5, lr}
 8006dfa:	4d07      	ldr	r5, [pc, #28]	; (8006e18 <_fstat_r+0x20>)
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	4604      	mov	r4, r0
 8006e00:	4608      	mov	r0, r1
 8006e02:	4611      	mov	r1, r2
 8006e04:	602b      	str	r3, [r5, #0]
 8006e06:	f7f9 fe42 	bl	8000a8e <_fstat>
 8006e0a:	1c43      	adds	r3, r0, #1
 8006e0c:	d102      	bne.n	8006e14 <_fstat_r+0x1c>
 8006e0e:	682b      	ldr	r3, [r5, #0]
 8006e10:	b103      	cbz	r3, 8006e14 <_fstat_r+0x1c>
 8006e12:	6023      	str	r3, [r4, #0]
 8006e14:	bd38      	pop	{r3, r4, r5, pc}
 8006e16:	bf00      	nop
 8006e18:	240001b8 	.word	0x240001b8

08006e1c <_isatty_r>:
 8006e1c:	b538      	push	{r3, r4, r5, lr}
 8006e1e:	4d06      	ldr	r5, [pc, #24]	; (8006e38 <_isatty_r+0x1c>)
 8006e20:	2300      	movs	r3, #0
 8006e22:	4604      	mov	r4, r0
 8006e24:	4608      	mov	r0, r1
 8006e26:	602b      	str	r3, [r5, #0]
 8006e28:	f7f9 fe41 	bl	8000aae <_isatty>
 8006e2c:	1c43      	adds	r3, r0, #1
 8006e2e:	d102      	bne.n	8006e36 <_isatty_r+0x1a>
 8006e30:	682b      	ldr	r3, [r5, #0]
 8006e32:	b103      	cbz	r3, 8006e36 <_isatty_r+0x1a>
 8006e34:	6023      	str	r3, [r4, #0]
 8006e36:	bd38      	pop	{r3, r4, r5, pc}
 8006e38:	240001b8 	.word	0x240001b8

08006e3c <_init>:
 8006e3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e3e:	bf00      	nop
 8006e40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e42:	bc08      	pop	{r3}
 8006e44:	469e      	mov	lr, r3
 8006e46:	4770      	bx	lr

08006e48 <_fini>:
 8006e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e4a:	bf00      	nop
 8006e4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e4e:	bc08      	pop	{r3}
 8006e50:	469e      	mov	lr, r3
 8006e52:	4770      	bx	lr
